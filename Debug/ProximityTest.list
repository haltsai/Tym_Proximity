
ProximityTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080071e8  080071e8  000171e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d4  080076d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080076d4  080076d4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d4  080076d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080076dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  200001e0  080078b8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  080078b8  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f101  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a2  00000000  00000000  0002f306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000319a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000328a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001929a  00000000  00000000  000336c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efcd  00000000  00000000  0004c95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d631  00000000  00000000  0005b927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  000e8fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080071cc 	.word	0x080071cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080071cc 	.word	0x080071cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <fnPollingTask1ms>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void fnPollingTask1ms(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	static unsigned int Count1ms = 0;

	if(0)printf("Count1ms:%d\r\n", ++Count1ms);
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <fnPollingTask5ms>:

void fnPollingTask5ms(void) {
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b090      	sub	sp, #64	; 0x40
 8000f08:	af02      	add	r7, sp, #8

	if(0)printf("Count5ms:%d\r\n", Count5ms);

	//Get TIM2 CNT
	#if(1)
		unsigned int ReadTIM2CNT = __HAL_TIM_GET_COUNTER(&htim2);
 8000f0a:	4ba2      	ldr	r3, [pc, #648]	; (8001194 <fnPollingTask5ms+0x290>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f12:	4ba0      	ldr	r3, [pc, #640]	; (8001194 <fnPollingTask5ms+0x290>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
	#if(1)
		#define SaveTIM2CNT_NUM (200)
		static unsigned int SaveTIM2Cnt[SaveTIM2CNT_NUM] = {0};

		//FIFO
		for(int i=SaveTIM2CNT_NUM-1; i>0; i--) {
 8000f1a:	23c7      	movs	r3, #199	; 0xc7
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f1e:	e00b      	b.n	8000f38 <fnPollingTask5ms+0x34>
			SaveTIM2Cnt[i] = SaveTIM2Cnt[i-1];
 8000f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f22:	3b01      	subs	r3, #1
 8000f24:	4a9c      	ldr	r2, [pc, #624]	; (8001198 <fnPollingTask5ms+0x294>)
 8000f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f2a:	499b      	ldr	r1, [pc, #620]	; (8001198 <fnPollingTask5ms+0x294>)
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=SaveTIM2CNT_NUM-1; i>0; i--) {
 8000f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f34:	3b01      	subs	r3, #1
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
 8000f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dcf0      	bgt.n	8000f20 <fnPollingTask5ms+0x1c>
		} SaveTIM2Cnt[0] = 0;
 8000f3e:	4b96      	ldr	r3, [pc, #600]	; (8001198 <fnPollingTask5ms+0x294>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

		//Push one data into queue
		SaveTIM2Cnt[0] = ReadTIM2CNT;
 8000f44:	4a94      	ldr	r2, [pc, #592]	; (8001198 <fnPollingTask5ms+0x294>)
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	6013      	str	r3, [r2, #0]

		//Check SaveTIM2Cnt Queue full
		switch(ProximityReady) {
 8000f4a:	4b94      	ldr	r3, [pc, #592]	; (800119c <fnPollingTask5ms+0x298>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10b      	bne.n	8000f6a <fnPollingTask5ms+0x66>
			static unsigned int WaitProxiityReadyCNT = 0;
			case xePR_State_Empty:
				if(WaitProxiityReadyCNT++ >= (1000/5)*2 ) {
 8000f52:	4b93      	ldr	r3, [pc, #588]	; (80011a0 <fnPollingTask5ms+0x29c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	4991      	ldr	r1, [pc, #580]	; (80011a0 <fnPollingTask5ms+0x29c>)
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f60:	d305      	bcc.n	8000f6e <fnPollingTask5ms+0x6a>
					ProximityReady = xePR_State_Ready;
 8000f62:	4b8e      	ldr	r3, [pc, #568]	; (800119c <fnPollingTask5ms+0x298>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000f68:	e001      	b.n	8000f6e <fnPollingTask5ms+0x6a>

			default:
				break;
 8000f6a:	bf00      	nop
 8000f6c:	e000      	b.n	8000f70 <fnPollingTask5ms+0x6c>
				break;
 8000f6e:	bf00      	nop
		}

		//SUM datax200
		unsigned int SUMTIM2CNT = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
		for(int i=0; i<SaveTIM2CNT_NUM; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f78:	e009      	b.n	8000f8e <fnPollingTask5ms+0x8a>
			SUMTIM2CNT += SaveTIM2Cnt[i];
 8000f7a:	4a87      	ldr	r2, [pc, #540]	; (8001198 <fnPollingTask5ms+0x294>)
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f84:	4413      	add	r3, r2
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
		for(int i=0; i<SaveTIM2CNT_NUM; i++) {
 8000f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f90:	2bc7      	cmp	r3, #199	; 0xc7
 8000f92:	ddf2      	ble.n	8000f7a <fnPollingTask5ms+0x76>
	//do Post average
	#if(1)
		float ftmp;

		//Plot Frequency post avg (0.25)
		ftmp = SUMTIM2CNT;
 8000f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f96:	f7ff fee1 	bl	8000d5c <__aeabi_ui2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
		float Get0d25PostAvg = ffnPostAvg_0d25(ftmp);
 8000f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa0:	f000 fcb4 	bl	800190c <ffnPostAvg_0d25>
 8000fa4:	6238      	str	r0, [r7, #32]
		if(0)printf(",%f", Get0d25PostAvg);

		//Plot Frequency post avg (0.05)
		ftmp = SUMTIM2CNT;
 8000fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fa8:	f7ff fed8 	bl	8000d5c <__aeabi_ui2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
		float Get0d05PostAvg = ffnPostAvg_0d05(ftmp);
 8000fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb2:	f000 fc79 	bl	80018a8 <ffnPostAvg_0d05>
 8000fb6:	61f8      	str	r0, [r7, #28]
	#endif

	//Plot Offset based on post avg (0.05)
	#if(1)
		//Offset based on post avg (0.05)
		const float cfOffsetValue = 175.0;
 8000fb8:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <fnPollingTask5ms+0x2a0>)
 8000fba:	61bb      	str	r3, [r7, #24]
		float fMaxBoundary = Get0d05PostAvg+cfOffsetValue,
 8000fbc:	69b9      	ldr	r1, [r7, #24]
 8000fbe:	69f8      	ldr	r0, [r7, #28]
 8000fc0:	f7ff fe1c 	bl	8000bfc <__addsf3>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	617b      	str	r3, [r7, #20]
			  fMinBoundary = Get0d05PostAvg-cfOffsetValue;
 8000fc8:	69b9      	ldr	r1, [r7, #24]
 8000fca:	69f8      	ldr	r0, [r7, #28]
 8000fcc:	f7ff fe14 	bl	8000bf8 <__aeabi_fsub>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	613b      	str	r3, [r7, #16]
		if(1)printf(",%f,%f", fMaxBoundary-fMinBoundary, fMinBoundary-fMinBoundary);
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff fe0e 	bl	8000bf8 <__aeabi_fsub>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fad6 	bl	8000590 <__aeabi_f2d>
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	460d      	mov	r5, r1
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	6938      	ldr	r0, [r7, #16]
 8000fec:	f7ff fe04 	bl	8000bf8 <__aeabi_fsub>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff facc 	bl	8000590 <__aeabi_f2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	e9cd 2300 	strd	r2, r3, [sp]
 8001000:	4622      	mov	r2, r4
 8001002:	462b      	mov	r3, r5
 8001004:	4868      	ldr	r0, [pc, #416]	; (80011a8 <fnPollingTask5ms+0x2a4>)
 8001006:	f003 ff61 	bl	8004ecc <iprintf>
	#endif

	//Plot Data line
	#if(1)
		//Plot Frequency post avg (0.25)
		float fPostAvgFrequency = Get0d25PostAvg-fMinBoundary;
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	6a38      	ldr	r0, [r7, #32]
 800100e:	f7ff fdf3 	bl	8000bf8 <__aeabi_fsub>
 8001012:	4603      	mov	r3, r0
 8001014:	60fb      	str	r3, [r7, #12]
		if(1)printf(",%f", fPostAvgFrequency);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff faba 	bl	8000590 <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4862      	ldr	r0, [pc, #392]	; (80011ac <fnPollingTask5ms+0x2a8>)
 8001022:	f003 ff53 	bl	8004ecc <iprintf>

		//Plot Current Frequency
		static const float OffsetCurrFrequency = 8787000;
		float fCurrentFrequencyOffset = SUMTIM2CNT-OffsetCurrFrequency;
 8001026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001028:	f7ff fe98 	bl	8000d5c <__aeabi_ui2f>
 800102c:	4602      	mov	r2, r0
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <fnPollingTask5ms+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	4610      	mov	r0, r2
 8001036:	f7ff fddf 	bl	8000bf8 <__aeabi_fsub>
 800103a:	4603      	mov	r3, r0
 800103c:	60bb      	str	r3, [r7, #8]
		switch(ProximityReady) {
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <fnPollingTask5ms+0x298>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d812      	bhi.n	800106c <fnPollingTask5ms+0x168>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <fnPollingTask5ms+0x148>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	0800106d 	.word	0x0800106d
 8001050:	0800105d 	.word	0x0800105d
 8001054:	08001065 	.word	0x08001065
 8001058:	0800106d 	.word	0x0800106d
			case xePR_State_Empty:
				break;

			case xePR_State_Ready:
				ProximityReady = xePR_State_Save;
 800105c:	4b4f      	ldr	r3, [pc, #316]	; (800119c <fnPollingTask5ms+0x298>)
 800105e:	2202      	movs	r2, #2
 8001060:	701a      	strb	r2, [r3, #0]
				break;
 8001062:	e003      	b.n	800106c <fnPollingTask5ms+0x168>

			case xePR_State_Save:
				ProximityReady = xePR_State_Idle;
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <fnPollingTask5ms+0x298>)
 8001066:	2203      	movs	r2, #3
 8001068:	701a      	strb	r2, [r3, #0]
				break;
 800106a:	bf00      	nop
			xeWS_WearOn,
			xeWS_WearOff,
		} xe_WearState;
		static xe_WearState xeWearState = xeWS_WearNull;

		float TransferMax = 2*cfOffsetValue,
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	4619      	mov	r1, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdc3 	bl	8000bfc <__addsf3>
 8001076:	4603      	mov	r3, r0
 8001078:	607b      	str	r3, [r7, #4]
			  TransferMin = 0.0;
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
		switch(xe_WearValueState) {
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <fnPollingTask5ms+0x2b0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <fnPollingTask5ms+0x18a>
 8001088:	2b01      	cmp	r3, #1
 800108a:	d02e      	beq.n	80010ea <fnPollingTask5ms+0x1e6>
 800108c:	e051      	b.n	8001132 <fnPollingTask5ms+0x22e>
			case xePOCFD_PowerOn:
				switch(ProximityReady) {
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <fnPollingTask5ms+0x298>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d025      	beq.n	80010e2 <fnPollingTask5ms+0x1de>
					case xePR_State_Empty:
						break;

					default:
						if(SAVE_ON_FLOAT > Get0d25PostAvg) {
 8001096:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <fnPollingTask5ms+0x2b4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	6a38      	ldr	r0, [r7, #32]
 800109e:	f7ff ff03 	bl	8000ea8 <__aeabi_fcmplt>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <fnPollingTask5ms+0x1ac>
							xeWearState = xeWS_WearOn;
 80010a8:	4b44      	ldr	r3, [pc, #272]	; (80011bc <fnPollingTask5ms+0x2b8>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e005      	b.n	80010bc <fnPollingTask5ms+0x1b8>
						} else {
							xe_WearValueState = xePOCFD_FreeRun;
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <fnPollingTask5ms+0x2b0>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
							xeWearState = xeWS_WearOff;
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <fnPollingTask5ms+0x2b8>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	701a      	strb	r2, [r3, #0]
						}

						//Wear off
						if( (fPostAvgFrequency>TransferMax) ) {
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff ff10 	bl	8000ee4 <__aeabi_fcmpgt>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <fnPollingTask5ms+0x1c8>
								xeWearState = xeWS_WearOff;

								xe_WearValueState = xePOCFD_FreeRun;
							}
						}
						break;
 80010ca:	e00c      	b.n	80010e6 <fnPollingTask5ms+0x1e2>
							if(xeWearState != xeWS_WearOff) {
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <fnPollingTask5ms+0x2b8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d008      	beq.n	80010e6 <fnPollingTask5ms+0x1e2>
								xeWearState = xeWS_WearOff;
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <fnPollingTask5ms+0x2b8>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
								xe_WearValueState = xePOCFD_FreeRun;
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <fnPollingTask5ms+0x2b0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
						break;
 80010e0:	e001      	b.n	80010e6 <fnPollingTask5ms+0x1e2>
						break;
 80010e2:	bf00      	nop
 80010e4:	e025      	b.n	8001132 <fnPollingTask5ms+0x22e>
						break;
 80010e6:	bf00      	nop
				}
				break;
 80010e8:	e023      	b.n	8001132 <fnPollingTask5ms+0x22e>
				if( (TransferMax>fPostAvgFrequency) &&
						         (fPostAvgFrequency>TransferMin) ) {
				}

				//Wear on
				if( (TransferMin>fPostAvgFrequency) ) {
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f7ff fef9 	bl	8000ee4 <__aeabi_fcmpgt>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <fnPollingTask5ms+0x208>
					if(xeWearState != xeWS_WearOn) {
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <fnPollingTask5ms+0x2b8>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <fnPollingTask5ms+0x208>
						xeWearState = xeWS_WearOn;
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <fnPollingTask5ms+0x2b8>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]

						SAVE_ON_FLOAT = Get0d25PostAvg;
 8001106:	4a2c      	ldr	r2, [pc, #176]	; (80011b8 <fnPollingTask5ms+0x2b4>)
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	6013      	str	r3, [r2, #0]
					}
				}

				//Wear off
				if( (fPostAvgFrequency>TransferMax) ) {
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff fee8 	bl	8000ee4 <__aeabi_fcmpgt>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <fnPollingTask5ms+0x218>
						xeWearState = xeWS_WearOff;

						SAVE_OFF_FLOAT = Get0d25PostAvg;
					}
				}
				break;
 800111a:	e009      	b.n	8001130 <fnPollingTask5ms+0x22c>
					if(xeWearState != xeWS_WearOff) {
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <fnPollingTask5ms+0x2b8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d005      	beq.n	8001130 <fnPollingTask5ms+0x22c>
						xeWearState = xeWS_WearOff;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <fnPollingTask5ms+0x2b8>)
 8001126:	2202      	movs	r2, #2
 8001128:	701a      	strb	r2, [r3, #0]
						SAVE_OFF_FLOAT = Get0d25PostAvg;
 800112a:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <fnPollingTask5ms+0x2b4>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6053      	str	r3, [r2, #4]
				break;
 8001130:	bf00      	nop
		}

		//Plot Wear state
		switch(xeWearState) {
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <fnPollingTask5ms+0x2b8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d018      	beq.n	800116c <fnPollingTask5ms+0x268>
 800113a:	2b02      	cmp	r3, #2
 800113c:	dc23      	bgt.n	8001186 <fnPollingTask5ms+0x282>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d020      	beq.n	8001184 <fnPollingTask5ms+0x280>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d11f      	bne.n	8001186 <fnPollingTask5ms+0x282>
			case xeWS_WearNull:
				break;

			case xeWS_WearOn:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2120      	movs	r1, #32
 800114a:	481d      	ldr	r0, [pc, #116]	; (80011c0 <fnPollingTask5ms+0x2bc>)
 800114c:	f001 fdc4 	bl	8002cd8 <HAL_GPIO_WritePin>

				if(1)printf(",%f",  TransferMax+50.0);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fa1d 	bl	8000590 <__aeabi_f2d>
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <fnPollingTask5ms+0x2c0>)
 800115c:	f7ff f8ba 	bl	80002d4 <__adddf3>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <fnPollingTask5ms+0x2a8>)
 8001166:	f003 feb1 	bl	8004ecc <iprintf>
				break;
 800116a:	e00c      	b.n	8001186 <fnPollingTask5ms+0x282>

			case xeWS_WearOff:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2120      	movs	r1, #32
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <fnPollingTask5ms+0x2bc>)
 8001172:	f001 fdb1 	bl	8002cd8 <HAL_GPIO_WritePin>

				if(1)printf(",%f", -50.0);
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <fnPollingTask5ms+0x2c4>)
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <fnPollingTask5ms+0x2a8>)
 800117e:	f003 fea5 	bl	8004ecc <iprintf>
				break;
 8001182:	e000      	b.n	8001186 <fnPollingTask5ms+0x282>
				break;
 8001184:	bf00      	nop
		//debug
		if(0)printf(",%d,%d",  1500, -1500);
		if(0)printf(",%f,%f",  SAVE_OFF_FLOAT, SAVE_ON_FLOAT);
	#endif

 	if(1)printf("\n");
 8001186:	200a      	movs	r0, #10
 8001188:	f003 feb8 	bl	8004efc <putchar>
}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	; 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	2000056c 	.word	0x2000056c
 8001198:	20000210 	.word	0x20000210
 800119c:	2000020c 	.word	0x2000020c
 80011a0:	20000530 	.word	0x20000530
 80011a4:	432f0000 	.word	0x432f0000
 80011a8:	080071e8 	.word	0x080071e8
 80011ac:	080071f0 	.word	0x080071f0
 80011b0:	080072d4 	.word	0x080072d4
 80011b4:	2000020d 	.word	0x2000020d
 80011b8:	20000200 	.word	0x20000200
 80011bc:	20000534 	.word	0x20000534
 80011c0:	40010c00 	.word	0x40010c00
 80011c4:	40490000 	.word	0x40490000
 80011c8:	c0490000 	.word	0xc0490000

080011cc <fnPollingTask10ms>:

void fnPollingTask10ms(void) {
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	static unsigned int Count10ms = 0;

	if(0)printf("Count10ms:%d\r\n", ++Count10ms);
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <fnPollingTask50ms>:

void fnPollingTask50ms(void) {
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	static unsigned int Count50ms = 0;

	if(0)printf("Count50ms:%d\r\n", ++Count50ms);
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <fnPollingTask100ms>:

void fnPollingTask100ms(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	static unsigned int Count100ms = 0;

	if(0)printf("Count100ms:%d\r\n", ++Count100ms);

	switch(ProximityReady) {
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <fnPollingTask100ms+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <fnPollingTask100ms+0x16>
		case xePR_State_Empty:
			break;

		default:
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011f0:	2120      	movs	r1, #32
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <fnPollingTask100ms+0x20>)
 80011f4:	f001 fd88 	bl	8002d08 <HAL_GPIO_TogglePin>
			break;
 80011f8:	e000      	b.n	80011fc <fnPollingTask100ms+0x18>
			break;
 80011fa:	bf00      	nop
	}

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000020c 	.word	0x2000020c
 8001204:	40010800 	.word	0x40010800

08001208 <fnPollingTask500ms>:

void fnPollingTask500ms(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	static unsigned int Count500ms = 0;

	if(0)printf("Count500ms:%d\r\n", ++Count500ms);

	if(BTN_Blue) {
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <fnPollingTask500ms+0x2c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <fnPollingTask500ms+0x26>
		BTN_Blue = 0;
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <fnPollingTask500ms+0x2c>)
 800121c:	7813      	ldrb	r3, [r2, #0]
 800121e:	f36f 0300 	bfc	r3, #0, #1
 8001222:	7013      	strb	r3, [r2, #0]
		fnButtonEvent();
 8001224:	f000 f842 	bl	80012ac <fnButtonEvent>
		printf("BlueButton Press\r\n");
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <fnPollingTask500ms+0x30>)
 800122a:	f003 fee9 	bl	8005000 <puts>
	}
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000208 	.word	0x20000208
 8001238:	080071f4 	.word	0x080071f4

0800123c <fnPollingTask1000ms>:

void fnPollingTask1000ms(void) {
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	static unsigned int Count1000ms = 0;

	if(0)printf("Count1000ms:%d\r\n", ++Count1000ms);
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <fnInfinitePolling>:

void fnInfinitePolling(void) {
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <fnSteup>:

void fnSteup(void) {
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af02      	add	r7, sp, #8
    //Read Flash
    if(1) {
        memset(PostAvgOffsetValue.Byte4float, 0, sizeof(PostAvgOffsetValue));
 800125a:	2208      	movs	r2, #8
 800125c:	2100      	movs	r1, #0
 800125e:	4810      	ldr	r0, [pc, #64]	; (80012a0 <fnSteup+0x4c>)
 8001260:	f003 f9cc 	bl	80045fc <memset>

        read_flash((uint8_t*)PostAvgOffsetValue.Byte4float);
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <fnSteup+0x4c>)
 8001266:	f000 fc3d 	bl	8001ae4 <read_flash>
        ProximityReady = xePR_State_Empty;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <fnSteup+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
        printf("Read:<%f:%f>, done!!\r\n", PostAvgOffsetValue.f4Byte[0], PostAvgOffsetValue.f4Byte[1]);
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <fnSteup+0x4c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f98b 	bl	8000590 <__aeabi_f2d>
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <fnSteup+0x4c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f984 	bl	8000590 <__aeabi_f2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9cd 2300 	strd	r2, r3, [sp]
 8001290:	4622      	mov	r2, r4
 8001292:	462b      	mov	r3, r5
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <fnSteup+0x54>)
 8001296:	f003 fe19 	bl	8004ecc <iprintf>
    }
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	20000200 	.word	0x20000200
 80012a4:	2000020c 	.word	0x2000020c
 80012a8:	08007208 	.word	0x08007208

080012ac <fnButtonEvent>:

void fnButtonEvent(void) {
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af02      	add	r7, sp, #8
    //Write Flash
    if(1) {
        save_to_flash((uint8_t*)PostAvgOffsetValue.Byte4float);
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <fnButtonEvent+0x3c>)
 80012b4:	f000 fb5a 	bl	800196c <save_to_flash>
        printf("Write:<%f:%f>, done!!\r\n", PostAvgOffsetValue.f4Byte[0], PostAvgOffsetValue.f4Byte[1]);
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <fnButtonEvent+0x3c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f967 	bl	8000590 <__aeabi_f2d>
 80012c2:	4604      	mov	r4, r0
 80012c4:	460d      	mov	r5, r1
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <fnButtonEvent+0x3c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f960 	bl	8000590 <__aeabi_f2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	e9cd 2300 	strd	r2, r3, [sp]
 80012d8:	4622      	mov	r2, r4
 80012da:	462b      	mov	r3, r5
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <fnButtonEvent+0x40>)
 80012de:	f003 fdf5 	bl	8004ecc <iprintf>
    }
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bdb0      	pop	{r4, r5, r7, pc}
 80012e8:	20000200 	.word	0x20000200
 80012ec:	08007220 	.word	0x08007220

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f000 fe2a 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f88a 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f000 f97c 	bl	80015f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001300:	f000 f94a 	bl	8001598 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001304:	f000 f8f2 	bl	80014ec <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001308:	f000 f8c3 	bl	8001492 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  fnSteup();
 800130c:	f7ff ffa2 	bl	8001254 <fnSteup>
  printf("Initial Done\r\n");
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <main+0x100>)
 8001312:	f003 fe75 	bl	8005000 <puts>
							  polling100ms  = 0;
		static unsigned short polling500ms  = 0,
				              polling1000ms = 0;

		//Polling per 1ms
		if( polling1ms != HAL_GetTick() ) {
 8001316:	f000 fe71 	bl	8001ffc <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <main+0x104>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d02a      	beq.n	800137a <main+0x8a>
			polling1ms++;
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <main+0x104>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <main+0x104>)
 800132c:	6013      	str	r3, [r2, #0]

			fnPollingTask1ms();
 800132e:	f7ff fde3 	bl	8000ef8 <fnPollingTask1ms>

			//Counting Polling Timer
			polling5ms++;
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <main+0x108>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <main+0x108>)
 800133c:	701a      	strb	r2, [r3, #0]
			polling10ms++;
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <main+0x10c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <main+0x10c>)
 8001348:	701a      	strb	r2, [r3, #0]
			polling50ms++;
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <main+0x110>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <main+0x110>)
 8001354:	701a      	strb	r2, [r3, #0]
			polling100ms++;
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <main+0x114>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <main+0x114>)
 8001360:	701a      	strb	r2, [r3, #0]
			polling500ms++;
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <main+0x118>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <main+0x118>)
 800136c:	801a      	strh	r2, [r3, #0]
			polling1000ms++;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <main+0x11c>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <main+0x11c>)
 8001378:	801a      	strh	r2, [r3, #0]
		}

		//Polling per 5ms
		if(polling5ms>=5) {
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <main+0x108>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d904      	bls.n	800138c <main+0x9c>
			polling5ms = 0;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <main+0x108>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]

			fnPollingTask5ms();
 8001388:	f7ff fdbc 	bl	8000f04 <fnPollingTask5ms>
		}

		//Polling per 10ms
		if(polling10ms>=10) {
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <main+0x10c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d904      	bls.n	800139e <main+0xae>
			polling10ms = 0;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <main+0x10c>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]

			fnPollingTask10ms();
 800139a:	f7ff ff17 	bl	80011cc <fnPollingTask10ms>
		}

		//Polling per 50ms
		if(polling50ms>=50) {
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <main+0x110>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b31      	cmp	r3, #49	; 0x31
 80013a4:	d904      	bls.n	80013b0 <main+0xc0>
			polling50ms = 0;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <main+0x110>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

			fnPollingTask50ms();
 80013ac:	f7ff ff14 	bl	80011d8 <fnPollingTask50ms>
		}

		//Polling per 100ms
		if(polling100ms>=100) {
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <main+0x114>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b63      	cmp	r3, #99	; 0x63
 80013b6:	d904      	bls.n	80013c2 <main+0xd2>
			polling100ms = 0;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <main+0x114>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]

			fnPollingTask100ms();
 80013be:	f7ff ff11 	bl	80011e4 <fnPollingTask100ms>
		}

		//Polling per 500ms
		if(polling500ms>=500) {
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <main+0x118>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ca:	d304      	bcc.n	80013d6 <main+0xe6>
			polling500ms = 0;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <main+0x118>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]

			fnPollingTask500ms();
 80013d2:	f7ff ff19 	bl	8001208 <fnPollingTask500ms>
		}

		//Polling per 1000ms
		if(polling1000ms>=1000) {
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <main+0x11c>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013de:	d304      	bcc.n	80013ea <main+0xfa>
			polling1000ms = 0;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <main+0x11c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]

			fnPollingTask1000ms();
 80013e6:	f7ff ff29 	bl	800123c <fnPollingTask1000ms>
		}

	}  //end of if(1) {  //Polling Task

	fnInfinitePolling();
 80013ea:	f7ff ff2d 	bl	8001248 <fnInfinitePolling>
	if(1) {  //Polling Task
 80013ee:	e792      	b.n	8001316 <main+0x26>
 80013f0:	08007238 	.word	0x08007238
 80013f4:	20000538 	.word	0x20000538
 80013f8:	2000053c 	.word	0x2000053c
 80013fc:	2000053d 	.word	0x2000053d
 8001400:	2000053e 	.word	0x2000053e
 8001404:	2000053f 	.word	0x2000053f
 8001408:	20000540 	.word	0x20000540
 800140c:	20000542 	.word	0x20000542

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2228      	movs	r2, #40	; 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f003 f8ec 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001436:	2301      	movs	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143a:	2310      	movs	r3, #16
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001442:	2300      	movs	r3, #0
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001446:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800144a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fca3 	bl	8002d9c <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800145c:	f000 fb80 	bl	8001b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f001 ff0e 	bl	800329c <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001486:	f000 fb6b 	bl	8001b60 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3740      	adds	r7, #64	; 0x40
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2001      	movs	r0, #1
 800149c:	f000 fe8f 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 fea8 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2004      	movs	r0, #4
 80014ac:	f000 fe87 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f000 fea0 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2026      	movs	r0, #38	; 0x26
 80014bc:	f000 fe7f 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c0:	2026      	movs	r0, #38	; 0x26
 80014c2:	f000 fe98 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2028      	movs	r0, #40	; 0x28
 80014cc:	f000 fe77 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d0:	2028      	movs	r0, #40	; 0x28
 80014d2:	f000 fe90 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2005      	movs	r0, #5
 80014dc:	f000 fe6f 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 fe88 	bl	80021f6 <HAL_NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_TIM2_Init+0xa8>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <MX_TIM2_Init+0xa8>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <MX_TIM2_Init+0xa8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <MX_TIM2_Init+0xa8>)
 800151e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_TIM2_Init+0xa8>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_TIM2_Init+0xa8>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <MX_TIM2_Init+0xa8>)
 8001532:	f002 f84d 	bl	80035d0 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800153c:	f000 fb10 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <MX_TIM2_Init+0xa8>)
 800155a:	f002 f8d3 	bl	8003704 <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 fafc 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <MX_TIM2_Init+0xa8>)
 8001576:	f002 fa81 	bl	8003a7c <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001580:	f000 faee 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <MX_TIM2_Init+0xa8>)
 8001586:	f002 f873 	bl	8003670 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000056c 	.word	0x2000056c

08001598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_USART2_UART_Init+0x54>)
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <MX_USART2_UART_Init+0x58>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015d0:	f002 fab2 	bl	8003b38 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 fac1 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Rx_Data, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	4904      	ldr	r1, [pc, #16]	; (80015f4 <MX_USART2_UART_Init+0x5c>)
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <MX_USART2_UART_Init+0x54>)
 80015e4:	f002 fb87 	bl	8003cf6 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200005b4 	.word	0x200005b4
 80015f0:	40004400 	.word	0x40004400
 80015f4:	200001fc 	.word	0x200001fc

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <MX_GPIO_Init+0xd4>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a2e      	ldr	r2, [pc, #184]	; (80016cc <MX_GPIO_Init+0xd4>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <MX_GPIO_Init+0xd4>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <MX_GPIO_Init+0xd4>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a28      	ldr	r2, [pc, #160]	; (80016cc <MX_GPIO_Init+0xd4>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <MX_GPIO_Init+0xd4>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <MX_GPIO_Init+0xd4>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <MX_GPIO_Init+0xd4>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <MX_GPIO_Init+0xd4>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2120      	movs	r1, #32
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <MX_GPIO_Init+0xd8>)
 800165a:	f001 fb3d 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800165e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_GPIO_Init+0xdc>)
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	4819      	ldr	r0, [pc, #100]	; (80016d8 <MX_GPIO_Init+0xe0>)
 8001674:	f001 f9ac 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001678:	2320      	movs	r3, #32
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	4810      	ldr	r0, [pc, #64]	; (80016d0 <MX_GPIO_Init+0xd8>)
 8001690:	f001 f99e 	bl	80029d0 <HAL_GPIO_Init>


  //Hal Modify
  if(1) {
	  /*Configure GPIO pin : D4 D5 Pin */
	  GPIO_InitStruct.Pin   = GPIO_PIN_4 | GPIO_PIN_5;
 8001694:	2330      	movs	r3, #48	; 0x30
 8001696:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <MX_GPIO_Init+0xe4>)
 80016ac:	f001 f990 	bl	80029d0 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2110      	movs	r1, #16
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <MX_GPIO_Init+0xe4>)
 80016b6:	f001 fb0f 	bl	8002cd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	4807      	ldr	r0, [pc, #28]	; (80016dc <MX_GPIO_Init+0xe4>)
 80016c0:	f001 fb0a 	bl	8002cd8 <HAL_GPIO_WritePin>
  }

}
 80016c4:	bf00      	nop
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	10110000 	.word	0x10110000
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40010c00 	.word	0x40010c00

080016e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFFFFFF);
 80016e8:	1d39      	adds	r1, r7, #4
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	2201      	movs	r2, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <__io_putchar+0x20>)
 80016f2:	f002 fa6e 	bl	8003bd2 <HAL_UART_Transmit>
  return ch;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200005b4 	.word	0x200005b4

08001704 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b091      	sub	sp, #68	; 0x44
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
   */

	#define GetData() Rx_Data[0]
    static char GetCMD[16] = {0},
    		    GetCNT = 0;
    switch(GetData()) {
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <HAL_UART_RxCpltCallback+0x144>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b0d      	cmp	r3, #13
 8001712:	bf8c      	ite	hi
 8001714:	2201      	movhi	r2, #1
 8001716:	2200      	movls	r2, #0
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	2a00      	cmp	r2, #0
 800171c:	d11a      	bne.n	8001754 <HAL_UART_RxCpltCallback+0x50>
 800171e:	2201      	movs	r2, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	f403 5312 	and.w	r3, r3, #9344	; 0x2480
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00e      	beq.n	8001754 <HAL_UART_RxCpltCallback+0x50>
		case '\r':
		case '\n':
		case '\a':
			GetCMD[(int)GetCNT] = 0;
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <HAL_UART_RxCpltCallback+0x148>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_UART_RxCpltCallback+0x14c>)
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]
			GetCNT = 0;
 8001742:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_UART_RxCpltCallback+0x148>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]

			GetUartCMD = 1;
 8001748:	4a42      	ldr	r2, [pc, #264]	; (8001854 <HAL_UART_RxCpltCallback+0x150>)
 800174a:	7813      	ldrb	r3, [r2, #0]
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	7013      	strb	r3, [r2, #0]
			break;
 8001752:	e00b      	b.n	800176c <HAL_UART_RxCpltCallback+0x68>

		default:
			GetCMD[(int)GetCNT++] = GetData();
 8001754:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_UART_RxCpltCallback+0x148>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	b2d1      	uxtb	r1, r2
 800175c:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_UART_RxCpltCallback+0x148>)
 800175e:	7011      	strb	r1, [r2, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_UART_RxCpltCallback+0x144>)
 8001764:	7819      	ldrb	r1, [r3, #0]
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_UART_RxCpltCallback+0x14c>)
 8001768:	5499      	strb	r1, [r3, r2]
			break;
 800176a:	bf00      	nop
    }

    if(GetUartCMD) {
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <HAL_UART_RxCpltCallback+0x150>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d05d      	beq.n	8001836 <HAL_UART_RxCpltCallback+0x132>
    	GetUartCMD = 0;
 800177a:	4a36      	ldr	r2, [pc, #216]	; (8001854 <HAL_UART_RxCpltCallback+0x150>)
 800177c:	7813      	ldrb	r3, [r2, #0]
 800177e:	f36f 0341 	bfc	r3, #1, #1
 8001782:	7013      	strb	r3, [r2, #0]

    	printf("GetCMD:%s\r\n", GetCMD);
 8001784:	4932      	ldr	r1, [pc, #200]	; (8001850 <HAL_UART_RxCpltCallback+0x14c>)
 8001786:	4834      	ldr	r0, [pc, #208]	; (8001858 <HAL_UART_RxCpltCallback+0x154>)
 8001788:	f003 fba0 	bl	8004ecc <iprintf>

    	if( strstr(GetCMD, "write") != NULL ) {
 800178c:	4933      	ldr	r1, [pc, #204]	; (800185c <HAL_UART_RxCpltCallback+0x158>)
 800178e:	4830      	ldr	r0, [pc, #192]	; (8001850 <HAL_UART_RxCpltCallback+0x14c>)
 8001790:	f003 fc46 	bl	8005020 <strstr>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d028      	beq.n	80017ec <HAL_UART_RxCpltCallback+0xe8>
    		printf("okok, get write\r\n");
 800179a:	4831      	ldr	r0, [pc, #196]	; (8001860 <HAL_UART_RxCpltCallback+0x15c>)
 800179c:	f003 fc30 	bl	8005000 <puts>

            //Read Write Flash
            if(1) {
                  char write_data[50] = {0};
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	222e      	movs	r2, #46	; 0x2e
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 ff25 	bl	80045fc <memset>
                  memset(write_data, 0, sizeof(write_data));
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2232      	movs	r2, #50	; 0x32
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 ff1e 	bl	80045fc <memset>
                  strcpy(write_data, "Hello World!!!");
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_UART_RxCpltCallback+0x160>)
 80017c6:	461c      	mov	r4, r3
 80017c8:	4613      	mov	r3, r2
 80017ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017cc:	c407      	stmia	r4!, {r0, r1, r2}
 80017ce:	8023      	strh	r3, [r4, #0]
 80017d0:	3402      	adds	r4, #2
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	7023      	strb	r3, [r4, #0]

                  save_to_flash((uint8_t*)write_data);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f8c6 	bl	800196c <save_to_flash>
                  printf("Write:<%s>, done!!\r\n", write_data);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4820      	ldr	r0, [pc, #128]	; (8001868 <HAL_UART_RxCpltCallback+0x164>)
 80017e8:	f003 fb70 	bl	8004ecc <iprintf>
            }
    	}

    	if( strstr(GetCMD, "read") != NULL ) {
 80017ec:	491f      	ldr	r1, [pc, #124]	; (800186c <HAL_UART_RxCpltCallback+0x168>)
 80017ee:	4818      	ldr	r0, [pc, #96]	; (8001850 <HAL_UART_RxCpltCallback+0x14c>)
 80017f0:	f003 fc16 	bl	8005020 <strstr>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01d      	beq.n	8001836 <HAL_UART_RxCpltCallback+0x132>
    		printf("okok, get read\r\n");
 80017fa:	481d      	ldr	r0, [pc, #116]	; (8001870 <HAL_UART_RxCpltCallback+0x16c>)
 80017fc:	f003 fc00 	bl	8005000 <puts>

            //Read Write Flash
            if(1) {
                  char read_data[50] = {0};
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	222e      	movs	r2, #46	; 0x2e
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fef5 	bl	80045fc <memset>
                  memset(read_data, 0, sizeof(read_data));
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2232      	movs	r2, #50	; 0x32
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f002 feee 	bl	80045fc <memset>

                  read_flash((uint8_t*)read_data);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f95d 	bl	8001ae4 <read_flash>
                  printf("Read:<%s>, done!!\r\n", read_data);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	4619      	mov	r1, r3
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <HAL_UART_RxCpltCallback+0x170>)
 8001832:	f003 fb4b 	bl	8004ecc <iprintf>
            }
    	}
    }

	if(0)printf("Rx_Data:%c:0x%02X\r\n", Rx_Data[0], Rx_Data[0]);
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Rx_Data, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	4903      	ldr	r1, [pc, #12]	; (8001848 <HAL_UART_RxCpltCallback+0x144>)
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <HAL_UART_RxCpltCallback+0x174>)
 800183c:	f002 fa5b 	bl	8003cf6 <HAL_UART_Receive_IT>
}
 8001840:	bf00      	nop
 8001842:	3744      	adds	r7, #68	; 0x44
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	200001fc 	.word	0x200001fc
 800184c:	20000544 	.word	0x20000544
 8001850:	20000548 	.word	0x20000548
 8001854:	20000208 	.word	0x20000208
 8001858:	08007248 	.word	0x08007248
 800185c:	08007254 	.word	0x08007254
 8001860:	0800725c 	.word	0x0800725c
 8001864:	08007270 	.word	0x08007270
 8001868:	08007280 	.word	0x08007280
 800186c:	08007298 	.word	0x08007298
 8001870:	080072a0 	.word	0x080072a0
 8001874:	080072b0 	.word	0x080072b0
 8001878:	200005b4 	.word	0x200005b4

0800187c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
	switch(GPIO_Pin) {
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188c:	d105      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x1e>
		case GPIO_PIN_13:
			BTN_Blue = 1;
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x28>)
 8001890:	7813      	ldrb	r3, [r2, #0]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	7013      	strb	r3, [r2, #0]
			break;
 8001898:	bf00      	nop
	}
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	20000208 	.word	0x20000208

080018a8 <ffnPostAvg_0d05>:

float ffnPostAvg_0d05(float u32Input) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	static float fsaveFreq = 0.0;
		   float fcurrFreq = 0.0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]

	const float postAVGweight = (0.05);
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <ffnPostAvg_0d05+0x5c>)
 80018b8:	60bb      	str	r3, [r7, #8]

	fcurrFreq = u32Input;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
	fsaveFreq = fsaveFreq*(1-postAVGweight) + fcurrFreq*(postAVGweight);
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80018c4:	f7ff f998 	bl	8000bf8 <__aeabi_fsub>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <ffnPostAvg_0d05+0x60>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f7fe fc44 	bl	8000160 <__aeabi_fmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	461c      	mov	r4, r3
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7fe fc3e 	bl	8000160 <__aeabi_fmul>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff f987 	bl	8000bfc <__addsf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <ffnPostAvg_0d05+0x60>)
 80018f4:	601a      	str	r2, [r3, #0]

	return fsaveFreq;
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <ffnPostAvg_0d05+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	3d4ccccd 	.word	0x3d4ccccd
 8001908:	20000558 	.word	0x20000558

0800190c <ffnPostAvg_0d25>:

float ffnPostAvg_0d25(float u32Input) {
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	static float fsaveFreq = 0.0;
		   float fcurrFreq = 0.0;
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]

	const float postAVGweight = (0.25);
 800191a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800191e:	60bb      	str	r3, [r7, #8]

	fcurrFreq = u32Input;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60fb      	str	r3, [r7, #12]
	fsaveFreq = fsaveFreq*(1-postAVGweight) + fcurrFreq*(postAVGweight);
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800192a:	f7ff f965 	bl	8000bf8 <__aeabi_fsub>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <ffnPostAvg_0d25+0x5c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f7fe fc11 	bl	8000160 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
 8001940:	461c      	mov	r4, r3
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7fe fc0b 	bl	8000160 <__aeabi_fmul>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff f954 	bl	8000bfc <__addsf3>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <ffnPostAvg_0d25+0x5c>)
 800195a:	601a      	str	r2, [r3, #0]

	return fsaveFreq;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <ffnPostAvg_0d25+0x5c>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	2000055c 	.word	0x2000055c

0800196c <save_to_flash>:

#if(1)  //For Read Write Flash
	#define FLASH_STORAGE  0x08015000  //0x0800 0000 + 2048*42
	#define page_size      0x800       //2048

	void save_to_flash(uint8_t *data) {
 800196c:	b5b0      	push	{r4, r5, r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	466b      	mov	r3, sp
 8001976:	461d      	mov	r5, r3
		volatile uint32_t data_to_FLASH[(strlen((char*)data)/4) + (int)((strlen((char*)data) % 4) != 0)];
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7fe fbe9 	bl	8000150 <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	089c      	lsrs	r4, r3, #2
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fbe4 	bl	8000150 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf14      	ite	ne
 8001992:	2301      	movne	r3, #1
 8001994:	2300      	moveq	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	441c      	add	r4, r3
 800199a:	4623      	mov	r3, r4
 800199c:	3b01      	subs	r3, #1
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
 80019a0:	4620      	mov	r0, r4
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	014b      	lsls	r3, r1, #5
 80019b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b4:	0142      	lsls	r2, r0, #5
 80019b6:	4620      	mov	r0, r4
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	014b      	lsls	r3, r1, #5
 80019c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ca:	0142      	lsls	r2, r0, #5
 80019cc:	00a3      	lsls	r3, r4, #2
 80019ce:	3307      	adds	r3, #7
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	ebad 0d03 	sub.w	sp, sp, r3
 80019d8:	466b      	mov	r3, sp
 80019da:	3303      	adds	r3, #3
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
		memset( (uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH) );
 80019e2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fbb2 	bl	8000150 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	4620      	mov	r0, r4
 80019f4:	f002 fe02 	bl	80045fc <memset>
		strcpy(    (char*)data_to_FLASH, (char*)data );
 80019f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fb07 	bl	8005010 <strcpy>

		volatile uint32_t data_length =       (strlen((char*)data_to_FLASH) / 4)
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fba3 	bl	8000150 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	089c      	lsrs	r4, r3, #2
									  + (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fb9d 	bl	8000150 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4423      	add	r3, r4
		volatile uint32_t data_length =       (strlen((char*)data_to_FLASH) / 4)
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c

		volatile uint16_t pages =       (strlen((char*)data)/page_size)
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fb90 	bl	8000150 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	0adb      	lsrs	r3, r3, #11
								+ (int)((strlen((char*)data)%page_size) != 0);
 8001a34:	b29c      	uxth	r4, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fb8a 	bl	8000150 <strlen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf14      	ite	ne
 8001a46:	2301      	movne	r3, #1
 8001a48:	2300      	moveq	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4423      	add	r3, r4
 8001a50:	b29b      	uxth	r3, r3
		volatile uint16_t pages =       (strlen((char*)data)/page_size)
 8001a52:	857b      	strh	r3, [r7, #42]	; 0x2a

		/* Unlock the Flash to enable the flash control register access *************/
		HAL_FLASH_Unlock();
 8001a54:	f000 fe00 	bl	8002658 <HAL_FLASH_Unlock>

		/* Allow Access to option bytes sector */
		HAL_FLASH_OB_Unlock();
 8001a58:	f000 fe34 	bl	80026c4 <HAL_FLASH_OB_Unlock>

		/* Fill EraseInit structure*/
		FLASH_EraseInitTypeDef EraseInitStruct;
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.PageAddress = FLASH_STORAGE;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <save_to_flash+0x174>)
 8001a62:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = pages;
 8001a64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t PageError;

		volatile uint32_t write_cnt = 0, index = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]

		volatile HAL_StatusTypeDef status;
								   status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001a72:	f107 0214 	add.w	r2, r7, #20
 8001a76:	f107 0318 	add.w	r3, r7, #24
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 feff 	bl	8002880 <HAL_FLASHEx_Erase>
 8001a82:	4603      	mov	r3, r0
 8001a84:	72fb      	strb	r3, [r7, #11]
		while(index < data_length) {
 8001a86:	e01e      	b.n	8001ac6 <save_to_flash+0x15a>
			if (status == HAL_OK) {
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d11a      	bne.n	8001ac6 <save_to_flash+0x15a>
				status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001a96:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f000 fc6f 	bl	800238c <HAL_FLASH_Program>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	72fb      	strb	r3, [r7, #11]
				if(status == HAL_OK) {
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <save_to_flash+0x15a>
					write_cnt += 4;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3304      	adds	r3, #4
 8001abe:	613b      	str	r3, [r7, #16]
					index++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
		while(index < data_length) {
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d3dc      	bcc.n	8001a88 <save_to_flash+0x11c>
				}
			}
		}

		HAL_FLASH_OB_Lock();
 8001ace:	f000 fe15 	bl	80026fc <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8001ad2:	f000 fde7 	bl	80026a4 <HAL_FLASH_Lock>
 8001ad6:	46ad      	mov	sp, r5
	}
 8001ad8:	bf00      	nop
 8001ada:	3738      	adds	r7, #56	; 0x38
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae0:	08015000 	.word	0x08015000

08001ae4 <read_flash>:

	void read_flash(uint8_t* data) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
		volatile uint32_t read_data = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
		volatile uint32_t read_cnt  = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]

		do {
			read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001afa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]

			if(read_data != 0xFFFFFFFF) {
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d020      	beq.n	8001b4c <read_flash+0x68>
				data[read_cnt + 0] = (uint8_t)(read_data >> 0);
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	b2ca      	uxtb	r2, r1
 8001b14:	701a      	strb	r2, [r3, #0]
				data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	0a19      	lsrs	r1, r3, #8
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
				data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0c19      	lsrs	r1, r3, #16
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
				data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	0e19      	lsrs	r1, r3, #24
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	b2ca      	uxtb	r2, r1
 8001b44:	701a      	strb	r2, [r3, #0]

				read_cnt += 4;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
			}
		} while(read_data != 0xFFFFFFFF);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b52:	d1cf      	bne.n	8001af4 <read_flash+0x10>
	}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <Error_Handler+0x8>
	...

08001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6193      	str	r3, [r2, #24]
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_MspInit+0x5c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* Peripheral interrupt init */

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_MspInit+0x60>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_MspInit+0x60>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bee:	d123      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_TIM_Base_MspInit+0x70>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_TIM_Base_MspInit+0x70>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	61d3      	str	r3, [r2, #28]
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_TIM_Base_MspInit+0x70>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_TIM_Base_MspInit+0x70>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_TIM_Base_MspInit+0x70>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_TIM_Base_MspInit+0x70>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c20:	2301      	movs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4619      	mov	r1, r3
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <HAL_TIM_Base_MspInit+0x74>)
 8001c34:	f000 fecc 	bl	80029d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010800 	.word	0x40010800

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d12f      	bne.n	8001cc8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c72:	61d3      	str	r3, [r2, #28]
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001cac:	f000 fe90 	bl	80029d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_UART_MspInit+0x90>)
 8001cc4:	f000 fe84 	bl	80029d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40004400 	.word	0x40004400
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010800 	.word	0x40010800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d22:	f000 f959 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001d2e:	f001 f81d 	bl	8002d6c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001d3a:	f000 fb97 	bl	800246c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <USART2_IRQHandler+0x10>)
 8001d56:	f001 ffff 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200005b4 	.word	0x200005b4

08001d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d6c:	f000 ffe6 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <_kill>:

int _kill(int pid, int sig)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d8c:	f002 fc0c 	bl	80045a8 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2216      	movs	r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
	return -1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_exit>:

void _exit (int status)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001daa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffe7 	bl	8001d82 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001db4:	e7fe      	b.n	8001db4 <_exit+0x12>

08001db6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e00a      	b.n	8001dde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dc8:	f3af 8000 	nop.w
 8001dcc:	4601      	mov	r1, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbf0      	blt.n	8001dc8 <_read+0x12>
	}

return len;
 8001de6:	687b      	ldr	r3, [r7, #4]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e009      	b.n	8001e16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	60ba      	str	r2, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fc68 	bl	80016e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbf1      	blt.n	8001e02 <_write+0x12>
	}
	return len;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_close>:

int _close(int file)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <_isatty>:

int _isatty(int file)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f002 fb76 	bl	80045a8 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20005000 	.word	0x20005000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000560 	.word	0x20000560
 8001ef0:	20000630 	.word	0x20000630

08001ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f26:	f7ff ffe5 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f002 fb43 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff f9df 	bl	80012f0 <main>
  bx lr
 8001f32:	4770      	bx	lr
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f3c:	080076dc 	.word	0x080076dc
  ldr r2, =_sbss
 8001f40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f44:	20000630 	.word	0x20000630

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_Init+0x28>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_Init+0x28>)
 8001f56:	f043 0310 	orr.w	r3, r3, #16
 8001f5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 f923 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fe00 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f93b 	bl	8002212 <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 f903 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_IncTick+0x1c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	200005f8 	.word	0x200005f8

08001ffc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_GetTick+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	200005f8 	.word	0x200005f8

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4906      	ldr	r1, [pc, #24]	; (80020a8 <__NVIC_EnableIRQ+0x34>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff90 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff2d 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff42 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff90 	bl	8002100 <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5f 	bl	80020ac <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff35 	bl	8002074 <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800223c:	2b02      	cmp	r3, #2
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e020      	b.n	8002294 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020e 	bic.w	r2, r2, #14
 8002260:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f202 	lsl.w	r2, r1, r2
 8002280:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d005      	beq.n	80022c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e051      	b.n	8002366 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020e 	bic.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_DMA_Abort_IT+0xd0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d029      	beq.n	8002340 <HAL_DMA_Abort_IT+0xa0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a20      	ldr	r2, [pc, #128]	; (8002374 <HAL_DMA_Abort_IT+0xd4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d022      	beq.n	800233c <HAL_DMA_Abort_IT+0x9c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_DMA_Abort_IT+0xd8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d01a      	beq.n	8002336 <HAL_DMA_Abort_IT+0x96>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_DMA_Abort_IT+0xdc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d012      	beq.n	8002330 <HAL_DMA_Abort_IT+0x90>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_DMA_Abort_IT+0xe0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00a      	beq.n	800232a <HAL_DMA_Abort_IT+0x8a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1a      	ldr	r2, [pc, #104]	; (8002384 <HAL_DMA_Abort_IT+0xe4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d102      	bne.n	8002324 <HAL_DMA_Abort_IT+0x84>
 800231e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002322:	e00e      	b.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 8002324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002328:	e00b      	b.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 800232a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232e:	e008      	b.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 8002330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002334:	e005      	b.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 8002336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233a:	e002      	b.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 800233c:	2310      	movs	r3, #16
 800233e:	e000      	b.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 8002340:	2301      	movs	r3, #1
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <HAL_DMA_Abort_IT+0xe8>)
 8002344:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
    } 
  }
  return status;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40020008 	.word	0x40020008
 8002374:	4002001c 	.word	0x4002001c
 8002378:	40020030 	.word	0x40020030
 800237c:	40020044 	.word	0x40020044
 8002380:	40020058 	.word	0x40020058
 8002384:	4002006c 	.word	0x4002006c
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_FLASH_Program+0xd8>)
 80023a8:	7e1b      	ldrb	r3, [r3, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_FLASH_Program+0x26>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e054      	b.n	800245c <HAL_FLASH_Program+0xd0>
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_FLASH_Program+0xd8>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023bc:	f000 f9ca 	bl	8002754 <FLASH_WaitForLastOperation>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d144      	bne.n	8002454 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d102      	bne.n	80023d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80023d0:	2301      	movs	r3, #1
 80023d2:	757b      	strb	r3, [r7, #21]
 80023d4:	e007      	b.n	80023e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d102      	bne.n	80023e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80023dc:	2302      	movs	r3, #2
 80023de:	757b      	strb	r3, [r7, #21]
 80023e0:	e001      	b.n	80023e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80023e2:	2304      	movs	r3, #4
 80023e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	75bb      	strb	r3, [r7, #22]
 80023ea:	e02d      	b.n	8002448 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023ec:	7dbb      	ldrb	r3, [r7, #22]
 80023ee:	005a      	lsls	r2, r3, #1
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	eb02 0c03 	add.w	ip, r2, r3
 80023f6:	7dbb      	ldrb	r3, [r7, #22]
 80023f8:	0119      	lsls	r1, r3, #4
 80023fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023fe:	f1c1 0620 	rsb	r6, r1, #32
 8002402:	f1a1 0020 	sub.w	r0, r1, #32
 8002406:	fa22 f401 	lsr.w	r4, r2, r1
 800240a:	fa03 f606 	lsl.w	r6, r3, r6
 800240e:	4334      	orrs	r4, r6
 8002410:	fa23 f000 	lsr.w	r0, r3, r0
 8002414:	4304      	orrs	r4, r0
 8002416:	fa23 f501 	lsr.w	r5, r3, r1
 800241a:	b2a3      	uxth	r3, r4
 800241c:	4619      	mov	r1, r3
 800241e:	4660      	mov	r0, ip
 8002420:	f000 f97c 	bl	800271c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002428:	f000 f994 	bl	8002754 <FLASH_WaitForLastOperation>
 800242c:	4603      	mov	r3, r0
 800242e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_FLASH_Program+0xdc>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_FLASH_Program+0xdc>)
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002442:	7dbb      	ldrb	r3, [r7, #22]
 8002444:	3301      	adds	r3, #1
 8002446:	75bb      	strb	r3, [r7, #22]
 8002448:	7dba      	ldrb	r2, [r7, #22]
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	429a      	cmp	r2, r3
 800244e:	d3cd      	bcc.n	80023ec <HAL_FLASH_Program+0x60>
 8002450:	e000      	b.n	8002454 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002452:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_FLASH_Program+0xd8>)
 8002456:	2200      	movs	r2, #0
 8002458:	761a      	strb	r2, [r3, #24]

  return status;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002464:	20000600 	.word	0x20000600
 8002468:	40022000 	.word	0x40022000

0800246c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002476:	4b6d      	ldr	r3, [pc, #436]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_FLASH_IRQHandler+0x22>
 8002482:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800248e:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002494:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002496:	f04f 32ff 	mov.w	r2, #4294967295
 800249a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800249c:	f000 f9a0 	bl	80027e0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8d0 	bl	8002646 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80024a6:	4b62      	ldr	r3, [pc, #392]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80024ac:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a0 	beq.w	80025fa <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 80024bc:	2220      	movs	r2, #32
 80024be:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80024c0:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8097 	beq.w	80025fa <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80024cc:	4b58      	ldr	r3, [pc, #352]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d12d      	bne.n	8002532 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	4a54      	ldr	r2, [pc, #336]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024de:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d017      	beq.n	8002518 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80024e8:	4b51      	ldr	r3, [pc, #324]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f8a0 	bl	8002634 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80024f4:	4b4e      	ldr	r3, [pc, #312]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fc:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80024fe:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002504:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 800250a:	f023 0302 	bic.w	r3, r3, #2
 800250e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa3d 	bl	8002990 <FLASH_PageErase>
 8002516:	e070      	b.n	80025fa <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4a44      	ldr	r2, [pc, #272]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f882 	bl	8002634 <HAL_FLASH_EndOfOperationCallback>
 8002530:	e063      	b.n	80025fa <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d10c      	bne.n	8002556 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4a3a      	ldr	r2, [pc, #232]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002542:	f023 0304 	bic.w	r3, r3, #4
 8002546:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f873 	bl	8002634 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e051      	b.n	80025fa <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 800255e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d024      	beq.n	80025b2 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	3302      	adds	r3, #2
 800256e:	4a30      	ldr	r2, [pc, #192]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002570:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 800257a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	0c02      	lsrs	r2, r0, #16
 8002588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800258c:	0c0b      	lsrs	r3, r1, #16
 800258e:	4928      	ldr	r1, [pc, #160]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 8002590:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025a6:	b293      	uxth	r3, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8b6 	bl	800271c <FLASH_Program_HalfWord>
 80025b0:	e023      	b.n	80025fa <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d105      	bne.n	80025c8 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f837 	bl	8002634 <HAL_FLASH_EndOfOperationCallback>
 80025c6:	e011      	b.n	80025ec <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d106      	bne.n	80025e0 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	3b02      	subs	r3, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f82b 	bl	8002634 <HAL_FLASH_EndOfOperationCallback>
 80025de:	e005      	b.n	80025ec <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	3b06      	subs	r3, #6
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f824 	bl	8002634 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025ee:	f04f 32ff 	mov.w	r2, #4294967295
 80025f2:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10e      	bne.n	8002622 <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 800260a:	f023 0307 	bic.w	r3, r3, #7
 800260e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a05      	ldr	r2, [pc, #20]	; (800262c <HAL_FLASH_IRQHandler+0x1c0>)
 8002616:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 800261a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <HAL_FLASH_IRQHandler+0x1c4>)
 800261e:	2200      	movs	r2, #0
 8002620:	761a      	strb	r2, [r3, #24]
  }
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	20000600 	.word	0x20000600

08002634 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_FLASH_Unlock+0x40>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_FLASH_Unlock+0x40>)
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_FLASH_Unlock+0x44>)
 8002672:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_FLASH_Unlock+0x40>)
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_FLASH_Unlock+0x48>)
 8002678:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_FLASH_Unlock+0x40>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800268a:	79fb      	ldrb	r3, [r7, #7]
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40022000 	.word	0x40022000
 800269c:	45670123 	.word	0x45670123
 80026a0:	cdef89ab 	.word	0xcdef89ab

080026a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_FLASH_Lock+0x1c>)
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_FLASH_Lock+0x1c>)
 80026ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40022000 	.word	0x40022000

080026c4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_FLASH_OB_Unlock+0x2c>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_FLASH_OB_Unlock+0x2c>)
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_FLASH_OB_Unlock+0x30>)
 80026d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_FLASH_OB_Unlock+0x2c>)
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_FLASH_OB_Unlock+0x34>)
 80026de:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000
 80026f4:	45670123 	.word	0x45670123
 80026f8:	cdef89ab 	.word	0xcdef89ab

080026fc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_FLASH_OB_Lock+0x1c>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_FLASH_OB_Lock+0x1c>)
 8002706:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800270a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000

0800271c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <FLASH_Program_HalfWord+0x30>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <FLASH_Program_HalfWord+0x34>)
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <FLASH_Program_HalfWord+0x34>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	801a      	strh	r2, [r3, #0]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000600 	.word	0x20000600
 8002750:	40022000 	.word	0x40022000

08002754 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff fc4e 	bl	8001ffc <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002762:	e010      	b.n	8002786 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d00c      	beq.n	8002786 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <FLASH_WaitForLastOperation+0x2e>
 8002772:	f7ff fc43 	bl	8001ffc <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d201      	bcs.n	8002786 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e025      	b.n	80027d2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <FLASH_WaitForLastOperation+0x88>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e8      	bne.n	8002764 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <FLASH_WaitForLastOperation+0x88>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <FLASH_WaitForLastOperation+0x88>)
 80027a0:	2220      	movs	r2, #32
 80027a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <FLASH_WaitForLastOperation+0x88>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <FLASH_WaitForLastOperation+0x88>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <FLASH_WaitForLastOperation+0x88>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027c8:	f000 f80a 	bl	80027e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000

080027e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <FLASH_SetErrorCode+0x98>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <FLASH_SetErrorCode+0x9c>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	4a1f      	ldr	r2, [pc, #124]	; (800287c <FLASH_SetErrorCode+0x9c>)
 8002800:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <FLASH_SetErrorCode+0x98>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <FLASH_SetErrorCode+0x9c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <FLASH_SetErrorCode+0x9c>)
 8002820:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <FLASH_SetErrorCode+0x98>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <FLASH_SetErrorCode+0x9c>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <FLASH_SetErrorCode+0x9c>)
 8002840:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <FLASH_SetErrorCode+0x98>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <FLASH_SetErrorCode+0x98>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f240 1201 	movw	r2, #257	; 0x101
 8002854:	4293      	cmp	r3, r2
 8002856:	d106      	bne.n	8002866 <FLASH_SetErrorCode+0x86>
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <FLASH_SetErrorCode+0x98>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <FLASH_SetErrorCode+0x98>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	61d3      	str	r3, [r2, #28]
}  
 8002864:	e002      	b.n	800286c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <FLASH_SetErrorCode+0x98>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60d3      	str	r3, [r2, #12]
}  
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000
 800287c:	20000600 	.word	0x20000600

08002880 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_FLASHEx_Erase+0xd0>)
 8002894:	7e1b      	ldrb	r3, [r3, #24]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_FLASHEx_Erase+0x1e>
 800289a:	2302      	movs	r3, #2
 800289c:	e053      	b.n	8002946 <HAL_FLASHEx_Erase+0xc6>
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_FLASHEx_Erase+0xd0>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d116      	bne.n	80028da <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028b0:	f7ff ff50 	bl	8002754 <FLASH_WaitForLastOperation>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d141      	bne.n	800293e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f000 f84c 	bl	8002958 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028c4:	f7ff ff46 	bl	8002754 <FLASH_WaitForLastOperation>
 80028c8:	4603      	mov	r3, r0
 80028ca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_FLASHEx_Erase+0xd4>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_FLASHEx_Erase+0xd4>)
 80028d2:	f023 0304 	bic.w	r3, r3, #4
 80028d6:	6113      	str	r3, [r2, #16]
 80028d8:	e031      	b.n	800293e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028de:	f7ff ff39 	bl	8002754 <FLASH_WaitForLastOperation>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d12a      	bne.n	800293e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f04f 32ff 	mov.w	r2, #4294967295
 80028ee:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	e019      	b.n	800292c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80028f8:	68b8      	ldr	r0, [r7, #8]
 80028fa:	f000 f849 	bl	8002990 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002902:	f7ff ff27 	bl	8002754 <FLASH_WaitForLastOperation>
 8002906:	4603      	mov	r3, r0
 8002908:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_FLASHEx_Erase+0xd4>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_FLASHEx_Erase+0xd4>)
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	601a      	str	r2, [r3, #0]
            break;
 8002922:	e00c      	b.n	800293e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	029a      	lsls	r2, r3, #10
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d3dc      	bcc.n	80028f8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_FLASHEx_Erase+0xd0>)
 8002940:	2200      	movs	r2, #0
 8002942:	761a      	strb	r2, [r3, #24]

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000600 	.word	0x20000600
 8002954:	40022000 	.word	0x40022000

08002958 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <FLASH_MassErase+0x30>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <FLASH_MassErase+0x34>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <FLASH_MassErase+0x34>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <FLASH_MassErase+0x34>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <FLASH_MassErase+0x34>)
 8002978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000600 	.word	0x20000600
 800298c:	40022000 	.word	0x40022000

08002990 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <FLASH_PageErase+0x38>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <FLASH_PageErase+0x3c>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <FLASH_PageErase+0x3c>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <FLASH_PageErase+0x3c>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <FLASH_PageErase+0x3c>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <FLASH_PageErase+0x3c>)
 80029b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000600 	.word	0x20000600
 80029cc:	40022000 	.word	0x40022000

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e2:	e169      	b.n	8002cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e4:	2201      	movs	r2, #1
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 8158 	bne.w	8002cb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a9a      	ldr	r2, [pc, #616]	; (8002c70 <HAL_GPIO_Init+0x2a0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d05e      	beq.n	8002aca <HAL_GPIO_Init+0xfa>
 8002a0c:	4a98      	ldr	r2, [pc, #608]	; (8002c70 <HAL_GPIO_Init+0x2a0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d875      	bhi.n	8002afe <HAL_GPIO_Init+0x12e>
 8002a12:	4a98      	ldr	r2, [pc, #608]	; (8002c74 <HAL_GPIO_Init+0x2a4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d058      	beq.n	8002aca <HAL_GPIO_Init+0xfa>
 8002a18:	4a96      	ldr	r2, [pc, #600]	; (8002c74 <HAL_GPIO_Init+0x2a4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d86f      	bhi.n	8002afe <HAL_GPIO_Init+0x12e>
 8002a1e:	4a96      	ldr	r2, [pc, #600]	; (8002c78 <HAL_GPIO_Init+0x2a8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d052      	beq.n	8002aca <HAL_GPIO_Init+0xfa>
 8002a24:	4a94      	ldr	r2, [pc, #592]	; (8002c78 <HAL_GPIO_Init+0x2a8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d869      	bhi.n	8002afe <HAL_GPIO_Init+0x12e>
 8002a2a:	4a94      	ldr	r2, [pc, #592]	; (8002c7c <HAL_GPIO_Init+0x2ac>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04c      	beq.n	8002aca <HAL_GPIO_Init+0xfa>
 8002a30:	4a92      	ldr	r2, [pc, #584]	; (8002c7c <HAL_GPIO_Init+0x2ac>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d863      	bhi.n	8002afe <HAL_GPIO_Init+0x12e>
 8002a36:	4a92      	ldr	r2, [pc, #584]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d046      	beq.n	8002aca <HAL_GPIO_Init+0xfa>
 8002a3c:	4a90      	ldr	r2, [pc, #576]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d85d      	bhi.n	8002afe <HAL_GPIO_Init+0x12e>
 8002a42:	2b12      	cmp	r3, #18
 8002a44:	d82a      	bhi.n	8002a9c <HAL_GPIO_Init+0xcc>
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d859      	bhi.n	8002afe <HAL_GPIO_Init+0x12e>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <HAL_GPIO_Init+0x80>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002acb 	.word	0x08002acb
 8002a54:	08002aa5 	.word	0x08002aa5
 8002a58:	08002ab7 	.word	0x08002ab7
 8002a5c:	08002af9 	.word	0x08002af9
 8002a60:	08002aff 	.word	0x08002aff
 8002a64:	08002aff 	.word	0x08002aff
 8002a68:	08002aff 	.word	0x08002aff
 8002a6c:	08002aff 	.word	0x08002aff
 8002a70:	08002aff 	.word	0x08002aff
 8002a74:	08002aff 	.word	0x08002aff
 8002a78:	08002aff 	.word	0x08002aff
 8002a7c:	08002aff 	.word	0x08002aff
 8002a80:	08002aff 	.word	0x08002aff
 8002a84:	08002aff 	.word	0x08002aff
 8002a88:	08002aff 	.word	0x08002aff
 8002a8c:	08002aff 	.word	0x08002aff
 8002a90:	08002aff 	.word	0x08002aff
 8002a94:	08002aad 	.word	0x08002aad
 8002a98:	08002ac1 	.word	0x08002ac1
 8002a9c:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <HAL_GPIO_Init+0x2b4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aa2:	e02c      	b.n	8002afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	623b      	str	r3, [r7, #32]
          break;
 8002aaa:	e029      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	623b      	str	r3, [r7, #32]
          break;
 8002ab4:	e024      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	3308      	adds	r3, #8
 8002abc:	623b      	str	r3, [r7, #32]
          break;
 8002abe:	e01f      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	623b      	str	r3, [r7, #32]
          break;
 8002ac8:	e01a      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	623b      	str	r3, [r7, #32]
          break;
 8002ad6:	e013      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	611a      	str	r2, [r3, #16]
          break;
 8002aea:	e009      	b.n	8002b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aec:	2308      	movs	r3, #8
 8002aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	615a      	str	r2, [r3, #20]
          break;
 8002af6:	e003      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002af8:	2300      	movs	r3, #0
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x130>
          break;
 8002afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2bff      	cmp	r3, #255	; 0xff
 8002b04:	d801      	bhi.n	8002b0a <HAL_GPIO_Init+0x13a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	e001      	b.n	8002b0e <HAL_GPIO_Init+0x13e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2bff      	cmp	r3, #255	; 0xff
 8002b14:	d802      	bhi.n	8002b1c <HAL_GPIO_Init+0x14c>
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	e002      	b.n	8002b22 <HAL_GPIO_Init+0x152>
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	3b08      	subs	r3, #8
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	210f      	movs	r1, #15
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	401a      	ands	r2, r3
 8002b34:	6a39      	ldr	r1, [r7, #32]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80b1 	beq.w	8002cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b50:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <HAL_GPIO_Init+0x2b8>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x2b8>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_GPIO_Init+0x2b8>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b68:	4a48      	ldr	r2, [pc, #288]	; (8002c8c <HAL_GPIO_Init+0x2bc>)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a40      	ldr	r2, [pc, #256]	; (8002c90 <HAL_GPIO_Init+0x2c0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <HAL_GPIO_Init+0x1ec>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <HAL_GPIO_Init+0x2c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00d      	beq.n	8002bb8 <HAL_GPIO_Init+0x1e8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3e      	ldr	r2, [pc, #248]	; (8002c98 <HAL_GPIO_Init+0x2c8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <HAL_GPIO_Init+0x1e4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <HAL_GPIO_Init+0x2cc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <HAL_GPIO_Init+0x1e0>
 8002bac:	2303      	movs	r3, #3
 8002bae:	e006      	b.n	8002bbe <HAL_GPIO_Init+0x1ee>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e004      	b.n	8002bbe <HAL_GPIO_Init+0x1ee>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e002      	b.n	8002bbe <HAL_GPIO_Init+0x1ee>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_GPIO_Init+0x1ee>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	f002 0203 	and.w	r2, r2, #3
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	4093      	lsls	r3, r2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bce:	492f      	ldr	r1, [pc, #188]	; (8002c8c <HAL_GPIO_Init+0x2bc>)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	492c      	ldr	r1, [pc, #176]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4928      	ldr	r1, [pc, #160]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	491e      	ldr	r1, [pc, #120]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4918      	ldr	r1, [pc, #96]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	4914      	ldr	r1, [pc, #80]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d021      	beq.n	8002ca4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	490e      	ldr	r1, [pc, #56]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
 8002c6c:	e021      	b.n	8002cb2 <HAL_GPIO_Init+0x2e2>
 8002c6e:	bf00      	nop
 8002c70:	10320000 	.word	0x10320000
 8002c74:	10310000 	.word	0x10310000
 8002c78:	10220000 	.word	0x10220000
 8002c7c:	10210000 	.word	0x10210000
 8002c80:	10120000 	.word	0x10120000
 8002c84:	10110000 	.word	0x10110000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40010000 	.word	0x40010000
 8002c90:	40010800 	.word	0x40010800
 8002c94:	40010c00 	.word	0x40010c00
 8002c98:	40011000 	.word	0x40011000
 8002c9c:	40011400 	.word	0x40011400
 8002ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_GPIO_Init+0x304>)
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <HAL_GPIO_Init+0x304>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f47f ae8e 	bne.w	80029e4 <HAL_GPIO_Init+0x14>
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	372c      	adds	r7, #44	; 0x2c
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40010400 	.word	0x40010400

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	611a      	str	r2, [r3, #16]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43d9      	mvns	r1, r3
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	400b      	ands	r3, r1
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	611a      	str	r2, [r3, #16]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fd8e 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40010400 	.word	0x40010400

08002d6c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_PWR_PVD_IRQHandler+0x20>)
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002d7c:	f000 f808 	bl	8002d90 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_PWR_PVD_IRQHandler+0x20>)
 8002d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d86:	615a      	str	r2, [r3, #20]
  }
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e26c      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8087 	beq.w	8002eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dbc:	4b92      	ldr	r3, [pc, #584]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dc8:	4b8f      	ldr	r3, [pc, #572]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d112      	bne.n	8002dfa <HAL_RCC_OscConfig+0x5e>
 8002dd4:	4b8c      	ldr	r3, [pc, #560]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de2:	4b89      	ldr	r3, [pc, #548]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d06c      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x12c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d168      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e246      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x76>
 8002e04:	4b80      	ldr	r3, [pc, #512]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a7f      	ldr	r2, [pc, #508]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	e02e      	b.n	8002e70 <HAL_RCC_OscConfig+0xd4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x98>
 8002e1a:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7a      	ldr	r2, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b78      	ldr	r3, [pc, #480]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a77      	ldr	r2, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e01d      	b.n	8002e70 <HAL_RCC_OscConfig+0xd4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0xbc>
 8002e3e:	4b72      	ldr	r3, [pc, #456]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a71      	ldr	r2, [pc, #452]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b6f      	ldr	r3, [pc, #444]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6e      	ldr	r2, [pc, #440]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0xd4>
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b68      	ldr	r3, [pc, #416]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a67      	ldr	r2, [pc, #412]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7ff f8c0 	bl	8001ffc <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7ff f8bc 	bl	8001ffc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1fa      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0xe4>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7ff f8ac 	bl	8001ffc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7ff f8a8 	bl	8001ffc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1e6      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eba:	4b53      	ldr	r3, [pc, #332]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x10c>
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d063      	beq.n	8002f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed6:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ee2:	4b49      	ldr	r3, [pc, #292]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d11c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x18c>
 8002eee:	4b46      	ldr	r3, [pc, #280]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_RCC_OscConfig+0x176>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e1ba      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f12:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4939      	ldr	r1, [pc, #228]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	e03a      	b.n	8002f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d020      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7ff f861 	bl	8001ffc <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7ff f85d 	bl	8001ffc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e19b      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4927      	ldr	r1, [pc, #156]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff f840 	bl	8001ffc <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f80:	f7ff f83c 	bl	8001ffc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e17a      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03a      	beq.n	8003020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d019      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7ff f820 	bl	8001ffc <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7ff f81c 	bl	8001ffc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e15a      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f000 fad8 	bl	8003594 <RCC_Delay>
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7ff f806 	bl	8001ffc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff2:	e00f      	b.n	8003014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7ff f802 	bl	8001ffc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d908      	bls.n	8003014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e140      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	42420000 	.word	0x42420000
 8003010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	4b9e      	ldr	r3, [pc, #632]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e9      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a6 	beq.w	800317a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003032:	4b97      	ldr	r3, [pc, #604]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10d      	bne.n	800305a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	4b94      	ldr	r3, [pc, #592]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	4a93      	ldr	r2, [pc, #588]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	61d3      	str	r3, [r2, #28]
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305a:	4b8e      	ldr	r3, [pc, #568]	; (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d118      	bne.n	8003098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x4f8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a8a      	ldr	r2, [pc, #552]	; (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003072:	f7fe ffc3 	bl	8001ffc <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307a:	f7fe ffbf 	bl	8001ffc <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b64      	cmp	r3, #100	; 0x64
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0fd      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x4f8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x312>
 80030a0:	4b7b      	ldr	r3, [pc, #492]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4a7a      	ldr	r2, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6213      	str	r3, [r2, #32]
 80030ac:	e02d      	b.n	800310a <HAL_RCC_OscConfig+0x36e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x334>
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6213      	str	r3, [r2, #32]
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4a72      	ldr	r2, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	f023 0304 	bic.w	r3, r3, #4
 80030cc:	6213      	str	r3, [r2, #32]
 80030ce:	e01c      	b.n	800310a <HAL_RCC_OscConfig+0x36e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCC_OscConfig+0x356>
 80030d8:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4a6c      	ldr	r2, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030de:	f043 0304 	orr.w	r3, r3, #4
 80030e2:	6213      	str	r3, [r2, #32]
 80030e4:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6213      	str	r3, [r2, #32]
 80030f0:	e00b      	b.n	800310a <HAL_RCC_OscConfig+0x36e>
 80030f2:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4a66      	ldr	r2, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	4b64      	ldr	r3, [pc, #400]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d015      	beq.n	800313e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe ff73 	bl	8001ffc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7fe ff6f 	bl	8001ffc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e0ab      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003130:	4b57      	ldr	r3, [pc, #348]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ee      	beq.n	800311a <HAL_RCC_OscConfig+0x37e>
 800313c:	e014      	b.n	8003168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fe ff5d 	bl	8001ffc <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fe ff59 	bl	8001ffc <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e095      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ee      	bne.n	8003146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316e:	4b48      	ldr	r3, [pc, #288]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4a47      	ldr	r2, [pc, #284]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8081 	beq.w	8003286 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003184:	4b42      	ldr	r3, [pc, #264]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d061      	beq.n	8003254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d146      	bne.n	8003226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x4fc>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe ff2d 	bl	8001ffc <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fe ff29 	bl	8001ffc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e067      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d108      	bne.n	80031e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	492d      	ldr	r1, [pc, #180]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a19      	ldr	r1, [r3, #32]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	430b      	orrs	r3, r1
 80031f2:	4927      	ldr	r1, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <HAL_RCC_OscConfig+0x4fc>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe fefd 	bl	8001ffc <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003206:	f7fe fef9 	bl	8001ffc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e037      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x46a>
 8003224:	e02f      	b.n	8003286 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_RCC_OscConfig+0x4fc>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe fee6 	bl	8001ffc <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe fee2 	bl	8001ffc <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e020      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x498>
 8003252:	e018      	b.n	8003286 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e013      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	429a      	cmp	r2, r3
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
 8003298:	42420060 	.word	0x42420060

0800329c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0d0      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b6a      	ldr	r3, [pc, #424]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d910      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	4965      	ldr	r1, [pc, #404]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b8      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d020      	beq.n	800332e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800331a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b50      	ldr	r3, [pc, #320]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	494d      	ldr	r1, [pc, #308]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d040      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d115      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e07f      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e073      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06b      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4936      	ldr	r1, [pc, #216]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe fe36 	bl	8001ffc <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe fe32 	bl	8001ffc <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e053      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d210      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	4922      	ldr	r1, [pc, #136]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e032      	b.n	8003452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4916      	ldr	r1, [pc, #88]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	490e      	ldr	r1, [pc, #56]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800342a:	f000 f821 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490a      	ldr	r1, [pc, #40]	; (8003464 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	fa22 f303 	lsr.w	r3, r2, r3
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1cc>)
 8003444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1d0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fd94 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40022000 	.word	0x40022000
 8003460:	40021000 	.word	0x40021000
 8003464:	080072d8 	.word	0x080072d8
 8003468:	20000000 	.word	0x20000000
 800346c:	20000004 	.word	0x20000004

08003470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003470:	b490      	push	{r4, r7}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003478:	1d3c      	adds	r4, r7, #4
 800347a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800347c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003480:	f240 2301 	movw	r3, #513	; 0x201
 8003484:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x40>
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x46>
 80034ae:	e02d      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b2:	623b      	str	r3, [r7, #32]
      break;
 80034b4:	e02d      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	0c9b      	lsrs	r3, r3, #18
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034c2:	4413      	add	r3, r2
 80034c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c5b      	lsrs	r3, r3, #17
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034e2:	4413      	add	r3, r2
 80034e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ee:	fb02 f203 	mul.w	r2, r2, r3
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	e004      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	623b      	str	r3, [r7, #32]
      break;
 800350a:	e002      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800350e:	623b      	str	r3, [r7, #32]
      break;
 8003510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003512:	6a3b      	ldr	r3, [r7, #32]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bc90      	pop	{r4, r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	080072c4 	.word	0x080072c4
 8003524:	40021000 	.word	0x40021000
 8003528:	007a1200 	.word	0x007a1200
 800352c:	003d0900 	.word	0x003d0900

08003530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_RCC_GetHCLKFreq+0x10>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	20000000 	.word	0x20000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003548:	f7ff fff2 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	080072e8 	.word	0x080072e8

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003570:	f7ff ffde 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0adb      	lsrs	r3, r3, #11
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	080072e8 	.word	0x080072e8

08003594 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <RCC_Delay+0x34>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <RCC_Delay+0x38>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0a5b      	lsrs	r3, r3, #9
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035b0:	bf00      	nop
  }
  while (Delay --);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	60fa      	str	r2, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f9      	bne.n	80035b0 <RCC_Delay+0x1c>
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	20000000 	.word	0x20000000
 80035cc:	10624dd3 	.word	0x10624dd3

080035d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e041      	b.n	8003666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe faea 	bl	8001bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 f93c 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_TIM_Base_Start+0x88>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_TIM_Base_Start+0x48>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d009      	beq.n	80036b8 <HAL_TIM_Base_Start+0x48>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_TIM_Base_Start+0x8c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_TIM_Base_Start+0x48>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_TIM_Base_Start+0x90>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d010      	beq.n	80036ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	e007      	b.n	80036ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800

08003704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x18>
 8003718:	2302      	movs	r3, #2
 800371a:	e0b3      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x180>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800373a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003742:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003754:	d03e      	beq.n	80037d4 <HAL_TIM_ConfigClockSource+0xd0>
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	f200 8087 	bhi.w	800386c <HAL_TIM_ConfigClockSource+0x168>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	f000 8085 	beq.w	8003870 <HAL_TIM_ConfigClockSource+0x16c>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d87f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d01a      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0xa2>
 8003770:	2b70      	cmp	r3, #112	; 0x70
 8003772:	d87b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d050      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x116>
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d877      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 800377c:	2b50      	cmp	r3, #80	; 0x50
 800377e:	d03c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0xf6>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d873      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d058      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x136>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d86f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d064      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x156>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d86b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d060      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x156>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d867      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x168>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x156>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d05a      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037a4:	e062      	b.n	800386c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f000 f942 	bl	8003a3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	609a      	str	r2, [r3, #8]
      break;
 80037d2:	e04e      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f000 f92b 	bl	8003a3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f6:	609a      	str	r2, [r3, #8]
      break;
 80037f8:	e03b      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 f8a2 	bl	8003950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2150      	movs	r1, #80	; 0x50
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f8f9 	bl	8003a0a <TIM_ITRx_SetConfig>
      break;
 8003818:	e02b      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 f8c0 	bl	80039ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2160      	movs	r1, #96	; 0x60
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f8e9 	bl	8003a0a <TIM_ITRx_SetConfig>
      break;
 8003838:	e01b      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 f882 	bl	8003950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f8d9 	bl	8003a0a <TIM_ITRx_SetConfig>
      break;
 8003858:	e00b      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 f8d0 	bl	8003a0a <TIM_ITRx_SetConfig>
        break;
 800386a:	e002      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003870:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <TIM_Base_SetConfig+0xb8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00b      	beq.n	80038bc <TIM_Base_SetConfig+0x30>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d007      	beq.n	80038bc <TIM_Base_SetConfig+0x30>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a26      	ldr	r2, [pc, #152]	; (8003948 <TIM_Base_SetConfig+0xbc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0x30>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a25      	ldr	r2, [pc, #148]	; (800394c <TIM_Base_SetConfig+0xc0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <TIM_Base_SetConfig+0xb8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_Base_SetConfig+0x62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d007      	beq.n	80038ee <TIM_Base_SetConfig+0x62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <TIM_Base_SetConfig+0xbc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_Base_SetConfig+0x62>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <TIM_Base_SetConfig+0xc0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d108      	bne.n	8003900 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a07      	ldr	r2, [pc, #28]	; (8003944 <TIM_Base_SetConfig+0xb8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800

08003950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0201 	bic.w	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 030a 	bic.w	r3, r3, #10
 800398c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 0210 	bic.w	r2, r3, #16
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	031b      	lsls	r3, r3, #12
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f043 0307 	orr.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	021a      	lsls	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e046      	b.n	8003b22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae0:	d009      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800

08003b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e03f      	b.n	8003bca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe f872 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2224      	movs	r2, #36	; 0x24
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fc85 	bl	800448c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08a      	sub	sp, #40	; 0x28
 8003bd6:	af02      	add	r7, sp, #8
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d17c      	bne.n	8003cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_UART_Transmit+0x2c>
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e075      	b.n	8003cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Transmit+0x3e>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e06e      	b.n	8003cee <HAL_UART_Transmit+0x11c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	; 0x21
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c26:	f7fe f9e9 	bl	8001ffc <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x82>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c64:	e02a      	b.n	8003cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2180      	movs	r1, #128	; 0x80
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa38 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e036      	b.n	8003cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	e007      	b.n	8003cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1cf      	bne.n	8003c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2140      	movs	r1, #64	; 0x40
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fa08 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e006      	b.n	8003cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d11d      	bne.n	8003d4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Receive_IT+0x26>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e016      	b.n	8003d4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Receive_IT+0x38>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e00f      	b.n	8003d4e <HAL_UART_Receive_IT+0x58>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa19 	bl	800417a <UART_Start_Receive_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x52>
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fac9 	bl	800433a <UART_Receive_IT>
      return;
 8003da8:	e17b      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80b1 	beq.w	8003f14 <HAL_UART_IRQHandler+0x1bc>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_UART_IRQHandler+0x70>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80a6 	beq.w	8003f14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_UART_IRQHandler+0x90>
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_UART_IRQHandler+0xb0>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0202 	orr.w	r2, r3, #2
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_UART_IRQHandler+0xd0>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <HAL_UART_IRQHandler+0xfa>
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_UART_IRQHandler+0xee>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 811e 	beq.w	8004098 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_UART_IRQHandler+0x11e>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa62 	bl	800433a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_UART_IRQHandler+0x146>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d031      	beq.n	8003f02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a4 	bl	80041ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d023      	beq.n	8003efa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4a76      	ldr	r2, [pc, #472]	; (80040a8 <HAL_UART_IRQHandler+0x350>)
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe f9e2 	bl	80022a0 <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00e      	b.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8e3 	bl	80040be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00a      	b.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8df 	bl	80040be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e006      	b.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8db 	bl	80040be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f0e:	e0c3      	b.n	8004098 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	bf00      	nop
    return;
 8003f12:	e0c1      	b.n	8004098 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	f040 80a1 	bne.w	8004060 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 809b 	beq.w	8004060 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8095 	beq.w	8004060 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d04e      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f64:	8a3b      	ldrh	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8098 	beq.w	800409c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f70:	8a3a      	ldrh	r2, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	f080 8092 	bcs.w	800409c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8a3a      	ldrh	r2, [r7, #16]
 8003f7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d02b      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0210 	bic.w	r2, r2, #16
 8003fd4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe f925 	bl	800222a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f86d 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ff6:	e051      	b.n	800409c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d047      	beq.n	80040a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d044      	beq.n	80040a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004024:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0210 	bic.w	r2, r2, #16
 8004052:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004054:	8a7b      	ldrh	r3, [r7, #18]
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f839 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800405e:	e01f      	b.n	80040a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_UART_IRQHandler+0x324>
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f8f9 	bl	800426c <UART_Transmit_IT>
    return;
 800407a:	e012      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <HAL_UART_IRQHandler+0x34a>
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f93a 	bl	800430a <UART_EndTransmit_IT>
    return;
 8004096:	e004      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80040a0:	bf00      	nop
  }
}
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	08004245 	.word	0x08004245

080040ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	e02c      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d028      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0x30>
 8004106:	f7fd ff79 	bl	8001ffc <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	429a      	cmp	r2, r3
 8004114:	d21d      	bcs.n	8004152 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004124:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4013      	ands	r3, r2
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d0c3      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	4613      	mov	r3, r2
 8004186:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2222      	movs	r2, #34	; 0x22
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041be:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004202:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0210 	bic.w	r2, r2, #16
 800422a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff2d 	bl	80040be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b21      	cmp	r3, #33	; 0x21
 800427e:	d13e      	bne.n	80042fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d114      	bne.n	80042b4 <UART_Transmit_IT+0x48>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d110      	bne.n	80042b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	1c9a      	adds	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]
 80042b2:	e008      	b.n	80042c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6211      	str	r1, [r2, #32]
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4619      	mov	r1, r3
 80042d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff febe 	bl	80040ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	f040 8099 	bne.w	8004482 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d117      	bne.n	800438a <UART_Receive_IT+0x50>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d113      	bne.n	800438a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004378:	b29a      	uxth	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
 8004388:	e026      	b.n	80043d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d007      	beq.n	80043ae <UART_Receive_IT+0x74>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <UART_Receive_IT+0x82>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e008      	b.n	80043ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4619      	mov	r1, r3
 80043e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d148      	bne.n	800447e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0220 	bic.w	r2, r2, #32
 80043fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	2b01      	cmp	r3, #1
 800442a:	d123      	bne.n	8004474 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0210 	bic.w	r2, r2, #16
 8004440:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d10a      	bne.n	8004466 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fe2f 	bl	80040d0 <HAL_UARTEx_RxEventCallback>
 8004472:	e002      	b.n	800447a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fd f945 	bl	8001704 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e002      	b.n	8004484 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044c6:	f023 030c 	bic.w	r3, r3, #12
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <UART_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7ff f83a 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	e002      	b.n	8004502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7ff f822 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8004500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <UART_SetConfig+0x118>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	0119      	lsls	r1, r3, #4
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fbb2 f2f3 	udiv	r2, r2, r3
 8004538:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <UART_SetConfig+0x118>)
 800453a:	fba3 0302 	umull	r0, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	4419      	add	r1, r3
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <UART_SetConfig+0x118>)
 8004572:	fba3 0302 	umull	r0, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2064      	movs	r0, #100	; 0x64
 800457a:	fb00 f303 	mul.w	r3, r0, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	3332      	adds	r3, #50	; 0x32
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <UART_SetConfig+0x118>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	440a      	add	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40013800 	.word	0x40013800
 80045a4:	51eb851f 	.word	0x51eb851f

080045a8 <__errno>:
 80045a8:	4b01      	ldr	r3, [pc, #4]	; (80045b0 <__errno+0x8>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	2000000c 	.word	0x2000000c

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	2600      	movs	r6, #0
 80045b8:	4d0c      	ldr	r5, [pc, #48]	; (80045ec <__libc_init_array+0x38>)
 80045ba:	4c0d      	ldr	r4, [pc, #52]	; (80045f0 <__libc_init_array+0x3c>)
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	f002 fe02 	bl	80071cc <_init>
 80045c8:	2600      	movs	r6, #0
 80045ca:	4d0a      	ldr	r5, [pc, #40]	; (80045f4 <__libc_init_array+0x40>)
 80045cc:	4c0a      	ldr	r4, [pc, #40]	; (80045f8 <__libc_init_array+0x44>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	080076d4 	.word	0x080076d4
 80045f0:	080076d4 	.word	0x080076d4
 80045f4:	080076d4 	.word	0x080076d4
 80045f8:	080076d8 	.word	0x080076d8

080045fc <memset>:
 80045fc:	4603      	mov	r3, r0
 80045fe:	4402      	add	r2, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	f803 1b01 	strb.w	r1, [r3], #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <__cvt>:
 800460c:	2b00      	cmp	r3, #0
 800460e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004612:	461f      	mov	r7, r3
 8004614:	bfbb      	ittet	lt
 8004616:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800461a:	461f      	movlt	r7, r3
 800461c:	2300      	movge	r3, #0
 800461e:	232d      	movlt	r3, #45	; 0x2d
 8004620:	b088      	sub	sp, #32
 8004622:	4614      	mov	r4, r2
 8004624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004626:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004628:	7013      	strb	r3, [r2, #0]
 800462a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800462c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004630:	f023 0820 	bic.w	r8, r3, #32
 8004634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004638:	d005      	beq.n	8004646 <__cvt+0x3a>
 800463a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800463e:	d100      	bne.n	8004642 <__cvt+0x36>
 8004640:	3501      	adds	r5, #1
 8004642:	2302      	movs	r3, #2
 8004644:	e000      	b.n	8004648 <__cvt+0x3c>
 8004646:	2303      	movs	r3, #3
 8004648:	aa07      	add	r2, sp, #28
 800464a:	9204      	str	r2, [sp, #16]
 800464c:	aa06      	add	r2, sp, #24
 800464e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004652:	e9cd 3500 	strd	r3, r5, [sp]
 8004656:	4622      	mov	r2, r4
 8004658:	463b      	mov	r3, r7
 800465a:	f000 fe49 	bl	80052f0 <_dtoa_r>
 800465e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004662:	4606      	mov	r6, r0
 8004664:	d102      	bne.n	800466c <__cvt+0x60>
 8004666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004668:	07db      	lsls	r3, r3, #31
 800466a:	d522      	bpl.n	80046b2 <__cvt+0xa6>
 800466c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004670:	eb06 0905 	add.w	r9, r6, r5
 8004674:	d110      	bne.n	8004698 <__cvt+0x8c>
 8004676:	7833      	ldrb	r3, [r6, #0]
 8004678:	2b30      	cmp	r3, #48	; 0x30
 800467a:	d10a      	bne.n	8004692 <__cvt+0x86>
 800467c:	2200      	movs	r2, #0
 800467e:	2300      	movs	r3, #0
 8004680:	4620      	mov	r0, r4
 8004682:	4639      	mov	r1, r7
 8004684:	f7fc fa44 	bl	8000b10 <__aeabi_dcmpeq>
 8004688:	b918      	cbnz	r0, 8004692 <__cvt+0x86>
 800468a:	f1c5 0501 	rsb	r5, r5, #1
 800468e:	f8ca 5000 	str.w	r5, [sl]
 8004692:	f8da 3000 	ldr.w	r3, [sl]
 8004696:	4499      	add	r9, r3
 8004698:	2200      	movs	r2, #0
 800469a:	2300      	movs	r3, #0
 800469c:	4620      	mov	r0, r4
 800469e:	4639      	mov	r1, r7
 80046a0:	f7fc fa36 	bl	8000b10 <__aeabi_dcmpeq>
 80046a4:	b108      	cbz	r0, 80046aa <__cvt+0x9e>
 80046a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80046aa:	2230      	movs	r2, #48	; 0x30
 80046ac:	9b07      	ldr	r3, [sp, #28]
 80046ae:	454b      	cmp	r3, r9
 80046b0:	d307      	bcc.n	80046c2 <__cvt+0xb6>
 80046b2:	4630      	mov	r0, r6
 80046b4:	9b07      	ldr	r3, [sp, #28]
 80046b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046b8:	1b9b      	subs	r3, r3, r6
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	b008      	add	sp, #32
 80046be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	9107      	str	r1, [sp, #28]
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e7f0      	b.n	80046ac <__cvt+0xa0>

080046ca <__exponent>:
 80046ca:	4603      	mov	r3, r0
 80046cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ce:	2900      	cmp	r1, #0
 80046d0:	f803 2b02 	strb.w	r2, [r3], #2
 80046d4:	bfb6      	itet	lt
 80046d6:	222d      	movlt	r2, #45	; 0x2d
 80046d8:	222b      	movge	r2, #43	; 0x2b
 80046da:	4249      	neglt	r1, r1
 80046dc:	2909      	cmp	r1, #9
 80046de:	7042      	strb	r2, [r0, #1]
 80046e0:	dd2b      	ble.n	800473a <__exponent+0x70>
 80046e2:	f10d 0407 	add.w	r4, sp, #7
 80046e6:	46a4      	mov	ip, r4
 80046e8:	270a      	movs	r7, #10
 80046ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80046ee:	460a      	mov	r2, r1
 80046f0:	46a6      	mov	lr, r4
 80046f2:	fb07 1516 	mls	r5, r7, r6, r1
 80046f6:	2a63      	cmp	r2, #99	; 0x63
 80046f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80046fc:	4631      	mov	r1, r6
 80046fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004702:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004706:	dcf0      	bgt.n	80046ea <__exponent+0x20>
 8004708:	3130      	adds	r1, #48	; 0x30
 800470a:	f1ae 0502 	sub.w	r5, lr, #2
 800470e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004712:	4629      	mov	r1, r5
 8004714:	1c44      	adds	r4, r0, #1
 8004716:	4561      	cmp	r1, ip
 8004718:	d30a      	bcc.n	8004730 <__exponent+0x66>
 800471a:	f10d 0209 	add.w	r2, sp, #9
 800471e:	eba2 020e 	sub.w	r2, r2, lr
 8004722:	4565      	cmp	r5, ip
 8004724:	bf88      	it	hi
 8004726:	2200      	movhi	r2, #0
 8004728:	4413      	add	r3, r2
 800472a:	1a18      	subs	r0, r3, r0
 800472c:	b003      	add	sp, #12
 800472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004734:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004738:	e7ed      	b.n	8004716 <__exponent+0x4c>
 800473a:	2330      	movs	r3, #48	; 0x30
 800473c:	3130      	adds	r1, #48	; 0x30
 800473e:	7083      	strb	r3, [r0, #2]
 8004740:	70c1      	strb	r1, [r0, #3]
 8004742:	1d03      	adds	r3, r0, #4
 8004744:	e7f1      	b.n	800472a <__exponent+0x60>
	...

08004748 <_printf_float>:
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	b091      	sub	sp, #68	; 0x44
 800474e:	460c      	mov	r4, r1
 8004750:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004754:	4616      	mov	r6, r2
 8004756:	461f      	mov	r7, r3
 8004758:	4605      	mov	r5, r0
 800475a:	f001 fd6f 	bl	800623c <_localeconv_r>
 800475e:	6803      	ldr	r3, [r0, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	9309      	str	r3, [sp, #36]	; 0x24
 8004764:	f7fb fcf4 	bl	8000150 <strlen>
 8004768:	2300      	movs	r3, #0
 800476a:	930e      	str	r3, [sp, #56]	; 0x38
 800476c:	f8d8 3000 	ldr.w	r3, [r8]
 8004770:	900a      	str	r0, [sp, #40]	; 0x28
 8004772:	3307      	adds	r3, #7
 8004774:	f023 0307 	bic.w	r3, r3, #7
 8004778:	f103 0208 	add.w	r2, r3, #8
 800477c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004780:	f8d4 b000 	ldr.w	fp, [r4]
 8004784:	f8c8 2000 	str.w	r2, [r8]
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004790:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004794:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004798:	930b      	str	r3, [sp, #44]	; 0x2c
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	4640      	mov	r0, r8
 80047a0:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <_printf_float+0x2cc>)
 80047a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a4:	f7fc f9e6 	bl	8000b74 <__aeabi_dcmpun>
 80047a8:	bb70      	cbnz	r0, 8004808 <_printf_float+0xc0>
 80047aa:	f04f 32ff 	mov.w	r2, #4294967295
 80047ae:	4640      	mov	r0, r8
 80047b0:	4b98      	ldr	r3, [pc, #608]	; (8004a14 <_printf_float+0x2cc>)
 80047b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047b4:	f7fc f9c0 	bl	8000b38 <__aeabi_dcmple>
 80047b8:	bb30      	cbnz	r0, 8004808 <_printf_float+0xc0>
 80047ba:	2200      	movs	r2, #0
 80047bc:	2300      	movs	r3, #0
 80047be:	4640      	mov	r0, r8
 80047c0:	4651      	mov	r1, sl
 80047c2:	f7fc f9af 	bl	8000b24 <__aeabi_dcmplt>
 80047c6:	b110      	cbz	r0, 80047ce <_printf_float+0x86>
 80047c8:	232d      	movs	r3, #45	; 0x2d
 80047ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ce:	4b92      	ldr	r3, [pc, #584]	; (8004a18 <_printf_float+0x2d0>)
 80047d0:	4892      	ldr	r0, [pc, #584]	; (8004a1c <_printf_float+0x2d4>)
 80047d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047d6:	bf94      	ite	ls
 80047d8:	4698      	movls	r8, r3
 80047da:	4680      	movhi	r8, r0
 80047dc:	2303      	movs	r3, #3
 80047de:	f04f 0a00 	mov.w	sl, #0
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	f02b 0304 	bic.w	r3, fp, #4
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	4633      	mov	r3, r6
 80047ec:	4621      	mov	r1, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	9700      	str	r7, [sp, #0]
 80047f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80047f4:	f000 f9d4 	bl	8004ba0 <_printf_common>
 80047f8:	3001      	adds	r0, #1
 80047fa:	f040 8090 	bne.w	800491e <_printf_float+0x1d6>
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	b011      	add	sp, #68	; 0x44
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	4642      	mov	r2, r8
 800480a:	4653      	mov	r3, sl
 800480c:	4640      	mov	r0, r8
 800480e:	4651      	mov	r1, sl
 8004810:	f7fc f9b0 	bl	8000b74 <__aeabi_dcmpun>
 8004814:	b148      	cbz	r0, 800482a <_printf_float+0xe2>
 8004816:	f1ba 0f00 	cmp.w	sl, #0
 800481a:	bfb8      	it	lt
 800481c:	232d      	movlt	r3, #45	; 0x2d
 800481e:	4880      	ldr	r0, [pc, #512]	; (8004a20 <_printf_float+0x2d8>)
 8004820:	bfb8      	it	lt
 8004822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004826:	4b7f      	ldr	r3, [pc, #508]	; (8004a24 <_printf_float+0x2dc>)
 8004828:	e7d3      	b.n	80047d2 <_printf_float+0x8a>
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	d142      	bne.n	80048ba <_printf_float+0x172>
 8004834:	2306      	movs	r3, #6
 8004836:	6063      	str	r3, [r4, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	9206      	str	r2, [sp, #24]
 800483c:	aa0e      	add	r2, sp, #56	; 0x38
 800483e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004842:	aa0d      	add	r2, sp, #52	; 0x34
 8004844:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004848:	9203      	str	r2, [sp, #12]
 800484a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800484e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	6863      	ldr	r3, [r4, #4]
 8004856:	4642      	mov	r2, r8
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4628      	mov	r0, r5
 800485c:	4653      	mov	r3, sl
 800485e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004860:	f7ff fed4 	bl	800460c <__cvt>
 8004864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004866:	4680      	mov	r8, r0
 8004868:	2947      	cmp	r1, #71	; 0x47
 800486a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800486c:	d108      	bne.n	8004880 <_printf_float+0x138>
 800486e:	1cc8      	adds	r0, r1, #3
 8004870:	db02      	blt.n	8004878 <_printf_float+0x130>
 8004872:	6863      	ldr	r3, [r4, #4]
 8004874:	4299      	cmp	r1, r3
 8004876:	dd40      	ble.n	80048fa <_printf_float+0x1b2>
 8004878:	f1a9 0902 	sub.w	r9, r9, #2
 800487c:	fa5f f989 	uxtb.w	r9, r9
 8004880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004884:	d81f      	bhi.n	80048c6 <_printf_float+0x17e>
 8004886:	464a      	mov	r2, r9
 8004888:	3901      	subs	r1, #1
 800488a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800488e:	910d      	str	r1, [sp, #52]	; 0x34
 8004890:	f7ff ff1b 	bl	80046ca <__exponent>
 8004894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004896:	4682      	mov	sl, r0
 8004898:	1813      	adds	r3, r2, r0
 800489a:	2a01      	cmp	r2, #1
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	dc02      	bgt.n	80048a6 <_printf_float+0x15e>
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	07d2      	lsls	r2, r2, #31
 80048a4:	d501      	bpl.n	80048aa <_printf_float+0x162>
 80048a6:	3301      	adds	r3, #1
 80048a8:	6123      	str	r3, [r4, #16]
 80048aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d09b      	beq.n	80047ea <_printf_float+0xa2>
 80048b2:	232d      	movs	r3, #45	; 0x2d
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b8:	e797      	b.n	80047ea <_printf_float+0xa2>
 80048ba:	2947      	cmp	r1, #71	; 0x47
 80048bc:	d1bc      	bne.n	8004838 <_printf_float+0xf0>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ba      	bne.n	8004838 <_printf_float+0xf0>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7b7      	b.n	8004836 <_printf_float+0xee>
 80048c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048ca:	d118      	bne.n	80048fe <_printf_float+0x1b6>
 80048cc:	2900      	cmp	r1, #0
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	dd0b      	ble.n	80048ea <_printf_float+0x1a2>
 80048d2:	6121      	str	r1, [r4, #16]
 80048d4:	b913      	cbnz	r3, 80048dc <_printf_float+0x194>
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	07d0      	lsls	r0, r2, #31
 80048da:	d502      	bpl.n	80048e2 <_printf_float+0x19a>
 80048dc:	3301      	adds	r3, #1
 80048de:	440b      	add	r3, r1
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	f04f 0a00 	mov.w	sl, #0
 80048e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80048e8:	e7df      	b.n	80048aa <_printf_float+0x162>
 80048ea:	b913      	cbnz	r3, 80048f2 <_printf_float+0x1aa>
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	07d2      	lsls	r2, r2, #31
 80048f0:	d501      	bpl.n	80048f6 <_printf_float+0x1ae>
 80048f2:	3302      	adds	r3, #2
 80048f4:	e7f4      	b.n	80048e0 <_printf_float+0x198>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7f2      	b.n	80048e0 <_printf_float+0x198>
 80048fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80048fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004900:	4299      	cmp	r1, r3
 8004902:	db05      	blt.n	8004910 <_printf_float+0x1c8>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	6121      	str	r1, [r4, #16]
 8004908:	07d8      	lsls	r0, r3, #31
 800490a:	d5ea      	bpl.n	80048e2 <_printf_float+0x19a>
 800490c:	1c4b      	adds	r3, r1, #1
 800490e:	e7e7      	b.n	80048e0 <_printf_float+0x198>
 8004910:	2900      	cmp	r1, #0
 8004912:	bfcc      	ite	gt
 8004914:	2201      	movgt	r2, #1
 8004916:	f1c1 0202 	rsble	r2, r1, #2
 800491a:	4413      	add	r3, r2
 800491c:	e7e0      	b.n	80048e0 <_printf_float+0x198>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	055a      	lsls	r2, r3, #21
 8004922:	d407      	bmi.n	8004934 <_printf_float+0x1ec>
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	4642      	mov	r2, r8
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	d12b      	bne.n	800498a <_printf_float+0x242>
 8004932:	e764      	b.n	80047fe <_printf_float+0xb6>
 8004934:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004938:	f240 80dd 	bls.w	8004af6 <_printf_float+0x3ae>
 800493c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004940:	2200      	movs	r2, #0
 8004942:	2300      	movs	r3, #0
 8004944:	f7fc f8e4 	bl	8000b10 <__aeabi_dcmpeq>
 8004948:	2800      	cmp	r0, #0
 800494a:	d033      	beq.n	80049b4 <_printf_float+0x26c>
 800494c:	2301      	movs	r3, #1
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <_printf_float+0x2e0>)
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f af51 	beq.w	80047fe <_printf_float+0xb6>
 800495c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004960:	429a      	cmp	r2, r3
 8004962:	db02      	blt.n	800496a <_printf_float+0x222>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07d8      	lsls	r0, r3, #31
 8004968:	d50f      	bpl.n	800498a <_printf_float+0x242>
 800496a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	47b8      	blx	r7
 8004974:	3001      	adds	r0, #1
 8004976:	f43f af42 	beq.w	80047fe <_printf_float+0xb6>
 800497a:	f04f 0800 	mov.w	r8, #0
 800497e:	f104 091a 	add.w	r9, r4, #26
 8004982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004984:	3b01      	subs	r3, #1
 8004986:	4543      	cmp	r3, r8
 8004988:	dc09      	bgt.n	800499e <_printf_float+0x256>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	079b      	lsls	r3, r3, #30
 800498e:	f100 8102 	bmi.w	8004b96 <_printf_float+0x44e>
 8004992:	68e0      	ldr	r0, [r4, #12]
 8004994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004996:	4298      	cmp	r0, r3
 8004998:	bfb8      	it	lt
 800499a:	4618      	movlt	r0, r3
 800499c:	e731      	b.n	8004802 <_printf_float+0xba>
 800499e:	2301      	movs	r3, #1
 80049a0:	464a      	mov	r2, r9
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f af28 	beq.w	80047fe <_printf_float+0xb6>
 80049ae:	f108 0801 	add.w	r8, r8, #1
 80049b2:	e7e6      	b.n	8004982 <_printf_float+0x23a>
 80049b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	dc38      	bgt.n	8004a2c <_printf_float+0x2e4>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <_printf_float+0x2e0>)
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	f43f af1a 	beq.w	80047fe <_printf_float+0xb6>
 80049ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ce:	4313      	orrs	r3, r2
 80049d0:	d102      	bne.n	80049d8 <_printf_float+0x290>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	07d9      	lsls	r1, r3, #31
 80049d6:	d5d8      	bpl.n	800498a <_printf_float+0x242>
 80049d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f af0b 	beq.w	80047fe <_printf_float+0xb6>
 80049e8:	f04f 0900 	mov.w	r9, #0
 80049ec:	f104 0a1a 	add.w	sl, r4, #26
 80049f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049f2:	425b      	negs	r3, r3
 80049f4:	454b      	cmp	r3, r9
 80049f6:	dc01      	bgt.n	80049fc <_printf_float+0x2b4>
 80049f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049fa:	e794      	b.n	8004926 <_printf_float+0x1de>
 80049fc:	2301      	movs	r3, #1
 80049fe:	4652      	mov	r2, sl
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f aef9 	beq.w	80047fe <_printf_float+0xb6>
 8004a0c:	f109 0901 	add.w	r9, r9, #1
 8004a10:	e7ee      	b.n	80049f0 <_printf_float+0x2a8>
 8004a12:	bf00      	nop
 8004a14:	7fefffff 	.word	0x7fefffff
 8004a18:	080072f4 	.word	0x080072f4
 8004a1c:	080072f8 	.word	0x080072f8
 8004a20:	08007300 	.word	0x08007300
 8004a24:	080072fc 	.word	0x080072fc
 8004a28:	08007304 	.word	0x08007304
 8004a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a30:	429a      	cmp	r2, r3
 8004a32:	bfa8      	it	ge
 8004a34:	461a      	movge	r2, r3
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	4691      	mov	r9, r2
 8004a3a:	dc37      	bgt.n	8004aac <_printf_float+0x364>
 8004a3c:	f04f 0b00 	mov.w	fp, #0
 8004a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a44:	f104 021a 	add.w	r2, r4, #26
 8004a48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a4c:	ebaa 0309 	sub.w	r3, sl, r9
 8004a50:	455b      	cmp	r3, fp
 8004a52:	dc33      	bgt.n	8004abc <_printf_float+0x374>
 8004a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	db3b      	blt.n	8004ad4 <_printf_float+0x38c>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	07da      	lsls	r2, r3, #31
 8004a60:	d438      	bmi.n	8004ad4 <_printf_float+0x38c>
 8004a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a66:	eba2 030a 	sub.w	r3, r2, sl
 8004a6a:	eba2 0901 	sub.w	r9, r2, r1
 8004a6e:	4599      	cmp	r9, r3
 8004a70:	bfa8      	it	ge
 8004a72:	4699      	movge	r9, r3
 8004a74:	f1b9 0f00 	cmp.w	r9, #0
 8004a78:	dc34      	bgt.n	8004ae4 <_printf_float+0x39c>
 8004a7a:	f04f 0800 	mov.w	r8, #0
 8004a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a82:	f104 0a1a 	add.w	sl, r4, #26
 8004a86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	eba3 0309 	sub.w	r3, r3, r9
 8004a90:	4543      	cmp	r3, r8
 8004a92:	f77f af7a 	ble.w	800498a <_printf_float+0x242>
 8004a96:	2301      	movs	r3, #1
 8004a98:	4652      	mov	r2, sl
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f aeac 	beq.w	80047fe <_printf_float+0xb6>
 8004aa6:	f108 0801 	add.w	r8, r8, #1
 8004aaa:	e7ec      	b.n	8004a86 <_printf_float+0x33e>
 8004aac:	4613      	mov	r3, r2
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b8      	blx	r7
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d1c0      	bne.n	8004a3c <_printf_float+0x2f4>
 8004aba:	e6a0      	b.n	80047fe <_printf_float+0xb6>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f ae99 	beq.w	80047fe <_printf_float+0xb6>
 8004acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ace:	f10b 0b01 	add.w	fp, fp, #1
 8004ad2:	e7b9      	b.n	8004a48 <_printf_float+0x300>
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ada:	4628      	mov	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d1bf      	bne.n	8004a62 <_printf_float+0x31a>
 8004ae2:	e68c      	b.n	80047fe <_printf_float+0xb6>
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	eb08 020a 	add.w	r2, r8, sl
 8004aee:	47b8      	blx	r7
 8004af0:	3001      	adds	r0, #1
 8004af2:	d1c2      	bne.n	8004a7a <_printf_float+0x332>
 8004af4:	e683      	b.n	80047fe <_printf_float+0xb6>
 8004af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af8:	2a01      	cmp	r2, #1
 8004afa:	dc01      	bgt.n	8004b00 <_printf_float+0x3b8>
 8004afc:	07db      	lsls	r3, r3, #31
 8004afe:	d537      	bpl.n	8004b70 <_printf_float+0x428>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4642      	mov	r2, r8
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b8      	blx	r7
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f43f ae77 	beq.w	80047fe <_printf_float+0xb6>
 8004b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f ae6f 	beq.w	80047fe <_printf_float+0xb6>
 8004b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b24:	2200      	movs	r2, #0
 8004b26:	2300      	movs	r3, #0
 8004b28:	f7fb fff2 	bl	8000b10 <__aeabi_dcmpeq>
 8004b2c:	b9d8      	cbnz	r0, 8004b66 <_printf_float+0x41e>
 8004b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b30:	f108 0201 	add.w	r2, r8, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4631      	mov	r1, r6
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d10e      	bne.n	8004b5e <_printf_float+0x416>
 8004b40:	e65d      	b.n	80047fe <_printf_float+0xb6>
 8004b42:	2301      	movs	r3, #1
 8004b44:	464a      	mov	r2, r9
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	f43f ae56 	beq.w	80047fe <_printf_float+0xb6>
 8004b52:	f108 0801 	add.w	r8, r8, #1
 8004b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	4543      	cmp	r3, r8
 8004b5c:	dcf1      	bgt.n	8004b42 <_printf_float+0x3fa>
 8004b5e:	4653      	mov	r3, sl
 8004b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b64:	e6e0      	b.n	8004928 <_printf_float+0x1e0>
 8004b66:	f04f 0800 	mov.w	r8, #0
 8004b6a:	f104 091a 	add.w	r9, r4, #26
 8004b6e:	e7f2      	b.n	8004b56 <_printf_float+0x40e>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4642      	mov	r2, r8
 8004b74:	e7df      	b.n	8004b36 <_printf_float+0x3ee>
 8004b76:	2301      	movs	r3, #1
 8004b78:	464a      	mov	r2, r9
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	f43f ae3c 	beq.w	80047fe <_printf_float+0xb6>
 8004b86:	f108 0801 	add.w	r8, r8, #1
 8004b8a:	68e3      	ldr	r3, [r4, #12]
 8004b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b8e:	1a5b      	subs	r3, r3, r1
 8004b90:	4543      	cmp	r3, r8
 8004b92:	dcf0      	bgt.n	8004b76 <_printf_float+0x42e>
 8004b94:	e6fd      	b.n	8004992 <_printf_float+0x24a>
 8004b96:	f04f 0800 	mov.w	r8, #0
 8004b9a:	f104 0919 	add.w	r9, r4, #25
 8004b9e:	e7f4      	b.n	8004b8a <_printf_float+0x442>

08004ba0 <_printf_common>:
 8004ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	4699      	mov	r9, r3
 8004ba8:	688a      	ldr	r2, [r1, #8]
 8004baa:	690b      	ldr	r3, [r1, #16]
 8004bac:	4607      	mov	r7, r0
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bfb8      	it	lt
 8004bb2:	4613      	movlt	r3, r2
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bba:	460c      	mov	r4, r1
 8004bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc0:	b10a      	cbz	r2, 8004bc6 <_printf_common+0x26>
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	6033      	str	r3, [r6, #0]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	0699      	lsls	r1, r3, #26
 8004bca:	bf42      	ittt	mi
 8004bcc:	6833      	ldrmi	r3, [r6, #0]
 8004bce:	3302      	addmi	r3, #2
 8004bd0:	6033      	strmi	r3, [r6, #0]
 8004bd2:	6825      	ldr	r5, [r4, #0]
 8004bd4:	f015 0506 	ands.w	r5, r5, #6
 8004bd8:	d106      	bne.n	8004be8 <_printf_common+0x48>
 8004bda:	f104 0a19 	add.w	sl, r4, #25
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	6832      	ldr	r2, [r6, #0]
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	42ab      	cmp	r3, r5
 8004be6:	dc28      	bgt.n	8004c3a <_printf_common+0x9a>
 8004be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bec:	1e13      	subs	r3, r2, #0
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	bf18      	it	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	0692      	lsls	r2, r2, #26
 8004bf6:	d42d      	bmi.n	8004c54 <_printf_common+0xb4>
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c00:	47c0      	blx	r8
 8004c02:	3001      	adds	r0, #1
 8004c04:	d020      	beq.n	8004c48 <_printf_common+0xa8>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	68e5      	ldr	r5, [r4, #12]
 8004c0a:	f003 0306 	and.w	r3, r3, #6
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	bf18      	it	ne
 8004c12:	2500      	movne	r5, #0
 8004c14:	6832      	ldr	r2, [r6, #0]
 8004c16:	f04f 0600 	mov.w	r6, #0
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	bf08      	it	eq
 8004c1e:	1aad      	subeq	r5, r5, r2
 8004c20:	6922      	ldr	r2, [r4, #16]
 8004c22:	bf08      	it	eq
 8004c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	bfc4      	itt	gt
 8004c2c:	1a9b      	subgt	r3, r3, r2
 8004c2e:	18ed      	addgt	r5, r5, r3
 8004c30:	341a      	adds	r4, #26
 8004c32:	42b5      	cmp	r5, r6
 8004c34:	d11a      	bne.n	8004c6c <_printf_common+0xcc>
 8004c36:	2000      	movs	r0, #0
 8004c38:	e008      	b.n	8004c4c <_printf_common+0xac>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4652      	mov	r2, sl
 8004c3e:	4649      	mov	r1, r9
 8004c40:	4638      	mov	r0, r7
 8004c42:	47c0      	blx	r8
 8004c44:	3001      	adds	r0, #1
 8004c46:	d103      	bne.n	8004c50 <_printf_common+0xb0>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	3501      	adds	r5, #1
 8004c52:	e7c4      	b.n	8004bde <_printf_common+0x3e>
 8004c54:	2030      	movs	r0, #48	; 0x30
 8004c56:	18e1      	adds	r1, r4, r3
 8004c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c62:	4422      	add	r2, r4
 8004c64:	3302      	adds	r3, #2
 8004c66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c6a:	e7c5      	b.n	8004bf8 <_printf_common+0x58>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4622      	mov	r2, r4
 8004c70:	4649      	mov	r1, r9
 8004c72:	4638      	mov	r0, r7
 8004c74:	47c0      	blx	r8
 8004c76:	3001      	adds	r0, #1
 8004c78:	d0e6      	beq.n	8004c48 <_printf_common+0xa8>
 8004c7a:	3601      	adds	r6, #1
 8004c7c:	e7d9      	b.n	8004c32 <_printf_common+0x92>
	...

08004c80 <_printf_i>:
 8004c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	460c      	mov	r4, r1
 8004c86:	7e27      	ldrb	r7, [r4, #24]
 8004c88:	4691      	mov	r9, r2
 8004c8a:	2f78      	cmp	r7, #120	; 0x78
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	469a      	mov	sl, r3
 8004c90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c96:	d807      	bhi.n	8004ca8 <_printf_i+0x28>
 8004c98:	2f62      	cmp	r7, #98	; 0x62
 8004c9a:	d80a      	bhi.n	8004cb2 <_printf_i+0x32>
 8004c9c:	2f00      	cmp	r7, #0
 8004c9e:	f000 80d9 	beq.w	8004e54 <_printf_i+0x1d4>
 8004ca2:	2f58      	cmp	r7, #88	; 0x58
 8004ca4:	f000 80a4 	beq.w	8004df0 <_printf_i+0x170>
 8004ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cb0:	e03a      	b.n	8004d28 <_printf_i+0xa8>
 8004cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cb6:	2b15      	cmp	r3, #21
 8004cb8:	d8f6      	bhi.n	8004ca8 <_printf_i+0x28>
 8004cba:	a001      	add	r0, pc, #4	; (adr r0, 8004cc0 <_printf_i+0x40>)
 8004cbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d2d 	.word	0x08004d2d
 8004cc8:	08004ca9 	.word	0x08004ca9
 8004ccc:	08004ca9 	.word	0x08004ca9
 8004cd0:	08004ca9 	.word	0x08004ca9
 8004cd4:	08004ca9 	.word	0x08004ca9
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004ca9 	.word	0x08004ca9
 8004ce0:	08004ca9 	.word	0x08004ca9
 8004ce4:	08004ca9 	.word	0x08004ca9
 8004ce8:	08004ca9 	.word	0x08004ca9
 8004cec:	08004e3b 	.word	0x08004e3b
 8004cf0:	08004d5d 	.word	0x08004d5d
 8004cf4:	08004e1d 	.word	0x08004e1d
 8004cf8:	08004ca9 	.word	0x08004ca9
 8004cfc:	08004ca9 	.word	0x08004ca9
 8004d00:	08004e5d 	.word	0x08004e5d
 8004d04:	08004ca9 	.word	0x08004ca9
 8004d08:	08004d5d 	.word	0x08004d5d
 8004d0c:	08004ca9 	.word	0x08004ca9
 8004d10:	08004ca9 	.word	0x08004ca9
 8004d14:	08004e25 	.word	0x08004e25
 8004d18:	680b      	ldr	r3, [r1, #0]
 8004d1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d1e:	1d1a      	adds	r2, r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	600a      	str	r2, [r1, #0]
 8004d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0a4      	b.n	8004e76 <_printf_i+0x1f6>
 8004d2c:	6825      	ldr	r5, [r4, #0]
 8004d2e:	6808      	ldr	r0, [r1, #0]
 8004d30:	062e      	lsls	r6, r5, #24
 8004d32:	f100 0304 	add.w	r3, r0, #4
 8004d36:	d50a      	bpl.n	8004d4e <_printf_i+0xce>
 8004d38:	6805      	ldr	r5, [r0, #0]
 8004d3a:	600b      	str	r3, [r1, #0]
 8004d3c:	2d00      	cmp	r5, #0
 8004d3e:	da03      	bge.n	8004d48 <_printf_i+0xc8>
 8004d40:	232d      	movs	r3, #45	; 0x2d
 8004d42:	426d      	negs	r5, r5
 8004d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d48:	230a      	movs	r3, #10
 8004d4a:	485e      	ldr	r0, [pc, #376]	; (8004ec4 <_printf_i+0x244>)
 8004d4c:	e019      	b.n	8004d82 <_printf_i+0x102>
 8004d4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d52:	6805      	ldr	r5, [r0, #0]
 8004d54:	600b      	str	r3, [r1, #0]
 8004d56:	bf18      	it	ne
 8004d58:	b22d      	sxthne	r5, r5
 8004d5a:	e7ef      	b.n	8004d3c <_printf_i+0xbc>
 8004d5c:	680b      	ldr	r3, [r1, #0]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	1d18      	adds	r0, r3, #4
 8004d62:	6008      	str	r0, [r1, #0]
 8004d64:	0628      	lsls	r0, r5, #24
 8004d66:	d501      	bpl.n	8004d6c <_printf_i+0xec>
 8004d68:	681d      	ldr	r5, [r3, #0]
 8004d6a:	e002      	b.n	8004d72 <_printf_i+0xf2>
 8004d6c:	0669      	lsls	r1, r5, #25
 8004d6e:	d5fb      	bpl.n	8004d68 <_printf_i+0xe8>
 8004d70:	881d      	ldrh	r5, [r3, #0]
 8004d72:	2f6f      	cmp	r7, #111	; 0x6f
 8004d74:	bf0c      	ite	eq
 8004d76:	2308      	moveq	r3, #8
 8004d78:	230a      	movne	r3, #10
 8004d7a:	4852      	ldr	r0, [pc, #328]	; (8004ec4 <_printf_i+0x244>)
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d82:	6866      	ldr	r6, [r4, #4]
 8004d84:	2e00      	cmp	r6, #0
 8004d86:	bfa8      	it	ge
 8004d88:	6821      	ldrge	r1, [r4, #0]
 8004d8a:	60a6      	str	r6, [r4, #8]
 8004d8c:	bfa4      	itt	ge
 8004d8e:	f021 0104 	bicge.w	r1, r1, #4
 8004d92:	6021      	strge	r1, [r4, #0]
 8004d94:	b90d      	cbnz	r5, 8004d9a <_printf_i+0x11a>
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	d04d      	beq.n	8004e36 <_printf_i+0x1b6>
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004da0:	fb03 5711 	mls	r7, r3, r1, r5
 8004da4:	5dc7      	ldrb	r7, [r0, r7]
 8004da6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004daa:	462f      	mov	r7, r5
 8004dac:	42bb      	cmp	r3, r7
 8004dae:	460d      	mov	r5, r1
 8004db0:	d9f4      	bls.n	8004d9c <_printf_i+0x11c>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d10b      	bne.n	8004dce <_printf_i+0x14e>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	07df      	lsls	r7, r3, #31
 8004dba:	d508      	bpl.n	8004dce <_printf_i+0x14e>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	6861      	ldr	r1, [r4, #4]
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	bfde      	ittt	le
 8004dc4:	2330      	movle	r3, #48	; 0x30
 8004dc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dce:	1b92      	subs	r2, r2, r6
 8004dd0:	6122      	str	r2, [r4, #16]
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f8cd a000 	str.w	sl, [sp]
 8004ddc:	aa03      	add	r2, sp, #12
 8004dde:	f7ff fedf 	bl	8004ba0 <_printf_common>
 8004de2:	3001      	adds	r0, #1
 8004de4:	d14c      	bne.n	8004e80 <_printf_i+0x200>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dea:	b004      	add	sp, #16
 8004dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df0:	4834      	ldr	r0, [pc, #208]	; (8004ec4 <_printf_i+0x244>)
 8004df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004df6:	680e      	ldr	r6, [r1, #0]
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dfe:	061f      	lsls	r7, r3, #24
 8004e00:	600e      	str	r6, [r1, #0]
 8004e02:	d514      	bpl.n	8004e2e <_printf_i+0x1ae>
 8004e04:	07d9      	lsls	r1, r3, #31
 8004e06:	bf44      	itt	mi
 8004e08:	f043 0320 	orrmi.w	r3, r3, #32
 8004e0c:	6023      	strmi	r3, [r4, #0]
 8004e0e:	b91d      	cbnz	r5, 8004e18 <_printf_i+0x198>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	f023 0320 	bic.w	r3, r3, #32
 8004e16:	6023      	str	r3, [r4, #0]
 8004e18:	2310      	movs	r3, #16
 8004e1a:	e7af      	b.n	8004d7c <_printf_i+0xfc>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	f043 0320 	orr.w	r3, r3, #32
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	2378      	movs	r3, #120	; 0x78
 8004e26:	4828      	ldr	r0, [pc, #160]	; (8004ec8 <_printf_i+0x248>)
 8004e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e2c:	e7e3      	b.n	8004df6 <_printf_i+0x176>
 8004e2e:	065e      	lsls	r6, r3, #25
 8004e30:	bf48      	it	mi
 8004e32:	b2ad      	uxthmi	r5, r5
 8004e34:	e7e6      	b.n	8004e04 <_printf_i+0x184>
 8004e36:	4616      	mov	r6, r2
 8004e38:	e7bb      	b.n	8004db2 <_printf_i+0x132>
 8004e3a:	680b      	ldr	r3, [r1, #0]
 8004e3c:	6826      	ldr	r6, [r4, #0]
 8004e3e:	1d1d      	adds	r5, r3, #4
 8004e40:	6960      	ldr	r0, [r4, #20]
 8004e42:	600d      	str	r5, [r1, #0]
 8004e44:	0635      	lsls	r5, r6, #24
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	d501      	bpl.n	8004e4e <_printf_i+0x1ce>
 8004e4a:	6018      	str	r0, [r3, #0]
 8004e4c:	e002      	b.n	8004e54 <_printf_i+0x1d4>
 8004e4e:	0671      	lsls	r1, r6, #25
 8004e50:	d5fb      	bpl.n	8004e4a <_printf_i+0x1ca>
 8004e52:	8018      	strh	r0, [r3, #0]
 8004e54:	2300      	movs	r3, #0
 8004e56:	4616      	mov	r6, r2
 8004e58:	6123      	str	r3, [r4, #16]
 8004e5a:	e7ba      	b.n	8004dd2 <_printf_i+0x152>
 8004e5c:	680b      	ldr	r3, [r1, #0]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	600a      	str	r2, [r1, #0]
 8004e62:	681e      	ldr	r6, [r3, #0]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4630      	mov	r0, r6
 8004e68:	6862      	ldr	r2, [r4, #4]
 8004e6a:	f001 fa5b 	bl	8006324 <memchr>
 8004e6e:	b108      	cbz	r0, 8004e74 <_printf_i+0x1f4>
 8004e70:	1b80      	subs	r0, r0, r6
 8004e72:	6060      	str	r0, [r4, #4]
 8004e74:	6863      	ldr	r3, [r4, #4]
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e7e:	e7a8      	b.n	8004dd2 <_printf_i+0x152>
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	47d0      	blx	sl
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d0ab      	beq.n	8004de6 <_printf_i+0x166>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	079b      	lsls	r3, r3, #30
 8004e92:	d413      	bmi.n	8004ebc <_printf_i+0x23c>
 8004e94:	68e0      	ldr	r0, [r4, #12]
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	4298      	cmp	r0, r3
 8004e9a:	bfb8      	it	lt
 8004e9c:	4618      	movlt	r0, r3
 8004e9e:	e7a4      	b.n	8004dea <_printf_i+0x16a>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	47d0      	blx	sl
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d09b      	beq.n	8004de6 <_printf_i+0x166>
 8004eae:	3501      	adds	r5, #1
 8004eb0:	68e3      	ldr	r3, [r4, #12]
 8004eb2:	9903      	ldr	r1, [sp, #12]
 8004eb4:	1a5b      	subs	r3, r3, r1
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	dcf2      	bgt.n	8004ea0 <_printf_i+0x220>
 8004eba:	e7eb      	b.n	8004e94 <_printf_i+0x214>
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	f104 0619 	add.w	r6, r4, #25
 8004ec2:	e7f5      	b.n	8004eb0 <_printf_i+0x230>
 8004ec4:	08007306 	.word	0x08007306
 8004ec8:	08007317 	.word	0x08007317

08004ecc <iprintf>:
 8004ecc:	b40f      	push	{r0, r1, r2, r3}
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <iprintf+0x2c>)
 8004ed0:	b513      	push	{r0, r1, r4, lr}
 8004ed2:	681c      	ldr	r4, [r3, #0]
 8004ed4:	b124      	cbz	r4, 8004ee0 <iprintf+0x14>
 8004ed6:	69a3      	ldr	r3, [r4, #24]
 8004ed8:	b913      	cbnz	r3, 8004ee0 <iprintf+0x14>
 8004eda:	4620      	mov	r0, r4
 8004edc:	f001 f910 	bl	8006100 <__sinit>
 8004ee0:	ab05      	add	r3, sp, #20
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	68a1      	ldr	r1, [r4, #8]
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	f001 fe95 	bl	8006c18 <_vfiprintf_r>
 8004eee:	b002      	add	sp, #8
 8004ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef4:	b004      	add	sp, #16
 8004ef6:	4770      	bx	lr
 8004ef8:	2000000c 	.word	0x2000000c

08004efc <putchar>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <putchar+0x24>)
 8004f00:	4605      	mov	r5, r0
 8004f02:	681c      	ldr	r4, [r3, #0]
 8004f04:	b124      	cbz	r4, 8004f10 <putchar+0x14>
 8004f06:	69a3      	ldr	r3, [r4, #24]
 8004f08:	b913      	cbnz	r3, 8004f10 <putchar+0x14>
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f001 f8f8 	bl	8006100 <__sinit>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4620      	mov	r0, r4
 8004f14:	68a2      	ldr	r2, [r4, #8]
 8004f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f1a:	f001 bfad 	b.w	8006e78 <_putc_r>
 8004f1e:	bf00      	nop
 8004f20:	2000000c 	.word	0x2000000c

08004f24 <_puts_r>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	460e      	mov	r6, r1
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b118      	cbz	r0, 8004f34 <_puts_r+0x10>
 8004f2c:	6983      	ldr	r3, [r0, #24]
 8004f2e:	b90b      	cbnz	r3, 8004f34 <_puts_r+0x10>
 8004f30:	f001 f8e6 	bl	8006100 <__sinit>
 8004f34:	69ab      	ldr	r3, [r5, #24]
 8004f36:	68ac      	ldr	r4, [r5, #8]
 8004f38:	b913      	cbnz	r3, 8004f40 <_puts_r+0x1c>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f001 f8e0 	bl	8006100 <__sinit>
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <_puts_r+0xd0>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d120      	bne.n	8004f88 <_puts_r+0x64>
 8004f46:	686c      	ldr	r4, [r5, #4]
 8004f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f4a:	07db      	lsls	r3, r3, #31
 8004f4c:	d405      	bmi.n	8004f5a <_puts_r+0x36>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	0598      	lsls	r0, r3, #22
 8004f52:	d402      	bmi.n	8004f5a <_puts_r+0x36>
 8004f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f56:	f001 f976 	bl	8006246 <__retarget_lock_acquire_recursive>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	0719      	lsls	r1, r3, #28
 8004f5e:	d51d      	bpl.n	8004f9c <_puts_r+0x78>
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	b1db      	cbz	r3, 8004f9c <_puts_r+0x78>
 8004f64:	3e01      	subs	r6, #1
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	60a3      	str	r3, [r4, #8]
 8004f70:	bb39      	cbnz	r1, 8004fc2 <_puts_r+0x9e>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da38      	bge.n	8004fe8 <_puts_r+0xc4>
 8004f76:	4622      	mov	r2, r4
 8004f78:	210a      	movs	r1, #10
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f868 	bl	8005050 <__swbuf_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d011      	beq.n	8004fa8 <_puts_r+0x84>
 8004f84:	250a      	movs	r5, #10
 8004f86:	e011      	b.n	8004fac <_puts_r+0x88>
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <_puts_r+0xd4>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d101      	bne.n	8004f92 <_puts_r+0x6e>
 8004f8e:	68ac      	ldr	r4, [r5, #8]
 8004f90:	e7da      	b.n	8004f48 <_puts_r+0x24>
 8004f92:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <_puts_r+0xd8>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	bf08      	it	eq
 8004f98:	68ec      	ldreq	r4, [r5, #12]
 8004f9a:	e7d5      	b.n	8004f48 <_puts_r+0x24>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 f8a8 	bl	80050f4 <__swsetup_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d0dd      	beq.n	8004f64 <_puts_r+0x40>
 8004fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d405      	bmi.n	8004fbe <_puts_r+0x9a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	059b      	lsls	r3, r3, #22
 8004fb6:	d402      	bmi.n	8004fbe <_puts_r+0x9a>
 8004fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fba:	f001 f945 	bl	8006248 <__retarget_lock_release_recursive>
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da04      	bge.n	8004fd0 <_puts_r+0xac>
 8004fc6:	69a2      	ldr	r2, [r4, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	dc06      	bgt.n	8004fda <_puts_r+0xb6>
 8004fcc:	290a      	cmp	r1, #10
 8004fce:	d004      	beq.n	8004fda <_puts_r+0xb6>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	7019      	strb	r1, [r3, #0]
 8004fd8:	e7c5      	b.n	8004f66 <_puts_r+0x42>
 8004fda:	4622      	mov	r2, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 f837 	bl	8005050 <__swbuf_r>
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d1bf      	bne.n	8004f66 <_puts_r+0x42>
 8004fe6:	e7df      	b.n	8004fa8 <_puts_r+0x84>
 8004fe8:	250a      	movs	r5, #10
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	701d      	strb	r5, [r3, #0]
 8004ff2:	e7db      	b.n	8004fac <_puts_r+0x88>
 8004ff4:	080073dc 	.word	0x080073dc
 8004ff8:	080073fc 	.word	0x080073fc
 8004ffc:	080073bc 	.word	0x080073bc

08005000 <puts>:
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <puts+0xc>)
 8005002:	4601      	mov	r1, r0
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f7ff bf8d 	b.w	8004f24 <_puts_r>
 800500a:	bf00      	nop
 800500c:	2000000c 	.word	0x2000000c

08005010 <strcpy>:
 8005010:	4603      	mov	r3, r0
 8005012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005016:	f803 2b01 	strb.w	r2, [r3], #1
 800501a:	2a00      	cmp	r2, #0
 800501c:	d1f9      	bne.n	8005012 <strcpy+0x2>
 800501e:	4770      	bx	lr

08005020 <strstr>:
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	780c      	ldrb	r4, [r1, #0]
 8005024:	b164      	cbz	r4, 8005040 <strstr+0x20>
 8005026:	4603      	mov	r3, r0
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	1c5e      	adds	r6, r3, #1
 800502e:	b90a      	cbnz	r2, 8005034 <strstr+0x14>
 8005030:	4610      	mov	r0, r2
 8005032:	e005      	b.n	8005040 <strstr+0x20>
 8005034:	4294      	cmp	r4, r2
 8005036:	d108      	bne.n	800504a <strstr+0x2a>
 8005038:	460d      	mov	r5, r1
 800503a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800503e:	b902      	cbnz	r2, 8005042 <strstr+0x22>
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005046:	4297      	cmp	r7, r2
 8005048:	d0f7      	beq.n	800503a <strstr+0x1a>
 800504a:	4633      	mov	r3, r6
 800504c:	e7ec      	b.n	8005028 <strstr+0x8>
	...

08005050 <__swbuf_r>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	460e      	mov	r6, r1
 8005054:	4614      	mov	r4, r2
 8005056:	4605      	mov	r5, r0
 8005058:	b118      	cbz	r0, 8005062 <__swbuf_r+0x12>
 800505a:	6983      	ldr	r3, [r0, #24]
 800505c:	b90b      	cbnz	r3, 8005062 <__swbuf_r+0x12>
 800505e:	f001 f84f 	bl	8006100 <__sinit>
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <__swbuf_r+0x98>)
 8005064:	429c      	cmp	r4, r3
 8005066:	d12b      	bne.n	80050c0 <__swbuf_r+0x70>
 8005068:	686c      	ldr	r4, [r5, #4]
 800506a:	69a3      	ldr	r3, [r4, #24]
 800506c:	60a3      	str	r3, [r4, #8]
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	071a      	lsls	r2, r3, #28
 8005072:	d52f      	bpl.n	80050d4 <__swbuf_r+0x84>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	b36b      	cbz	r3, 80050d4 <__swbuf_r+0x84>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	6820      	ldr	r0, [r4, #0]
 800507c:	b2f6      	uxtb	r6, r6
 800507e:	1ac0      	subs	r0, r0, r3
 8005080:	6963      	ldr	r3, [r4, #20]
 8005082:	4637      	mov	r7, r6
 8005084:	4283      	cmp	r3, r0
 8005086:	dc04      	bgt.n	8005092 <__swbuf_r+0x42>
 8005088:	4621      	mov	r1, r4
 800508a:	4628      	mov	r0, r5
 800508c:	f000 ffa4 	bl	8005fd8 <_fflush_r>
 8005090:	bb30      	cbnz	r0, 80050e0 <__swbuf_r+0x90>
 8005092:	68a3      	ldr	r3, [r4, #8]
 8005094:	3001      	adds	r0, #1
 8005096:	3b01      	subs	r3, #1
 8005098:	60a3      	str	r3, [r4, #8]
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	701e      	strb	r6, [r3, #0]
 80050a2:	6963      	ldr	r3, [r4, #20]
 80050a4:	4283      	cmp	r3, r0
 80050a6:	d004      	beq.n	80050b2 <__swbuf_r+0x62>
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	07db      	lsls	r3, r3, #31
 80050ac:	d506      	bpl.n	80050bc <__swbuf_r+0x6c>
 80050ae:	2e0a      	cmp	r6, #10
 80050b0:	d104      	bne.n	80050bc <__swbuf_r+0x6c>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 ff8f 	bl	8005fd8 <_fflush_r>
 80050ba:	b988      	cbnz	r0, 80050e0 <__swbuf_r+0x90>
 80050bc:	4638      	mov	r0, r7
 80050be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <__swbuf_r+0x9c>)
 80050c2:	429c      	cmp	r4, r3
 80050c4:	d101      	bne.n	80050ca <__swbuf_r+0x7a>
 80050c6:	68ac      	ldr	r4, [r5, #8]
 80050c8:	e7cf      	b.n	800506a <__swbuf_r+0x1a>
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <__swbuf_r+0xa0>)
 80050cc:	429c      	cmp	r4, r3
 80050ce:	bf08      	it	eq
 80050d0:	68ec      	ldreq	r4, [r5, #12]
 80050d2:	e7ca      	b.n	800506a <__swbuf_r+0x1a>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 f80c 	bl	80050f4 <__swsetup_r>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d0cb      	beq.n	8005078 <__swbuf_r+0x28>
 80050e0:	f04f 37ff 	mov.w	r7, #4294967295
 80050e4:	e7ea      	b.n	80050bc <__swbuf_r+0x6c>
 80050e6:	bf00      	nop
 80050e8:	080073dc 	.word	0x080073dc
 80050ec:	080073fc 	.word	0x080073fc
 80050f0:	080073bc 	.word	0x080073bc

080050f4 <__swsetup_r>:
 80050f4:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <__swsetup_r+0xcc>)
 80050f6:	b570      	push	{r4, r5, r6, lr}
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	4606      	mov	r6, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	b125      	cbz	r5, 800510a <__swsetup_r+0x16>
 8005100:	69ab      	ldr	r3, [r5, #24]
 8005102:	b913      	cbnz	r3, 800510a <__swsetup_r+0x16>
 8005104:	4628      	mov	r0, r5
 8005106:	f000 fffb 	bl	8006100 <__sinit>
 800510a:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <__swsetup_r+0xd0>)
 800510c:	429c      	cmp	r4, r3
 800510e:	d10f      	bne.n	8005130 <__swsetup_r+0x3c>
 8005110:	686c      	ldr	r4, [r5, #4]
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005118:	0719      	lsls	r1, r3, #28
 800511a:	d42c      	bmi.n	8005176 <__swsetup_r+0x82>
 800511c:	06dd      	lsls	r5, r3, #27
 800511e:	d411      	bmi.n	8005144 <__swsetup_r+0x50>
 8005120:	2309      	movs	r3, #9
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	e03e      	b.n	80051ae <__swsetup_r+0xba>
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <__swsetup_r+0xd4>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d101      	bne.n	800513a <__swsetup_r+0x46>
 8005136:	68ac      	ldr	r4, [r5, #8]
 8005138:	e7eb      	b.n	8005112 <__swsetup_r+0x1e>
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <__swsetup_r+0xd8>)
 800513c:	429c      	cmp	r4, r3
 800513e:	bf08      	it	eq
 8005140:	68ec      	ldreq	r4, [r5, #12]
 8005142:	e7e6      	b.n	8005112 <__swsetup_r+0x1e>
 8005144:	0758      	lsls	r0, r3, #29
 8005146:	d512      	bpl.n	800516e <__swsetup_r+0x7a>
 8005148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800514a:	b141      	cbz	r1, 800515e <__swsetup_r+0x6a>
 800514c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005150:	4299      	cmp	r1, r3
 8005152:	d002      	beq.n	800515a <__swsetup_r+0x66>
 8005154:	4630      	mov	r0, r6
 8005156:	f001 fc91 	bl	8006a7c <_free_r>
 800515a:	2300      	movs	r3, #0
 800515c:	6363      	str	r3, [r4, #52]	; 0x34
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	2300      	movs	r3, #0
 8005168:	6063      	str	r3, [r4, #4]
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f043 0308 	orr.w	r3, r3, #8
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	b94b      	cbnz	r3, 800518e <__swsetup_r+0x9a>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005184:	d003      	beq.n	800518e <__swsetup_r+0x9a>
 8005186:	4621      	mov	r1, r4
 8005188:	4630      	mov	r0, r6
 800518a:	f001 f883 	bl	8006294 <__smakebuf_r>
 800518e:	89a0      	ldrh	r0, [r4, #12]
 8005190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005194:	f010 0301 	ands.w	r3, r0, #1
 8005198:	d00a      	beq.n	80051b0 <__swsetup_r+0xbc>
 800519a:	2300      	movs	r3, #0
 800519c:	60a3      	str	r3, [r4, #8]
 800519e:	6963      	ldr	r3, [r4, #20]
 80051a0:	425b      	negs	r3, r3
 80051a2:	61a3      	str	r3, [r4, #24]
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	b943      	cbnz	r3, 80051ba <__swsetup_r+0xc6>
 80051a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051ac:	d1ba      	bne.n	8005124 <__swsetup_r+0x30>
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	0781      	lsls	r1, r0, #30
 80051b2:	bf58      	it	pl
 80051b4:	6963      	ldrpl	r3, [r4, #20]
 80051b6:	60a3      	str	r3, [r4, #8]
 80051b8:	e7f4      	b.n	80051a4 <__swsetup_r+0xb0>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e7f7      	b.n	80051ae <__swsetup_r+0xba>
 80051be:	bf00      	nop
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	080073dc 	.word	0x080073dc
 80051c8:	080073fc 	.word	0x080073fc
 80051cc:	080073bc 	.word	0x080073bc

080051d0 <quorem>:
 80051d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	6903      	ldr	r3, [r0, #16]
 80051d6:	690c      	ldr	r4, [r1, #16]
 80051d8:	4607      	mov	r7, r0
 80051da:	42a3      	cmp	r3, r4
 80051dc:	f2c0 8083 	blt.w	80052e6 <quorem+0x116>
 80051e0:	3c01      	subs	r4, #1
 80051e2:	f100 0514 	add.w	r5, r0, #20
 80051e6:	f101 0814 	add.w	r8, r1, #20
 80051ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051f8:	3301      	adds	r3, #1
 80051fa:	429a      	cmp	r2, r3
 80051fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005200:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005204:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005208:	d332      	bcc.n	8005270 <quorem+0xa0>
 800520a:	f04f 0e00 	mov.w	lr, #0
 800520e:	4640      	mov	r0, r8
 8005210:	46ac      	mov	ip, r5
 8005212:	46f2      	mov	sl, lr
 8005214:	f850 2b04 	ldr.w	r2, [r0], #4
 8005218:	b293      	uxth	r3, r2
 800521a:	fb06 e303 	mla	r3, r6, r3, lr
 800521e:	0c12      	lsrs	r2, r2, #16
 8005220:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005224:	fb06 e202 	mla	r2, r6, r2, lr
 8005228:	b29b      	uxth	r3, r3
 800522a:	ebaa 0303 	sub.w	r3, sl, r3
 800522e:	f8dc a000 	ldr.w	sl, [ip]
 8005232:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005236:	fa1f fa8a 	uxth.w	sl, sl
 800523a:	4453      	add	r3, sl
 800523c:	fa1f fa82 	uxth.w	sl, r2
 8005240:	f8dc 2000 	ldr.w	r2, [ip]
 8005244:	4581      	cmp	r9, r0
 8005246:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800524a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800524e:	b29b      	uxth	r3, r3
 8005250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005254:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005258:	f84c 3b04 	str.w	r3, [ip], #4
 800525c:	d2da      	bcs.n	8005214 <quorem+0x44>
 800525e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005262:	b92b      	cbnz	r3, 8005270 <quorem+0xa0>
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	3b04      	subs	r3, #4
 8005268:	429d      	cmp	r5, r3
 800526a:	461a      	mov	r2, r3
 800526c:	d32f      	bcc.n	80052ce <quorem+0xfe>
 800526e:	613c      	str	r4, [r7, #16]
 8005270:	4638      	mov	r0, r7
 8005272:	f001 faed 	bl	8006850 <__mcmp>
 8005276:	2800      	cmp	r0, #0
 8005278:	db25      	blt.n	80052c6 <quorem+0xf6>
 800527a:	4628      	mov	r0, r5
 800527c:	f04f 0c00 	mov.w	ip, #0
 8005280:	3601      	adds	r6, #1
 8005282:	f858 1b04 	ldr.w	r1, [r8], #4
 8005286:	f8d0 e000 	ldr.w	lr, [r0]
 800528a:	b28b      	uxth	r3, r1
 800528c:	ebac 0303 	sub.w	r3, ip, r3
 8005290:	fa1f f28e 	uxth.w	r2, lr
 8005294:	4413      	add	r3, r2
 8005296:	0c0a      	lsrs	r2, r1, #16
 8005298:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800529c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a6:	45c1      	cmp	r9, r8
 80052a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052ac:	f840 3b04 	str.w	r3, [r0], #4
 80052b0:	d2e7      	bcs.n	8005282 <quorem+0xb2>
 80052b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ba:	b922      	cbnz	r2, 80052c6 <quorem+0xf6>
 80052bc:	3b04      	subs	r3, #4
 80052be:	429d      	cmp	r5, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	d30a      	bcc.n	80052da <quorem+0x10a>
 80052c4:	613c      	str	r4, [r7, #16]
 80052c6:	4630      	mov	r0, r6
 80052c8:	b003      	add	sp, #12
 80052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	3b04      	subs	r3, #4
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	d1cb      	bne.n	800526e <quorem+0x9e>
 80052d6:	3c01      	subs	r4, #1
 80052d8:	e7c6      	b.n	8005268 <quorem+0x98>
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	3b04      	subs	r3, #4
 80052de:	2a00      	cmp	r2, #0
 80052e0:	d1f0      	bne.n	80052c4 <quorem+0xf4>
 80052e2:	3c01      	subs	r4, #1
 80052e4:	e7eb      	b.n	80052be <quorem+0xee>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e7ee      	b.n	80052c8 <quorem+0xf8>
 80052ea:	0000      	movs	r0, r0
 80052ec:	0000      	movs	r0, r0
	...

080052f0 <_dtoa_r>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	4616      	mov	r6, r2
 80052f6:	461f      	mov	r7, r3
 80052f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80052fa:	b099      	sub	sp, #100	; 0x64
 80052fc:	4605      	mov	r5, r0
 80052fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005302:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005306:	b974      	cbnz	r4, 8005326 <_dtoa_r+0x36>
 8005308:	2010      	movs	r0, #16
 800530a:	f001 f803 	bl	8006314 <malloc>
 800530e:	4602      	mov	r2, r0
 8005310:	6268      	str	r0, [r5, #36]	; 0x24
 8005312:	b920      	cbnz	r0, 800531e <_dtoa_r+0x2e>
 8005314:	21ea      	movs	r1, #234	; 0xea
 8005316:	4bae      	ldr	r3, [pc, #696]	; (80055d0 <_dtoa_r+0x2e0>)
 8005318:	48ae      	ldr	r0, [pc, #696]	; (80055d4 <_dtoa_r+0x2e4>)
 800531a:	f001 fe5b 	bl	8006fd4 <__assert_func>
 800531e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005322:	6004      	str	r4, [r0, #0]
 8005324:	60c4      	str	r4, [r0, #12]
 8005326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005328:	6819      	ldr	r1, [r3, #0]
 800532a:	b151      	cbz	r1, 8005342 <_dtoa_r+0x52>
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	2301      	movs	r3, #1
 8005330:	4093      	lsls	r3, r2
 8005332:	604a      	str	r2, [r1, #4]
 8005334:	608b      	str	r3, [r1, #8]
 8005336:	4628      	mov	r0, r5
 8005338:	f001 f850 	bl	80063dc <_Bfree>
 800533c:	2200      	movs	r2, #0
 800533e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	1e3b      	subs	r3, r7, #0
 8005344:	bfaf      	iteee	ge
 8005346:	2300      	movge	r3, #0
 8005348:	2201      	movlt	r2, #1
 800534a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800534e:	9305      	strlt	r3, [sp, #20]
 8005350:	bfa8      	it	ge
 8005352:	f8c8 3000 	strge.w	r3, [r8]
 8005356:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800535a:	4b9f      	ldr	r3, [pc, #636]	; (80055d8 <_dtoa_r+0x2e8>)
 800535c:	bfb8      	it	lt
 800535e:	f8c8 2000 	strlt.w	r2, [r8]
 8005362:	ea33 0309 	bics.w	r3, r3, r9
 8005366:	d119      	bne.n	800539c <_dtoa_r+0xac>
 8005368:	f242 730f 	movw	r3, #9999	; 0x270f
 800536c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005374:	4333      	orrs	r3, r6
 8005376:	f000 8580 	beq.w	8005e7a <_dtoa_r+0xb8a>
 800537a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800537c:	b953      	cbnz	r3, 8005394 <_dtoa_r+0xa4>
 800537e:	4b97      	ldr	r3, [pc, #604]	; (80055dc <_dtoa_r+0x2ec>)
 8005380:	e022      	b.n	80053c8 <_dtoa_r+0xd8>
 8005382:	4b97      	ldr	r3, [pc, #604]	; (80055e0 <_dtoa_r+0x2f0>)
 8005384:	9308      	str	r3, [sp, #32]
 8005386:	3308      	adds	r3, #8
 8005388:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	9808      	ldr	r0, [sp, #32]
 800538e:	b019      	add	sp, #100	; 0x64
 8005390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005394:	4b91      	ldr	r3, [pc, #580]	; (80055dc <_dtoa_r+0x2ec>)
 8005396:	9308      	str	r3, [sp, #32]
 8005398:	3303      	adds	r3, #3
 800539a:	e7f5      	b.n	8005388 <_dtoa_r+0x98>
 800539c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80053a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053a8:	2200      	movs	r2, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	f7fb fbb0 	bl	8000b10 <__aeabi_dcmpeq>
 80053b0:	4680      	mov	r8, r0
 80053b2:	b158      	cbz	r0, 80053cc <_dtoa_r+0xdc>
 80053b4:	2301      	movs	r3, #1
 80053b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8559 	beq.w	8005e74 <_dtoa_r+0xb84>
 80053c2:	4888      	ldr	r0, [pc, #544]	; (80055e4 <_dtoa_r+0x2f4>)
 80053c4:	6018      	str	r0, [r3, #0]
 80053c6:	1e43      	subs	r3, r0, #1
 80053c8:	9308      	str	r3, [sp, #32]
 80053ca:	e7df      	b.n	800538c <_dtoa_r+0x9c>
 80053cc:	ab16      	add	r3, sp, #88	; 0x58
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	ab17      	add	r3, sp, #92	; 0x5c
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4628      	mov	r0, r5
 80053d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053da:	f001 fae5 	bl	80069a8 <__d2b>
 80053de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053e2:	4682      	mov	sl, r0
 80053e4:	2c00      	cmp	r4, #0
 80053e6:	d07e      	beq.n	80054e6 <_dtoa_r+0x1f6>
 80053e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80053fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80053fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005402:	2200      	movs	r2, #0
 8005404:	4b78      	ldr	r3, [pc, #480]	; (80055e8 <_dtoa_r+0x2f8>)
 8005406:	f7fa ff63 	bl	80002d0 <__aeabi_dsub>
 800540a:	a36b      	add	r3, pc, #428	; (adr r3, 80055b8 <_dtoa_r+0x2c8>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fb f916 	bl	8000640 <__aeabi_dmul>
 8005414:	a36a      	add	r3, pc, #424	; (adr r3, 80055c0 <_dtoa_r+0x2d0>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fa ff5b 	bl	80002d4 <__adddf3>
 800541e:	4606      	mov	r6, r0
 8005420:	4620      	mov	r0, r4
 8005422:	460f      	mov	r7, r1
 8005424:	f7fb f8a2 	bl	800056c <__aeabi_i2d>
 8005428:	a367      	add	r3, pc, #412	; (adr r3, 80055c8 <_dtoa_r+0x2d8>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fb f907 	bl	8000640 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4630      	mov	r0, r6
 8005438:	4639      	mov	r1, r7
 800543a:	f7fa ff4b 	bl	80002d4 <__adddf3>
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	f7fb fbad 	bl	8000ba0 <__aeabi_d2iz>
 8005446:	2200      	movs	r2, #0
 8005448:	4681      	mov	r9, r0
 800544a:	2300      	movs	r3, #0
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb fb68 	bl	8000b24 <__aeabi_dcmplt>
 8005454:	b148      	cbz	r0, 800546a <_dtoa_r+0x17a>
 8005456:	4648      	mov	r0, r9
 8005458:	f7fb f888 	bl	800056c <__aeabi_i2d>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	f7fb fb56 	bl	8000b10 <__aeabi_dcmpeq>
 8005464:	b908      	cbnz	r0, 800546a <_dtoa_r+0x17a>
 8005466:	f109 39ff 	add.w	r9, r9, #4294967295
 800546a:	f1b9 0f16 	cmp.w	r9, #22
 800546e:	d857      	bhi.n	8005520 <_dtoa_r+0x230>
 8005470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005474:	4b5d      	ldr	r3, [pc, #372]	; (80055ec <_dtoa_r+0x2fc>)
 8005476:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	f7fb fb51 	bl	8000b24 <__aeabi_dcmplt>
 8005482:	2800      	cmp	r0, #0
 8005484:	d04e      	beq.n	8005524 <_dtoa_r+0x234>
 8005486:	2300      	movs	r3, #0
 8005488:	f109 39ff 	add.w	r9, r9, #4294967295
 800548c:	930f      	str	r3, [sp, #60]	; 0x3c
 800548e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005490:	1b1c      	subs	r4, r3, r4
 8005492:	1e63      	subs	r3, r4, #1
 8005494:	9309      	str	r3, [sp, #36]	; 0x24
 8005496:	bf49      	itett	mi
 8005498:	f1c4 0301 	rsbmi	r3, r4, #1
 800549c:	2300      	movpl	r3, #0
 800549e:	9306      	strmi	r3, [sp, #24]
 80054a0:	2300      	movmi	r3, #0
 80054a2:	bf54      	ite	pl
 80054a4:	9306      	strpl	r3, [sp, #24]
 80054a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80054a8:	f1b9 0f00 	cmp.w	r9, #0
 80054ac:	db3c      	blt.n	8005528 <_dtoa_r+0x238>
 80054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80054b4:	444b      	add	r3, r9
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	2300      	movs	r3, #0
 80054ba:	930a      	str	r3, [sp, #40]	; 0x28
 80054bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d86c      	bhi.n	800559c <_dtoa_r+0x2ac>
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	bfc4      	itt	gt
 80054c6:	3b04      	subgt	r3, #4
 80054c8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80054ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054cc:	bfc8      	it	gt
 80054ce:	2400      	movgt	r4, #0
 80054d0:	f1a3 0302 	sub.w	r3, r3, #2
 80054d4:	bfd8      	it	le
 80054d6:	2401      	movle	r4, #1
 80054d8:	2b03      	cmp	r3, #3
 80054da:	f200 808b 	bhi.w	80055f4 <_dtoa_r+0x304>
 80054de:	e8df f003 	tbb	[pc, r3]
 80054e2:	4f2d      	.short	0x4f2d
 80054e4:	5b4d      	.short	0x5b4d
 80054e6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054ea:	441c      	add	r4, r3
 80054ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	bfc3      	ittte	gt
 80054f4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054f8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80054fc:	fa09 f303 	lslgt.w	r3, r9, r3
 8005500:	f1c3 0320 	rsble	r3, r3, #32
 8005504:	bfc6      	itte	gt
 8005506:	fa26 f000 	lsrgt.w	r0, r6, r0
 800550a:	4318      	orrgt	r0, r3
 800550c:	fa06 f003 	lslle.w	r0, r6, r3
 8005510:	f7fb f81c 	bl	800054c <__aeabi_ui2d>
 8005514:	2301      	movs	r3, #1
 8005516:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800551a:	3c01      	subs	r4, #1
 800551c:	9313      	str	r3, [sp, #76]	; 0x4c
 800551e:	e770      	b.n	8005402 <_dtoa_r+0x112>
 8005520:	2301      	movs	r3, #1
 8005522:	e7b3      	b.n	800548c <_dtoa_r+0x19c>
 8005524:	900f      	str	r0, [sp, #60]	; 0x3c
 8005526:	e7b2      	b.n	800548e <_dtoa_r+0x19e>
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	eba3 0309 	sub.w	r3, r3, r9
 800552e:	9306      	str	r3, [sp, #24]
 8005530:	f1c9 0300 	rsb	r3, r9, #0
 8005534:	930a      	str	r3, [sp, #40]	; 0x28
 8005536:	2300      	movs	r3, #0
 8005538:	930e      	str	r3, [sp, #56]	; 0x38
 800553a:	e7bf      	b.n	80054bc <_dtoa_r+0x1cc>
 800553c:	2300      	movs	r3, #0
 800553e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005540:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005542:	2b00      	cmp	r3, #0
 8005544:	dc59      	bgt.n	80055fa <_dtoa_r+0x30a>
 8005546:	f04f 0b01 	mov.w	fp, #1
 800554a:	465b      	mov	r3, fp
 800554c:	f8cd b008 	str.w	fp, [sp, #8]
 8005550:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005554:	2200      	movs	r2, #0
 8005556:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005558:	6042      	str	r2, [r0, #4]
 800555a:	2204      	movs	r2, #4
 800555c:	f102 0614 	add.w	r6, r2, #20
 8005560:	429e      	cmp	r6, r3
 8005562:	6841      	ldr	r1, [r0, #4]
 8005564:	d94f      	bls.n	8005606 <_dtoa_r+0x316>
 8005566:	4628      	mov	r0, r5
 8005568:	f000 fef8 	bl	800635c <_Balloc>
 800556c:	9008      	str	r0, [sp, #32]
 800556e:	2800      	cmp	r0, #0
 8005570:	d14d      	bne.n	800560e <_dtoa_r+0x31e>
 8005572:	4602      	mov	r2, r0
 8005574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <_dtoa_r+0x300>)
 800557a:	e6cd      	b.n	8005318 <_dtoa_r+0x28>
 800557c:	2301      	movs	r3, #1
 800557e:	e7de      	b.n	800553e <_dtoa_r+0x24e>
 8005580:	2300      	movs	r3, #0
 8005582:	930b      	str	r3, [sp, #44]	; 0x2c
 8005584:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005586:	eb09 0b03 	add.w	fp, r9, r3
 800558a:	f10b 0301 	add.w	r3, fp, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	bfb8      	it	lt
 8005594:	2301      	movlt	r3, #1
 8005596:	e7dd      	b.n	8005554 <_dtoa_r+0x264>
 8005598:	2301      	movs	r3, #1
 800559a:	e7f2      	b.n	8005582 <_dtoa_r+0x292>
 800559c:	2401      	movs	r4, #1
 800559e:	2300      	movs	r3, #0
 80055a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80055a2:	9322      	str	r3, [sp, #136]	; 0x88
 80055a4:	f04f 3bff 	mov.w	fp, #4294967295
 80055a8:	2200      	movs	r2, #0
 80055aa:	2312      	movs	r3, #18
 80055ac:	f8cd b008 	str.w	fp, [sp, #8]
 80055b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80055b2:	e7cf      	b.n	8005554 <_dtoa_r+0x264>
 80055b4:	f3af 8000 	nop.w
 80055b8:	636f4361 	.word	0x636f4361
 80055bc:	3fd287a7 	.word	0x3fd287a7
 80055c0:	8b60c8b3 	.word	0x8b60c8b3
 80055c4:	3fc68a28 	.word	0x3fc68a28
 80055c8:	509f79fb 	.word	0x509f79fb
 80055cc:	3fd34413 	.word	0x3fd34413
 80055d0:	08007335 	.word	0x08007335
 80055d4:	0800734c 	.word	0x0800734c
 80055d8:	7ff00000 	.word	0x7ff00000
 80055dc:	08007331 	.word	0x08007331
 80055e0:	08007328 	.word	0x08007328
 80055e4:	08007305 	.word	0x08007305
 80055e8:	3ff80000 	.word	0x3ff80000
 80055ec:	080074a8 	.word	0x080074a8
 80055f0:	080073ab 	.word	0x080073ab
 80055f4:	2301      	movs	r3, #1
 80055f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055f8:	e7d4      	b.n	80055a4 <_dtoa_r+0x2b4>
 80055fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80055fe:	465b      	mov	r3, fp
 8005600:	f8cd b008 	str.w	fp, [sp, #8]
 8005604:	e7a6      	b.n	8005554 <_dtoa_r+0x264>
 8005606:	3101      	adds	r1, #1
 8005608:	6041      	str	r1, [r0, #4]
 800560a:	0052      	lsls	r2, r2, #1
 800560c:	e7a6      	b.n	800555c <_dtoa_r+0x26c>
 800560e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005610:	9a08      	ldr	r2, [sp, #32]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	2b0e      	cmp	r3, #14
 8005618:	f200 80a8 	bhi.w	800576c <_dtoa_r+0x47c>
 800561c:	2c00      	cmp	r4, #0
 800561e:	f000 80a5 	beq.w	800576c <_dtoa_r+0x47c>
 8005622:	f1b9 0f00 	cmp.w	r9, #0
 8005626:	dd34      	ble.n	8005692 <_dtoa_r+0x3a2>
 8005628:	4a9a      	ldr	r2, [pc, #616]	; (8005894 <_dtoa_r+0x5a4>)
 800562a:	f009 030f 	and.w	r3, r9, #15
 800562e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005632:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005636:	e9d3 3400 	ldrd	r3, r4, [r3]
 800563a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800563e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005642:	d016      	beq.n	8005672 <_dtoa_r+0x382>
 8005644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005648:	4b93      	ldr	r3, [pc, #588]	; (8005898 <_dtoa_r+0x5a8>)
 800564a:	2703      	movs	r7, #3
 800564c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005650:	f7fb f920 	bl	8000894 <__aeabi_ddiv>
 8005654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005658:	f004 040f 	and.w	r4, r4, #15
 800565c:	4e8e      	ldr	r6, [pc, #568]	; (8005898 <_dtoa_r+0x5a8>)
 800565e:	b954      	cbnz	r4, 8005676 <_dtoa_r+0x386>
 8005660:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005668:	f7fb f914 	bl	8000894 <__aeabi_ddiv>
 800566c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005670:	e029      	b.n	80056c6 <_dtoa_r+0x3d6>
 8005672:	2702      	movs	r7, #2
 8005674:	e7f2      	b.n	800565c <_dtoa_r+0x36c>
 8005676:	07e1      	lsls	r1, r4, #31
 8005678:	d508      	bpl.n	800568c <_dtoa_r+0x39c>
 800567a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800567e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005682:	f7fa ffdd 	bl	8000640 <__aeabi_dmul>
 8005686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800568a:	3701      	adds	r7, #1
 800568c:	1064      	asrs	r4, r4, #1
 800568e:	3608      	adds	r6, #8
 8005690:	e7e5      	b.n	800565e <_dtoa_r+0x36e>
 8005692:	f000 80a5 	beq.w	80057e0 <_dtoa_r+0x4f0>
 8005696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800569a:	f1c9 0400 	rsb	r4, r9, #0
 800569e:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <_dtoa_r+0x5a4>)
 80056a0:	f004 020f 	and.w	r2, r4, #15
 80056a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f7fa ffc8 	bl	8000640 <__aeabi_dmul>
 80056b0:	2702      	movs	r7, #2
 80056b2:	2300      	movs	r3, #0
 80056b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056b8:	4e77      	ldr	r6, [pc, #476]	; (8005898 <_dtoa_r+0x5a8>)
 80056ba:	1124      	asrs	r4, r4, #4
 80056bc:	2c00      	cmp	r4, #0
 80056be:	f040 8084 	bne.w	80057ca <_dtoa_r+0x4da>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1d2      	bne.n	800566c <_dtoa_r+0x37c>
 80056c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 808b 	beq.w	80057e4 <_dtoa_r+0x4f4>
 80056ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056da:	2200      	movs	r2, #0
 80056dc:	4b6f      	ldr	r3, [pc, #444]	; (800589c <_dtoa_r+0x5ac>)
 80056de:	f7fb fa21 	bl	8000b24 <__aeabi_dcmplt>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d07e      	beq.n	80057e4 <_dtoa_r+0x4f4>
 80056e6:	9b02      	ldr	r3, [sp, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d07b      	beq.n	80057e4 <_dtoa_r+0x4f4>
 80056ec:	f1bb 0f00 	cmp.w	fp, #0
 80056f0:	dd38      	ble.n	8005764 <_dtoa_r+0x474>
 80056f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056f6:	2200      	movs	r2, #0
 80056f8:	4b69      	ldr	r3, [pc, #420]	; (80058a0 <_dtoa_r+0x5b0>)
 80056fa:	f7fa ffa1 	bl	8000640 <__aeabi_dmul>
 80056fe:	465c      	mov	r4, fp
 8005700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005704:	f109 38ff 	add.w	r8, r9, #4294967295
 8005708:	3701      	adds	r7, #1
 800570a:	4638      	mov	r0, r7
 800570c:	f7fa ff2e 	bl	800056c <__aeabi_i2d>
 8005710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005714:	f7fa ff94 	bl	8000640 <__aeabi_dmul>
 8005718:	2200      	movs	r2, #0
 800571a:	4b62      	ldr	r3, [pc, #392]	; (80058a4 <_dtoa_r+0x5b4>)
 800571c:	f7fa fdda 	bl	80002d4 <__adddf3>
 8005720:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005724:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005728:	9611      	str	r6, [sp, #68]	; 0x44
 800572a:	2c00      	cmp	r4, #0
 800572c:	d15d      	bne.n	80057ea <_dtoa_r+0x4fa>
 800572e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005732:	2200      	movs	r2, #0
 8005734:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <_dtoa_r+0x5b8>)
 8005736:	f7fa fdcb 	bl	80002d0 <__aeabi_dsub>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005742:	4633      	mov	r3, r6
 8005744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005746:	f7fb fa0b 	bl	8000b60 <__aeabi_dcmpgt>
 800574a:	2800      	cmp	r0, #0
 800574c:	f040 829e 	bne.w	8005c8c <_dtoa_r+0x99c>
 8005750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005756:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800575a:	f7fb f9e3 	bl	8000b24 <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8292 	bne.w	8005c88 <_dtoa_r+0x998>
 8005764:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005768:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800576c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800576e:	2b00      	cmp	r3, #0
 8005770:	f2c0 8153 	blt.w	8005a1a <_dtoa_r+0x72a>
 8005774:	f1b9 0f0e 	cmp.w	r9, #14
 8005778:	f300 814f 	bgt.w	8005a1a <_dtoa_r+0x72a>
 800577c:	4b45      	ldr	r3, [pc, #276]	; (8005894 <_dtoa_r+0x5a4>)
 800577e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005782:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005786:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800578a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800578c:	2b00      	cmp	r3, #0
 800578e:	f280 80db 	bge.w	8005948 <_dtoa_r+0x658>
 8005792:	9b02      	ldr	r3, [sp, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f300 80d7 	bgt.w	8005948 <_dtoa_r+0x658>
 800579a:	f040 8274 	bne.w	8005c86 <_dtoa_r+0x996>
 800579e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a2:	2200      	movs	r2, #0
 80057a4:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <_dtoa_r+0x5b8>)
 80057a6:	f7fa ff4b 	bl	8000640 <__aeabi_dmul>
 80057aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ae:	f7fb f9cd 	bl	8000b4c <__aeabi_dcmpge>
 80057b2:	9c02      	ldr	r4, [sp, #8]
 80057b4:	4626      	mov	r6, r4
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f040 824a 	bne.w	8005c50 <_dtoa_r+0x960>
 80057bc:	2331      	movs	r3, #49	; 0x31
 80057be:	9f08      	ldr	r7, [sp, #32]
 80057c0:	f109 0901 	add.w	r9, r9, #1
 80057c4:	f807 3b01 	strb.w	r3, [r7], #1
 80057c8:	e246      	b.n	8005c58 <_dtoa_r+0x968>
 80057ca:	07e2      	lsls	r2, r4, #31
 80057cc:	d505      	bpl.n	80057da <_dtoa_r+0x4ea>
 80057ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057d2:	f7fa ff35 	bl	8000640 <__aeabi_dmul>
 80057d6:	2301      	movs	r3, #1
 80057d8:	3701      	adds	r7, #1
 80057da:	1064      	asrs	r4, r4, #1
 80057dc:	3608      	adds	r6, #8
 80057de:	e76d      	b.n	80056bc <_dtoa_r+0x3cc>
 80057e0:	2702      	movs	r7, #2
 80057e2:	e770      	b.n	80056c6 <_dtoa_r+0x3d6>
 80057e4:	46c8      	mov	r8, r9
 80057e6:	9c02      	ldr	r4, [sp, #8]
 80057e8:	e78f      	b.n	800570a <_dtoa_r+0x41a>
 80057ea:	9908      	ldr	r1, [sp, #32]
 80057ec:	4b29      	ldr	r3, [pc, #164]	; (8005894 <_dtoa_r+0x5a4>)
 80057ee:	4421      	add	r1, r4
 80057f0:	9112      	str	r1, [sp, #72]	; 0x48
 80057f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005800:	2900      	cmp	r1, #0
 8005802:	d055      	beq.n	80058b0 <_dtoa_r+0x5c0>
 8005804:	2000      	movs	r0, #0
 8005806:	4929      	ldr	r1, [pc, #164]	; (80058ac <_dtoa_r+0x5bc>)
 8005808:	f7fb f844 	bl	8000894 <__aeabi_ddiv>
 800580c:	463b      	mov	r3, r7
 800580e:	4632      	mov	r2, r6
 8005810:	f7fa fd5e 	bl	80002d0 <__aeabi_dsub>
 8005814:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005818:	9f08      	ldr	r7, [sp, #32]
 800581a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581e:	f7fb f9bf 	bl	8000ba0 <__aeabi_d2iz>
 8005822:	4604      	mov	r4, r0
 8005824:	f7fa fea2 	bl	800056c <__aeabi_i2d>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005830:	f7fa fd4e 	bl	80002d0 <__aeabi_dsub>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	3430      	adds	r4, #48	; 0x30
 800583a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800583e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005842:	f807 4b01 	strb.w	r4, [r7], #1
 8005846:	f7fb f96d 	bl	8000b24 <__aeabi_dcmplt>
 800584a:	2800      	cmp	r0, #0
 800584c:	d174      	bne.n	8005938 <_dtoa_r+0x648>
 800584e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005852:	2000      	movs	r0, #0
 8005854:	4911      	ldr	r1, [pc, #68]	; (800589c <_dtoa_r+0x5ac>)
 8005856:	f7fa fd3b 	bl	80002d0 <__aeabi_dsub>
 800585a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800585e:	f7fb f961 	bl	8000b24 <__aeabi_dcmplt>
 8005862:	2800      	cmp	r0, #0
 8005864:	f040 80b6 	bne.w	80059d4 <_dtoa_r+0x6e4>
 8005868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800586a:	429f      	cmp	r7, r3
 800586c:	f43f af7a 	beq.w	8005764 <_dtoa_r+0x474>
 8005870:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005874:	2200      	movs	r2, #0
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <_dtoa_r+0x5b0>)
 8005878:	f7fa fee2 	bl	8000640 <__aeabi_dmul>
 800587c:	2200      	movs	r2, #0
 800587e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <_dtoa_r+0x5b0>)
 8005888:	f7fa feda 	bl	8000640 <__aeabi_dmul>
 800588c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005890:	e7c3      	b.n	800581a <_dtoa_r+0x52a>
 8005892:	bf00      	nop
 8005894:	080074a8 	.word	0x080074a8
 8005898:	08007480 	.word	0x08007480
 800589c:	3ff00000 	.word	0x3ff00000
 80058a0:	40240000 	.word	0x40240000
 80058a4:	401c0000 	.word	0x401c0000
 80058a8:	40140000 	.word	0x40140000
 80058ac:	3fe00000 	.word	0x3fe00000
 80058b0:	4630      	mov	r0, r6
 80058b2:	4639      	mov	r1, r7
 80058b4:	f7fa fec4 	bl	8000640 <__aeabi_dmul>
 80058b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058be:	9c08      	ldr	r4, [sp, #32]
 80058c0:	9314      	str	r3, [sp, #80]	; 0x50
 80058c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c6:	f7fb f96b 	bl	8000ba0 <__aeabi_d2iz>
 80058ca:	9015      	str	r0, [sp, #84]	; 0x54
 80058cc:	f7fa fe4e 	bl	800056c <__aeabi_i2d>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d8:	f7fa fcfa 	bl	80002d0 <__aeabi_dsub>
 80058dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058de:	4606      	mov	r6, r0
 80058e0:	3330      	adds	r3, #48	; 0x30
 80058e2:	f804 3b01 	strb.w	r3, [r4], #1
 80058e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058e8:	460f      	mov	r7, r1
 80058ea:	429c      	cmp	r4, r3
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	d124      	bne.n	800593c <_dtoa_r+0x64c>
 80058f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058f6:	4bb3      	ldr	r3, [pc, #716]	; (8005bc4 <_dtoa_r+0x8d4>)
 80058f8:	f7fa fcec 	bl	80002d4 <__adddf3>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fb f92c 	bl	8000b60 <__aeabi_dcmpgt>
 8005908:	2800      	cmp	r0, #0
 800590a:	d162      	bne.n	80059d2 <_dtoa_r+0x6e2>
 800590c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005910:	2000      	movs	r0, #0
 8005912:	49ac      	ldr	r1, [pc, #688]	; (8005bc4 <_dtoa_r+0x8d4>)
 8005914:	f7fa fcdc 	bl	80002d0 <__aeabi_dsub>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4630      	mov	r0, r6
 800591e:	4639      	mov	r1, r7
 8005920:	f7fb f900 	bl	8000b24 <__aeabi_dcmplt>
 8005924:	2800      	cmp	r0, #0
 8005926:	f43f af1d 	beq.w	8005764 <_dtoa_r+0x474>
 800592a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800592c:	1e7b      	subs	r3, r7, #1
 800592e:	9314      	str	r3, [sp, #80]	; 0x50
 8005930:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d0f8      	beq.n	800592a <_dtoa_r+0x63a>
 8005938:	46c1      	mov	r9, r8
 800593a:	e03a      	b.n	80059b2 <_dtoa_r+0x6c2>
 800593c:	4ba2      	ldr	r3, [pc, #648]	; (8005bc8 <_dtoa_r+0x8d8>)
 800593e:	f7fa fe7f 	bl	8000640 <__aeabi_dmul>
 8005942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005946:	e7bc      	b.n	80058c2 <_dtoa_r+0x5d2>
 8005948:	9f08      	ldr	r7, [sp, #32]
 800594a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800594e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005952:	f7fa ff9f 	bl	8000894 <__aeabi_ddiv>
 8005956:	f7fb f923 	bl	8000ba0 <__aeabi_d2iz>
 800595a:	4604      	mov	r4, r0
 800595c:	f7fa fe06 	bl	800056c <__aeabi_i2d>
 8005960:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005964:	f7fa fe6c 	bl	8000640 <__aeabi_dmul>
 8005968:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800596c:	460b      	mov	r3, r1
 800596e:	4602      	mov	r2, r0
 8005970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005974:	f7fa fcac 	bl	80002d0 <__aeabi_dsub>
 8005978:	f807 6b01 	strb.w	r6, [r7], #1
 800597c:	9e08      	ldr	r6, [sp, #32]
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	1bbe      	subs	r6, r7, r6
 8005982:	42b3      	cmp	r3, r6
 8005984:	d13a      	bne.n	80059fc <_dtoa_r+0x70c>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	f7fa fca3 	bl	80002d4 <__adddf3>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005996:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800599a:	f7fb f8e1 	bl	8000b60 <__aeabi_dcmpgt>
 800599e:	bb58      	cbnz	r0, 80059f8 <_dtoa_r+0x708>
 80059a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a8:	f7fb f8b2 	bl	8000b10 <__aeabi_dcmpeq>
 80059ac:	b108      	cbz	r0, 80059b2 <_dtoa_r+0x6c2>
 80059ae:	07e1      	lsls	r1, r4, #31
 80059b0:	d422      	bmi.n	80059f8 <_dtoa_r+0x708>
 80059b2:	4628      	mov	r0, r5
 80059b4:	4651      	mov	r1, sl
 80059b6:	f000 fd11 	bl	80063dc <_Bfree>
 80059ba:	2300      	movs	r3, #0
 80059bc:	703b      	strb	r3, [r7, #0]
 80059be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80059c0:	f109 0001 	add.w	r0, r9, #1
 80059c4:	6018      	str	r0, [r3, #0]
 80059c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f43f acdf 	beq.w	800538c <_dtoa_r+0x9c>
 80059ce:	601f      	str	r7, [r3, #0]
 80059d0:	e4dc      	b.n	800538c <_dtoa_r+0x9c>
 80059d2:	4627      	mov	r7, r4
 80059d4:	463b      	mov	r3, r7
 80059d6:	461f      	mov	r7, r3
 80059d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059dc:	2a39      	cmp	r2, #57	; 0x39
 80059de:	d107      	bne.n	80059f0 <_dtoa_r+0x700>
 80059e0:	9a08      	ldr	r2, [sp, #32]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d1f7      	bne.n	80059d6 <_dtoa_r+0x6e6>
 80059e6:	2230      	movs	r2, #48	; 0x30
 80059e8:	9908      	ldr	r1, [sp, #32]
 80059ea:	f108 0801 	add.w	r8, r8, #1
 80059ee:	700a      	strb	r2, [r1, #0]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	3201      	adds	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e79f      	b.n	8005938 <_dtoa_r+0x648>
 80059f8:	46c8      	mov	r8, r9
 80059fa:	e7eb      	b.n	80059d4 <_dtoa_r+0x6e4>
 80059fc:	2200      	movs	r2, #0
 80059fe:	4b72      	ldr	r3, [pc, #456]	; (8005bc8 <_dtoa_r+0x8d8>)
 8005a00:	f7fa fe1e 	bl	8000640 <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f7fb f87e 	bl	8000b10 <__aeabi_dcmpeq>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d098      	beq.n	800594a <_dtoa_r+0x65a>
 8005a18:	e7cb      	b.n	80059b2 <_dtoa_r+0x6c2>
 8005a1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	f000 80cd 	beq.w	8005bbc <_dtoa_r+0x8cc>
 8005a22:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a24:	2a01      	cmp	r2, #1
 8005a26:	f300 80af 	bgt.w	8005b88 <_dtoa_r+0x898>
 8005a2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a2c:	2a00      	cmp	r2, #0
 8005a2e:	f000 80a7 	beq.w	8005b80 <_dtoa_r+0x890>
 8005a32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a38:	9f06      	ldr	r7, [sp, #24]
 8005a3a:	9a06      	ldr	r2, [sp, #24]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	441a      	add	r2, r3
 8005a40:	9206      	str	r2, [sp, #24]
 8005a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a44:	4628      	mov	r0, r5
 8005a46:	441a      	add	r2, r3
 8005a48:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4a:	f000 fd81 	bl	8006550 <__i2b>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	dd0c      	ble.n	8005a6e <_dtoa_r+0x77e>
 8005a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dd09      	ble.n	8005a6e <_dtoa_r+0x77e>
 8005a5a:	42bb      	cmp	r3, r7
 8005a5c:	bfa8      	it	ge
 8005a5e:	463b      	movge	r3, r7
 8005a60:	9a06      	ldr	r2, [sp, #24]
 8005a62:	1aff      	subs	r7, r7, r3
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	9206      	str	r2, [sp, #24]
 8005a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a70:	b1f3      	cbz	r3, 8005ab0 <_dtoa_r+0x7c0>
 8005a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80a9 	beq.w	8005bcc <_dtoa_r+0x8dc>
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	dd10      	ble.n	8005aa0 <_dtoa_r+0x7b0>
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4622      	mov	r2, r4
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 fe1e 	bl	80066c4 <__pow5mult>
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fd74 	bl	800657c <__multiply>
 8005a94:	4680      	mov	r8, r0
 8005a96:	4651      	mov	r1, sl
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 fc9f 	bl	80063dc <_Bfree>
 8005a9e:	46c2      	mov	sl, r8
 8005aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa2:	1b1a      	subs	r2, r3, r4
 8005aa4:	d004      	beq.n	8005ab0 <_dtoa_r+0x7c0>
 8005aa6:	4651      	mov	r1, sl
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f000 fe0b 	bl	80066c4 <__pow5mult>
 8005aae:	4682      	mov	sl, r0
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 fd4c 	bl	8006550 <__i2b>
 8005ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aba:	4604      	mov	r4, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f340 8087 	ble.w	8005bd0 <_dtoa_r+0x8e0>
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 fdfc 	bl	80066c4 <__pow5mult>
 8005acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ace:	4604      	mov	r4, r0
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f340 8080 	ble.w	8005bd6 <_dtoa_r+0x8e6>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ae0:	6918      	ldr	r0, [r3, #16]
 8005ae2:	f000 fce7 	bl	80064b4 <__hi0bits>
 8005ae6:	f1c0 0020 	rsb	r0, r0, #32
 8005aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aec:	4418      	add	r0, r3
 8005aee:	f010 001f 	ands.w	r0, r0, #31
 8005af2:	f000 8092 	beq.w	8005c1a <_dtoa_r+0x92a>
 8005af6:	f1c0 0320 	rsb	r3, r0, #32
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	f340 808a 	ble.w	8005c14 <_dtoa_r+0x924>
 8005b00:	f1c0 001c 	rsb	r0, r0, #28
 8005b04:	9b06      	ldr	r3, [sp, #24]
 8005b06:	4407      	add	r7, r0
 8005b08:	4403      	add	r3, r0
 8005b0a:	9306      	str	r3, [sp, #24]
 8005b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0e:	4403      	add	r3, r0
 8005b10:	9309      	str	r3, [sp, #36]	; 0x24
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	dd05      	ble.n	8005b24 <_dtoa_r+0x834>
 8005b18:	4651      	mov	r1, sl
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 fe2b 	bl	8006778 <__lshift>
 8005b22:	4682      	mov	sl, r0
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd05      	ble.n	8005b36 <_dtoa_r+0x846>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fe22 	bl	8006778 <__lshift>
 8005b34:	4604      	mov	r4, r0
 8005b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d070      	beq.n	8005c1e <_dtoa_r+0x92e>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4650      	mov	r0, sl
 8005b40:	f000 fe86 	bl	8006850 <__mcmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	da6a      	bge.n	8005c1e <_dtoa_r+0x92e>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4651      	mov	r1, sl
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 fc66 	bl	8006420 <__multadd>
 8005b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b56:	4682      	mov	sl, r0
 8005b58:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8193 	beq.w	8005e88 <_dtoa_r+0xb98>
 8005b62:	4631      	mov	r1, r6
 8005b64:	2300      	movs	r3, #0
 8005b66:	220a      	movs	r2, #10
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 fc59 	bl	8006420 <__multadd>
 8005b6e:	f1bb 0f00 	cmp.w	fp, #0
 8005b72:	4606      	mov	r6, r0
 8005b74:	f300 8093 	bgt.w	8005c9e <_dtoa_r+0x9ae>
 8005b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	dc57      	bgt.n	8005c2e <_dtoa_r+0x93e>
 8005b7e:	e08e      	b.n	8005c9e <_dtoa_r+0x9ae>
 8005b80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b86:	e756      	b.n	8005a36 <_dtoa_r+0x746>
 8005b88:	9b02      	ldr	r3, [sp, #8]
 8005b8a:	1e5c      	subs	r4, r3, #1
 8005b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	bfb7      	itett	lt
 8005b92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b94:	1b1c      	subge	r4, r3, r4
 8005b96:	1ae2      	sublt	r2, r4, r3
 8005b98:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b9a:	bfbe      	ittt	lt
 8005b9c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b9e:	189b      	addlt	r3, r3, r2
 8005ba0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ba2:	9b02      	ldr	r3, [sp, #8]
 8005ba4:	bfb8      	it	lt
 8005ba6:	2400      	movlt	r4, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bfbb      	ittet	lt
 8005bac:	9b06      	ldrlt	r3, [sp, #24]
 8005bae:	9a02      	ldrlt	r2, [sp, #8]
 8005bb0:	9f06      	ldrge	r7, [sp, #24]
 8005bb2:	1a9f      	sublt	r7, r3, r2
 8005bb4:	bfac      	ite	ge
 8005bb6:	9b02      	ldrge	r3, [sp, #8]
 8005bb8:	2300      	movlt	r3, #0
 8005bba:	e73e      	b.n	8005a3a <_dtoa_r+0x74a>
 8005bbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bbe:	9f06      	ldr	r7, [sp, #24]
 8005bc0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005bc2:	e745      	b.n	8005a50 <_dtoa_r+0x760>
 8005bc4:	3fe00000 	.word	0x3fe00000
 8005bc8:	40240000 	.word	0x40240000
 8005bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bce:	e76a      	b.n	8005aa6 <_dtoa_r+0x7b6>
 8005bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	dc19      	bgt.n	8005c0a <_dtoa_r+0x91a>
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	b9bb      	cbnz	r3, 8005c0a <_dtoa_r+0x91a>
 8005bda:	9b05      	ldr	r3, [sp, #20]
 8005bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be0:	b99b      	cbnz	r3, 8005c0a <_dtoa_r+0x91a>
 8005be2:	9b05      	ldr	r3, [sp, #20]
 8005be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	0d1b      	lsrs	r3, r3, #20
 8005bea:	051b      	lsls	r3, r3, #20
 8005bec:	b183      	cbz	r3, 8005c10 <_dtoa_r+0x920>
 8005bee:	f04f 0801 	mov.w	r8, #1
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	9306      	str	r3, [sp, #24]
 8005bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f af6a 	bne.w	8005ada <_dtoa_r+0x7ea>
 8005c06:	2001      	movs	r0, #1
 8005c08:	e76f      	b.n	8005aea <_dtoa_r+0x7fa>
 8005c0a:	f04f 0800 	mov.w	r8, #0
 8005c0e:	e7f6      	b.n	8005bfe <_dtoa_r+0x90e>
 8005c10:	4698      	mov	r8, r3
 8005c12:	e7f4      	b.n	8005bfe <_dtoa_r+0x90e>
 8005c14:	f43f af7d 	beq.w	8005b12 <_dtoa_r+0x822>
 8005c18:	4618      	mov	r0, r3
 8005c1a:	301c      	adds	r0, #28
 8005c1c:	e772      	b.n	8005b04 <_dtoa_r+0x814>
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc36      	bgt.n	8005c92 <_dtoa_r+0x9a2>
 8005c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	dd33      	ble.n	8005c92 <_dtoa_r+0x9a2>
 8005c2a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c2e:	f1bb 0f00 	cmp.w	fp, #0
 8005c32:	d10d      	bne.n	8005c50 <_dtoa_r+0x960>
 8005c34:	4621      	mov	r1, r4
 8005c36:	465b      	mov	r3, fp
 8005c38:	2205      	movs	r2, #5
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 fbf0 	bl	8006420 <__multadd>
 8005c40:	4601      	mov	r1, r0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4650      	mov	r0, sl
 8005c46:	f000 fe03 	bl	8006850 <__mcmp>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	f73f adb6 	bgt.w	80057bc <_dtoa_r+0x4cc>
 8005c50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c52:	9f08      	ldr	r7, [sp, #32]
 8005c54:	ea6f 0903 	mvn.w	r9, r3
 8005c58:	f04f 0800 	mov.w	r8, #0
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fbbc 	bl	80063dc <_Bfree>
 8005c64:	2e00      	cmp	r6, #0
 8005c66:	f43f aea4 	beq.w	80059b2 <_dtoa_r+0x6c2>
 8005c6a:	f1b8 0f00 	cmp.w	r8, #0
 8005c6e:	d005      	beq.n	8005c7c <_dtoa_r+0x98c>
 8005c70:	45b0      	cmp	r8, r6
 8005c72:	d003      	beq.n	8005c7c <_dtoa_r+0x98c>
 8005c74:	4641      	mov	r1, r8
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fbb0 	bl	80063dc <_Bfree>
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 fbac 	bl	80063dc <_Bfree>
 8005c84:	e695      	b.n	80059b2 <_dtoa_r+0x6c2>
 8005c86:	2400      	movs	r4, #0
 8005c88:	4626      	mov	r6, r4
 8005c8a:	e7e1      	b.n	8005c50 <_dtoa_r+0x960>
 8005c8c:	46c1      	mov	r9, r8
 8005c8e:	4626      	mov	r6, r4
 8005c90:	e594      	b.n	80057bc <_dtoa_r+0x4cc>
 8005c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c94:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80fc 	beq.w	8005e96 <_dtoa_r+0xba6>
 8005c9e:	2f00      	cmp	r7, #0
 8005ca0:	dd05      	ble.n	8005cae <_dtoa_r+0x9be>
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	463a      	mov	r2, r7
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fd66 	bl	8006778 <__lshift>
 8005cac:	4606      	mov	r6, r0
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	d05c      	beq.n	8005d6e <_dtoa_r+0xa7e>
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	6871      	ldr	r1, [r6, #4]
 8005cb8:	f000 fb50 	bl	800635c <_Balloc>
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	b928      	cbnz	r0, 8005ccc <_dtoa_r+0x9dc>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cc6:	4b7e      	ldr	r3, [pc, #504]	; (8005ec0 <_dtoa_r+0xbd0>)
 8005cc8:	f7ff bb26 	b.w	8005318 <_dtoa_r+0x28>
 8005ccc:	6932      	ldr	r2, [r6, #16]
 8005cce:	f106 010c 	add.w	r1, r6, #12
 8005cd2:	3202      	adds	r2, #2
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	300c      	adds	r0, #12
 8005cd8:	f000 fb32 	bl	8006340 <memcpy>
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 fd49 	bl	8006778 <__lshift>
 8005ce6:	46b0      	mov	r8, r6
 8005ce8:	4606      	mov	r6, r0
 8005cea:	9b08      	ldr	r3, [sp, #32]
 8005cec:	3301      	adds	r3, #1
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	9b08      	ldr	r3, [sp, #32]
 8005cf2:	445b      	add	r3, fp
 8005cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf6:	9b04      	ldr	r3, [sp, #16]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfe:	9b02      	ldr	r3, [sp, #8]
 8005d00:	4621      	mov	r1, r4
 8005d02:	4650      	mov	r0, sl
 8005d04:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d08:	f7ff fa62 	bl	80051d0 <quorem>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4641      	mov	r1, r8
 8005d10:	3330      	adds	r3, #48	; 0x30
 8005d12:	9004      	str	r0, [sp, #16]
 8005d14:	4650      	mov	r0, sl
 8005d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d18:	f000 fd9a 	bl	8006850 <__mcmp>
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	9006      	str	r0, [sp, #24]
 8005d20:	4621      	mov	r1, r4
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 fdb0 	bl	8006888 <__mdiff>
 8005d28:	68c2      	ldr	r2, [r0, #12]
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2e:	bb02      	cbnz	r2, 8005d72 <_dtoa_r+0xa82>
 8005d30:	4601      	mov	r1, r0
 8005d32:	4650      	mov	r0, sl
 8005d34:	f000 fd8c 	bl	8006850 <__mcmp>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4628      	mov	r0, r5
 8005d40:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d44:	f000 fb4a 	bl	80063dc <_Bfree>
 8005d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d4c:	9f02      	ldr	r7, [sp, #8]
 8005d4e:	ea43 0102 	orr.w	r1, r3, r2
 8005d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d54:	430b      	orrs	r3, r1
 8005d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d58:	d10d      	bne.n	8005d76 <_dtoa_r+0xa86>
 8005d5a:	2b39      	cmp	r3, #57	; 0x39
 8005d5c:	d027      	beq.n	8005dae <_dtoa_r+0xabe>
 8005d5e:	9a06      	ldr	r2, [sp, #24]
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	dd01      	ble.n	8005d68 <_dtoa_r+0xa78>
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	3331      	adds	r3, #49	; 0x31
 8005d68:	f88b 3000 	strb.w	r3, [fp]
 8005d6c:	e776      	b.n	8005c5c <_dtoa_r+0x96c>
 8005d6e:	4630      	mov	r0, r6
 8005d70:	e7b9      	b.n	8005ce6 <_dtoa_r+0x9f6>
 8005d72:	2201      	movs	r2, #1
 8005d74:	e7e2      	b.n	8005d3c <_dtoa_r+0xa4c>
 8005d76:	9906      	ldr	r1, [sp, #24]
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	db04      	blt.n	8005d86 <_dtoa_r+0xa96>
 8005d7c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d7e:	4301      	orrs	r1, r0
 8005d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d82:	4301      	orrs	r1, r0
 8005d84:	d120      	bne.n	8005dc8 <_dtoa_r+0xad8>
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	ddee      	ble.n	8005d68 <_dtoa_r+0xa78>
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4628      	mov	r0, r5
 8005d90:	9302      	str	r3, [sp, #8]
 8005d92:	f000 fcf1 	bl	8006778 <__lshift>
 8005d96:	4621      	mov	r1, r4
 8005d98:	4682      	mov	sl, r0
 8005d9a:	f000 fd59 	bl	8006850 <__mcmp>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	9b02      	ldr	r3, [sp, #8]
 8005da2:	dc02      	bgt.n	8005daa <_dtoa_r+0xaba>
 8005da4:	d1e0      	bne.n	8005d68 <_dtoa_r+0xa78>
 8005da6:	07da      	lsls	r2, r3, #31
 8005da8:	d5de      	bpl.n	8005d68 <_dtoa_r+0xa78>
 8005daa:	2b39      	cmp	r3, #57	; 0x39
 8005dac:	d1da      	bne.n	8005d64 <_dtoa_r+0xa74>
 8005dae:	2339      	movs	r3, #57	; 0x39
 8005db0:	f88b 3000 	strb.w	r3, [fp]
 8005db4:	463b      	mov	r3, r7
 8005db6:	461f      	mov	r7, r3
 8005db8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	2a39      	cmp	r2, #57	; 0x39
 8005dc0:	d050      	beq.n	8005e64 <_dtoa_r+0xb74>
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e749      	b.n	8005c5c <_dtoa_r+0x96c>
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	dd03      	ble.n	8005dd4 <_dtoa_r+0xae4>
 8005dcc:	2b39      	cmp	r3, #57	; 0x39
 8005dce:	d0ee      	beq.n	8005dae <_dtoa_r+0xabe>
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	e7c9      	b.n	8005d68 <_dtoa_r+0xa78>
 8005dd4:	9a02      	ldr	r2, [sp, #8]
 8005dd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	d02a      	beq.n	8005e36 <_dtoa_r+0xb46>
 8005de0:	4651      	mov	r1, sl
 8005de2:	2300      	movs	r3, #0
 8005de4:	220a      	movs	r2, #10
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 fb1a 	bl	8006420 <__multadd>
 8005dec:	45b0      	cmp	r8, r6
 8005dee:	4682      	mov	sl, r0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	f04f 020a 	mov.w	r2, #10
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	d107      	bne.n	8005e0e <_dtoa_r+0xb1e>
 8005dfe:	f000 fb0f 	bl	8006420 <__multadd>
 8005e02:	4680      	mov	r8, r0
 8005e04:	4606      	mov	r6, r0
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	9302      	str	r3, [sp, #8]
 8005e0c:	e777      	b.n	8005cfe <_dtoa_r+0xa0e>
 8005e0e:	f000 fb07 	bl	8006420 <__multadd>
 8005e12:	4631      	mov	r1, r6
 8005e14:	4680      	mov	r8, r0
 8005e16:	2300      	movs	r3, #0
 8005e18:	220a      	movs	r2, #10
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fb00 	bl	8006420 <__multadd>
 8005e20:	4606      	mov	r6, r0
 8005e22:	e7f0      	b.n	8005e06 <_dtoa_r+0xb16>
 8005e24:	f1bb 0f00 	cmp.w	fp, #0
 8005e28:	bfcc      	ite	gt
 8005e2a:	465f      	movgt	r7, fp
 8005e2c:	2701      	movle	r7, #1
 8005e2e:	f04f 0800 	mov.w	r8, #0
 8005e32:	9a08      	ldr	r2, [sp, #32]
 8005e34:	4417      	add	r7, r2
 8005e36:	4651      	mov	r1, sl
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	f000 fc9b 	bl	8006778 <__lshift>
 8005e42:	4621      	mov	r1, r4
 8005e44:	4682      	mov	sl, r0
 8005e46:	f000 fd03 	bl	8006850 <__mcmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	dcb2      	bgt.n	8005db4 <_dtoa_r+0xac4>
 8005e4e:	d102      	bne.n	8005e56 <_dtoa_r+0xb66>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	07db      	lsls	r3, r3, #31
 8005e54:	d4ae      	bmi.n	8005db4 <_dtoa_r+0xac4>
 8005e56:	463b      	mov	r3, r7
 8005e58:	461f      	mov	r7, r3
 8005e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e5e:	2a30      	cmp	r2, #48	; 0x30
 8005e60:	d0fa      	beq.n	8005e58 <_dtoa_r+0xb68>
 8005e62:	e6fb      	b.n	8005c5c <_dtoa_r+0x96c>
 8005e64:	9a08      	ldr	r2, [sp, #32]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d1a5      	bne.n	8005db6 <_dtoa_r+0xac6>
 8005e6a:	2331      	movs	r3, #49	; 0x31
 8005e6c:	f109 0901 	add.w	r9, r9, #1
 8005e70:	7013      	strb	r3, [r2, #0]
 8005e72:	e6f3      	b.n	8005c5c <_dtoa_r+0x96c>
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <_dtoa_r+0xbd4>)
 8005e76:	f7ff baa7 	b.w	80053c8 <_dtoa_r+0xd8>
 8005e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f47f aa80 	bne.w	8005382 <_dtoa_r+0x92>
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <_dtoa_r+0xbd8>)
 8005e84:	f7ff baa0 	b.w	80053c8 <_dtoa_r+0xd8>
 8005e88:	f1bb 0f00 	cmp.w	fp, #0
 8005e8c:	dc03      	bgt.n	8005e96 <_dtoa_r+0xba6>
 8005e8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	f73f aecc 	bgt.w	8005c2e <_dtoa_r+0x93e>
 8005e96:	9f08      	ldr	r7, [sp, #32]
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4650      	mov	r0, sl
 8005e9c:	f7ff f998 	bl	80051d0 <quorem>
 8005ea0:	9a08      	ldr	r2, [sp, #32]
 8005ea2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ea6:	f807 3b01 	strb.w	r3, [r7], #1
 8005eaa:	1aba      	subs	r2, r7, r2
 8005eac:	4593      	cmp	fp, r2
 8005eae:	ddb9      	ble.n	8005e24 <_dtoa_r+0xb34>
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 fab2 	bl	8006420 <__multadd>
 8005ebc:	4682      	mov	sl, r0
 8005ebe:	e7eb      	b.n	8005e98 <_dtoa_r+0xba8>
 8005ec0:	080073ab 	.word	0x080073ab
 8005ec4:	08007304 	.word	0x08007304
 8005ec8:	08007328 	.word	0x08007328

08005ecc <__sflush_r>:
 8005ecc:	898a      	ldrh	r2, [r1, #12]
 8005ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	0710      	lsls	r0, r2, #28
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	d458      	bmi.n	8005f8c <__sflush_r+0xc0>
 8005eda:	684b      	ldr	r3, [r1, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dc05      	bgt.n	8005eec <__sflush_r+0x20>
 8005ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dc02      	bgt.n	8005eec <__sflush_r+0x20>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	d0f9      	beq.n	8005ee6 <__sflush_r+0x1a>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ef8:	682f      	ldr	r7, [r5, #0]
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	d032      	beq.n	8005f64 <__sflush_r+0x98>
 8005efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	075a      	lsls	r2, r3, #29
 8005f04:	d505      	bpl.n	8005f12 <__sflush_r+0x46>
 8005f06:	6863      	ldr	r3, [r4, #4]
 8005f08:	1ac0      	subs	r0, r0, r3
 8005f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f0c:	b10b      	cbz	r3, 8005f12 <__sflush_r+0x46>
 8005f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f10:	1ac0      	subs	r0, r0, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	4602      	mov	r2, r0
 8005f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f18:	4628      	mov	r0, r5
 8005f1a:	6a21      	ldr	r1, [r4, #32]
 8005f1c:	47b0      	blx	r6
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	d106      	bne.n	8005f32 <__sflush_r+0x66>
 8005f24:	6829      	ldr	r1, [r5, #0]
 8005f26:	291d      	cmp	r1, #29
 8005f28:	d82c      	bhi.n	8005f84 <__sflush_r+0xb8>
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <__sflush_r+0x108>)
 8005f2c:	40ca      	lsrs	r2, r1
 8005f2e:	07d6      	lsls	r6, r2, #31
 8005f30:	d528      	bpl.n	8005f84 <__sflush_r+0xb8>
 8005f32:	2200      	movs	r2, #0
 8005f34:	6062      	str	r2, [r4, #4]
 8005f36:	6922      	ldr	r2, [r4, #16]
 8005f38:	04d9      	lsls	r1, r3, #19
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	d504      	bpl.n	8005f48 <__sflush_r+0x7c>
 8005f3e:	1c42      	adds	r2, r0, #1
 8005f40:	d101      	bne.n	8005f46 <__sflush_r+0x7a>
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	b903      	cbnz	r3, 8005f48 <__sflush_r+0x7c>
 8005f46:	6560      	str	r0, [r4, #84]	; 0x54
 8005f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4a:	602f      	str	r7, [r5, #0]
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d0ca      	beq.n	8005ee6 <__sflush_r+0x1a>
 8005f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f54:	4299      	cmp	r1, r3
 8005f56:	d002      	beq.n	8005f5e <__sflush_r+0x92>
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 fd8f 	bl	8006a7c <_free_r>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	6360      	str	r0, [r4, #52]	; 0x34
 8005f62:	e7c1      	b.n	8005ee8 <__sflush_r+0x1c>
 8005f64:	6a21      	ldr	r1, [r4, #32]
 8005f66:	2301      	movs	r3, #1
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b0      	blx	r6
 8005f6c:	1c41      	adds	r1, r0, #1
 8005f6e:	d1c7      	bne.n	8005f00 <__sflush_r+0x34>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0c4      	beq.n	8005f00 <__sflush_r+0x34>
 8005f76:	2b1d      	cmp	r3, #29
 8005f78:	d001      	beq.n	8005f7e <__sflush_r+0xb2>
 8005f7a:	2b16      	cmp	r3, #22
 8005f7c:	d101      	bne.n	8005f82 <__sflush_r+0xb6>
 8005f7e:	602f      	str	r7, [r5, #0]
 8005f80:	e7b1      	b.n	8005ee6 <__sflush_r+0x1a>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	e7ad      	b.n	8005ee8 <__sflush_r+0x1c>
 8005f8c:	690f      	ldr	r7, [r1, #16]
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	d0a9      	beq.n	8005ee6 <__sflush_r+0x1a>
 8005f92:	0793      	lsls	r3, r2, #30
 8005f94:	bf18      	it	ne
 8005f96:	2300      	movne	r3, #0
 8005f98:	680e      	ldr	r6, [r1, #0]
 8005f9a:	bf08      	it	eq
 8005f9c:	694b      	ldreq	r3, [r1, #20]
 8005f9e:	eba6 0807 	sub.w	r8, r6, r7
 8005fa2:	600f      	str	r7, [r1, #0]
 8005fa4:	608b      	str	r3, [r1, #8]
 8005fa6:	f1b8 0f00 	cmp.w	r8, #0
 8005faa:	dd9c      	ble.n	8005ee6 <__sflush_r+0x1a>
 8005fac:	4643      	mov	r3, r8
 8005fae:	463a      	mov	r2, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	6a21      	ldr	r1, [r4, #32]
 8005fb4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fb6:	47b0      	blx	r6
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	dc06      	bgt.n	8005fca <__sflush_r+0xfe>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc6:	81a3      	strh	r3, [r4, #12]
 8005fc8:	e78e      	b.n	8005ee8 <__sflush_r+0x1c>
 8005fca:	4407      	add	r7, r0
 8005fcc:	eba8 0800 	sub.w	r8, r8, r0
 8005fd0:	e7e9      	b.n	8005fa6 <__sflush_r+0xda>
 8005fd2:	bf00      	nop
 8005fd4:	20400001 	.word	0x20400001

08005fd8 <_fflush_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	4605      	mov	r5, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b913      	cbnz	r3, 8005fe8 <_fflush_r+0x10>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	b118      	cbz	r0, 8005ff2 <_fflush_r+0x1a>
 8005fea:	6983      	ldr	r3, [r0, #24]
 8005fec:	b90b      	cbnz	r3, 8005ff2 <_fflush_r+0x1a>
 8005fee:	f000 f887 	bl	8006100 <__sinit>
 8005ff2:	4b14      	ldr	r3, [pc, #80]	; (8006044 <_fflush_r+0x6c>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	d11b      	bne.n	8006030 <_fflush_r+0x58>
 8005ff8:	686c      	ldr	r4, [r5, #4]
 8005ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0ef      	beq.n	8005fe2 <_fflush_r+0xa>
 8006002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006004:	07d0      	lsls	r0, r2, #31
 8006006:	d404      	bmi.n	8006012 <_fflush_r+0x3a>
 8006008:	0599      	lsls	r1, r3, #22
 800600a:	d402      	bmi.n	8006012 <_fflush_r+0x3a>
 800600c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800600e:	f000 f91a 	bl	8006246 <__retarget_lock_acquire_recursive>
 8006012:	4628      	mov	r0, r5
 8006014:	4621      	mov	r1, r4
 8006016:	f7ff ff59 	bl	8005ecc <__sflush_r>
 800601a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601c:	4605      	mov	r5, r0
 800601e:	07da      	lsls	r2, r3, #31
 8006020:	d4e0      	bmi.n	8005fe4 <_fflush_r+0xc>
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	059b      	lsls	r3, r3, #22
 8006026:	d4dd      	bmi.n	8005fe4 <_fflush_r+0xc>
 8006028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800602a:	f000 f90d 	bl	8006248 <__retarget_lock_release_recursive>
 800602e:	e7d9      	b.n	8005fe4 <_fflush_r+0xc>
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <_fflush_r+0x70>)
 8006032:	429c      	cmp	r4, r3
 8006034:	d101      	bne.n	800603a <_fflush_r+0x62>
 8006036:	68ac      	ldr	r4, [r5, #8]
 8006038:	e7df      	b.n	8005ffa <_fflush_r+0x22>
 800603a:	4b04      	ldr	r3, [pc, #16]	; (800604c <_fflush_r+0x74>)
 800603c:	429c      	cmp	r4, r3
 800603e:	bf08      	it	eq
 8006040:	68ec      	ldreq	r4, [r5, #12]
 8006042:	e7da      	b.n	8005ffa <_fflush_r+0x22>
 8006044:	080073dc 	.word	0x080073dc
 8006048:	080073fc 	.word	0x080073fc
 800604c:	080073bc 	.word	0x080073bc

08006050 <std>:
 8006050:	2300      	movs	r3, #0
 8006052:	b510      	push	{r4, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	e9c0 3300 	strd	r3, r3, [r0]
 800605a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800605e:	6083      	str	r3, [r0, #8]
 8006060:	8181      	strh	r1, [r0, #12]
 8006062:	6643      	str	r3, [r0, #100]	; 0x64
 8006064:	81c2      	strh	r2, [r0, #14]
 8006066:	6183      	str	r3, [r0, #24]
 8006068:	4619      	mov	r1, r3
 800606a:	2208      	movs	r2, #8
 800606c:	305c      	adds	r0, #92	; 0x5c
 800606e:	f7fe fac5 	bl	80045fc <memset>
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <std+0x38>)
 8006074:	6224      	str	r4, [r4, #32]
 8006076:	6263      	str	r3, [r4, #36]	; 0x24
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <std+0x3c>)
 800607a:	62a3      	str	r3, [r4, #40]	; 0x28
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <std+0x40>)
 800607e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <std+0x44>)
 8006082:	6323      	str	r3, [r4, #48]	; 0x30
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop
 8006088:	08006f29 	.word	0x08006f29
 800608c:	08006f4b 	.word	0x08006f4b
 8006090:	08006f83 	.word	0x08006f83
 8006094:	08006fa7 	.word	0x08006fa7

08006098 <_cleanup_r>:
 8006098:	4901      	ldr	r1, [pc, #4]	; (80060a0 <_cleanup_r+0x8>)
 800609a:	f000 b8af 	b.w	80061fc <_fwalk_reent>
 800609e:	bf00      	nop
 80060a0:	08005fd9 	.word	0x08005fd9

080060a4 <__sfmoreglue>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	2568      	movs	r5, #104	; 0x68
 80060a8:	1e4a      	subs	r2, r1, #1
 80060aa:	4355      	muls	r5, r2
 80060ac:	460e      	mov	r6, r1
 80060ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060b2:	f000 fd2f 	bl	8006b14 <_malloc_r>
 80060b6:	4604      	mov	r4, r0
 80060b8:	b140      	cbz	r0, 80060cc <__sfmoreglue+0x28>
 80060ba:	2100      	movs	r1, #0
 80060bc:	e9c0 1600 	strd	r1, r6, [r0]
 80060c0:	300c      	adds	r0, #12
 80060c2:	60a0      	str	r0, [r4, #8]
 80060c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060c8:	f7fe fa98 	bl	80045fc <memset>
 80060cc:	4620      	mov	r0, r4
 80060ce:	bd70      	pop	{r4, r5, r6, pc}

080060d0 <__sfp_lock_acquire>:
 80060d0:	4801      	ldr	r0, [pc, #4]	; (80060d8 <__sfp_lock_acquire+0x8>)
 80060d2:	f000 b8b8 	b.w	8006246 <__retarget_lock_acquire_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000628 	.word	0x20000628

080060dc <__sfp_lock_release>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__sfp_lock_release+0x8>)
 80060de:	f000 b8b3 	b.w	8006248 <__retarget_lock_release_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000628 	.word	0x20000628

080060e8 <__sinit_lock_acquire>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__sinit_lock_acquire+0x8>)
 80060ea:	f000 b8ac 	b.w	8006246 <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000623 	.word	0x20000623

080060f4 <__sinit_lock_release>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__sinit_lock_release+0x8>)
 80060f6:	f000 b8a7 	b.w	8006248 <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000623 	.word	0x20000623

08006100 <__sinit>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	f7ff fff0 	bl	80060e8 <__sinit_lock_acquire>
 8006108:	69a3      	ldr	r3, [r4, #24]
 800610a:	b11b      	cbz	r3, 8006114 <__sinit+0x14>
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006110:	f7ff bff0 	b.w	80060f4 <__sinit_lock_release>
 8006114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006118:	6523      	str	r3, [r4, #80]	; 0x50
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <__sinit+0x68>)
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <__sinit+0x6c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	62a2      	str	r2, [r4, #40]	; 0x28
 8006122:	42a3      	cmp	r3, r4
 8006124:	bf08      	it	eq
 8006126:	2301      	moveq	r3, #1
 8006128:	4620      	mov	r0, r4
 800612a:	bf08      	it	eq
 800612c:	61a3      	streq	r3, [r4, #24]
 800612e:	f000 f81f 	bl	8006170 <__sfp>
 8006132:	6060      	str	r0, [r4, #4]
 8006134:	4620      	mov	r0, r4
 8006136:	f000 f81b 	bl	8006170 <__sfp>
 800613a:	60a0      	str	r0, [r4, #8]
 800613c:	4620      	mov	r0, r4
 800613e:	f000 f817 	bl	8006170 <__sfp>
 8006142:	2200      	movs	r2, #0
 8006144:	2104      	movs	r1, #4
 8006146:	60e0      	str	r0, [r4, #12]
 8006148:	6860      	ldr	r0, [r4, #4]
 800614a:	f7ff ff81 	bl	8006050 <std>
 800614e:	2201      	movs	r2, #1
 8006150:	2109      	movs	r1, #9
 8006152:	68a0      	ldr	r0, [r4, #8]
 8006154:	f7ff ff7c 	bl	8006050 <std>
 8006158:	2202      	movs	r2, #2
 800615a:	2112      	movs	r1, #18
 800615c:	68e0      	ldr	r0, [r4, #12]
 800615e:	f7ff ff77 	bl	8006050 <std>
 8006162:	2301      	movs	r3, #1
 8006164:	61a3      	str	r3, [r4, #24]
 8006166:	e7d1      	b.n	800610c <__sinit+0xc>
 8006168:	080072f0 	.word	0x080072f0
 800616c:	08006099 	.word	0x08006099

08006170 <__sfp>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	4607      	mov	r7, r0
 8006174:	f7ff ffac 	bl	80060d0 <__sfp_lock_acquire>
 8006178:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <__sfp+0x84>)
 800617a:	681e      	ldr	r6, [r3, #0]
 800617c:	69b3      	ldr	r3, [r6, #24]
 800617e:	b913      	cbnz	r3, 8006186 <__sfp+0x16>
 8006180:	4630      	mov	r0, r6
 8006182:	f7ff ffbd 	bl	8006100 <__sinit>
 8006186:	3648      	adds	r6, #72	; 0x48
 8006188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800618c:	3b01      	subs	r3, #1
 800618e:	d503      	bpl.n	8006198 <__sfp+0x28>
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	b30b      	cbz	r3, 80061d8 <__sfp+0x68>
 8006194:	6836      	ldr	r6, [r6, #0]
 8006196:	e7f7      	b.n	8006188 <__sfp+0x18>
 8006198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800619c:	b9d5      	cbnz	r5, 80061d4 <__sfp+0x64>
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <__sfp+0x88>)
 80061a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061a4:	60e3      	str	r3, [r4, #12]
 80061a6:	6665      	str	r5, [r4, #100]	; 0x64
 80061a8:	f000 f84c 	bl	8006244 <__retarget_lock_init_recursive>
 80061ac:	f7ff ff96 	bl	80060dc <__sfp_lock_release>
 80061b0:	2208      	movs	r2, #8
 80061b2:	4629      	mov	r1, r5
 80061b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061bc:	6025      	str	r5, [r4, #0]
 80061be:	61a5      	str	r5, [r4, #24]
 80061c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061c4:	f7fe fa1a 	bl	80045fc <memset>
 80061c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061d0:	4620      	mov	r0, r4
 80061d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d4:	3468      	adds	r4, #104	; 0x68
 80061d6:	e7d9      	b.n	800618c <__sfp+0x1c>
 80061d8:	2104      	movs	r1, #4
 80061da:	4638      	mov	r0, r7
 80061dc:	f7ff ff62 	bl	80060a4 <__sfmoreglue>
 80061e0:	4604      	mov	r4, r0
 80061e2:	6030      	str	r0, [r6, #0]
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d1d5      	bne.n	8006194 <__sfp+0x24>
 80061e8:	f7ff ff78 	bl	80060dc <__sfp_lock_release>
 80061ec:	230c      	movs	r3, #12
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	e7ee      	b.n	80061d0 <__sfp+0x60>
 80061f2:	bf00      	nop
 80061f4:	080072f0 	.word	0x080072f0
 80061f8:	ffff0001 	.word	0xffff0001

080061fc <_fwalk_reent>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4606      	mov	r6, r0
 8006202:	4688      	mov	r8, r1
 8006204:	2700      	movs	r7, #0
 8006206:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800620a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800620e:	f1b9 0901 	subs.w	r9, r9, #1
 8006212:	d505      	bpl.n	8006220 <_fwalk_reent+0x24>
 8006214:	6824      	ldr	r4, [r4, #0]
 8006216:	2c00      	cmp	r4, #0
 8006218:	d1f7      	bne.n	800620a <_fwalk_reent+0xe>
 800621a:	4638      	mov	r0, r7
 800621c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006220:	89ab      	ldrh	r3, [r5, #12]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d907      	bls.n	8006236 <_fwalk_reent+0x3a>
 8006226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800622a:	3301      	adds	r3, #1
 800622c:	d003      	beq.n	8006236 <_fwalk_reent+0x3a>
 800622e:	4629      	mov	r1, r5
 8006230:	4630      	mov	r0, r6
 8006232:	47c0      	blx	r8
 8006234:	4307      	orrs	r7, r0
 8006236:	3568      	adds	r5, #104	; 0x68
 8006238:	e7e9      	b.n	800620e <_fwalk_reent+0x12>
	...

0800623c <_localeconv_r>:
 800623c:	4800      	ldr	r0, [pc, #0]	; (8006240 <_localeconv_r+0x4>)
 800623e:	4770      	bx	lr
 8006240:	20000160 	.word	0x20000160

08006244 <__retarget_lock_init_recursive>:
 8006244:	4770      	bx	lr

08006246 <__retarget_lock_acquire_recursive>:
 8006246:	4770      	bx	lr

08006248 <__retarget_lock_release_recursive>:
 8006248:	4770      	bx	lr

0800624a <__swhatbuf_r>:
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	460e      	mov	r6, r1
 800624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006252:	4614      	mov	r4, r2
 8006254:	2900      	cmp	r1, #0
 8006256:	461d      	mov	r5, r3
 8006258:	b096      	sub	sp, #88	; 0x58
 800625a:	da07      	bge.n	800626c <__swhatbuf_r+0x22>
 800625c:	2300      	movs	r3, #0
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	89b3      	ldrh	r3, [r6, #12]
 8006262:	061a      	lsls	r2, r3, #24
 8006264:	d410      	bmi.n	8006288 <__swhatbuf_r+0x3e>
 8006266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626a:	e00e      	b.n	800628a <__swhatbuf_r+0x40>
 800626c:	466a      	mov	r2, sp
 800626e:	f000 fef1 	bl	8007054 <_fstat_r>
 8006272:	2800      	cmp	r0, #0
 8006274:	dbf2      	blt.n	800625c <__swhatbuf_r+0x12>
 8006276:	9a01      	ldr	r2, [sp, #4]
 8006278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800627c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006280:	425a      	negs	r2, r3
 8006282:	415a      	adcs	r2, r3
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	e7ee      	b.n	8006266 <__swhatbuf_r+0x1c>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	2000      	movs	r0, #0
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	b016      	add	sp, #88	; 0x58
 8006290:	bd70      	pop	{r4, r5, r6, pc}
	...

08006294 <__smakebuf_r>:
 8006294:	898b      	ldrh	r3, [r1, #12]
 8006296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006298:	079d      	lsls	r5, r3, #30
 800629a:	4606      	mov	r6, r0
 800629c:	460c      	mov	r4, r1
 800629e:	d507      	bpl.n	80062b0 <__smakebuf_r+0x1c>
 80062a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	2301      	movs	r3, #1
 80062aa:	6163      	str	r3, [r4, #20]
 80062ac:	b002      	add	sp, #8
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	466a      	mov	r2, sp
 80062b2:	ab01      	add	r3, sp, #4
 80062b4:	f7ff ffc9 	bl	800624a <__swhatbuf_r>
 80062b8:	9900      	ldr	r1, [sp, #0]
 80062ba:	4605      	mov	r5, r0
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 fc29 	bl	8006b14 <_malloc_r>
 80062c2:	b948      	cbnz	r0, 80062d8 <__smakebuf_r+0x44>
 80062c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c8:	059a      	lsls	r2, r3, #22
 80062ca:	d4ef      	bmi.n	80062ac <__smakebuf_r+0x18>
 80062cc:	f023 0303 	bic.w	r3, r3, #3
 80062d0:	f043 0302 	orr.w	r3, r3, #2
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	e7e3      	b.n	80062a0 <__smakebuf_r+0xc>
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <__smakebuf_r+0x7c>)
 80062da:	62b3      	str	r3, [r6, #40]	; 0x28
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	6020      	str	r0, [r4, #0]
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	9b00      	ldr	r3, [sp, #0]
 80062e8:	6120      	str	r0, [r4, #16]
 80062ea:	6163      	str	r3, [r4, #20]
 80062ec:	9b01      	ldr	r3, [sp, #4]
 80062ee:	b15b      	cbz	r3, 8006308 <__smakebuf_r+0x74>
 80062f0:	4630      	mov	r0, r6
 80062f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062f6:	f000 febf 	bl	8007078 <_isatty_r>
 80062fa:	b128      	cbz	r0, 8006308 <__smakebuf_r+0x74>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	89a0      	ldrh	r0, [r4, #12]
 800630a:	4305      	orrs	r5, r0
 800630c:	81a5      	strh	r5, [r4, #12]
 800630e:	e7cd      	b.n	80062ac <__smakebuf_r+0x18>
 8006310:	08006099 	.word	0x08006099

08006314 <malloc>:
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <malloc+0xc>)
 8006316:	4601      	mov	r1, r0
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	f000 bbfb 	b.w	8006b14 <_malloc_r>
 800631e:	bf00      	nop
 8006320:	2000000c 	.word	0x2000000c

08006324 <memchr>:
 8006324:	4603      	mov	r3, r0
 8006326:	b510      	push	{r4, lr}
 8006328:	b2c9      	uxtb	r1, r1
 800632a:	4402      	add	r2, r0
 800632c:	4293      	cmp	r3, r2
 800632e:	4618      	mov	r0, r3
 8006330:	d101      	bne.n	8006336 <memchr+0x12>
 8006332:	2000      	movs	r0, #0
 8006334:	e003      	b.n	800633e <memchr+0x1a>
 8006336:	7804      	ldrb	r4, [r0, #0]
 8006338:	3301      	adds	r3, #1
 800633a:	428c      	cmp	r4, r1
 800633c:	d1f6      	bne.n	800632c <memchr+0x8>
 800633e:	bd10      	pop	{r4, pc}

08006340 <memcpy>:
 8006340:	440a      	add	r2, r1
 8006342:	4291      	cmp	r1, r2
 8006344:	f100 33ff 	add.w	r3, r0, #4294967295
 8006348:	d100      	bne.n	800634c <memcpy+0xc>
 800634a:	4770      	bx	lr
 800634c:	b510      	push	{r4, lr}
 800634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006352:	4291      	cmp	r1, r2
 8006354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006358:	d1f9      	bne.n	800634e <memcpy+0xe>
 800635a:	bd10      	pop	{r4, pc}

0800635c <_Balloc>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
 8006364:	b976      	cbnz	r6, 8006384 <_Balloc+0x28>
 8006366:	2010      	movs	r0, #16
 8006368:	f7ff ffd4 	bl	8006314 <malloc>
 800636c:	4602      	mov	r2, r0
 800636e:	6260      	str	r0, [r4, #36]	; 0x24
 8006370:	b920      	cbnz	r0, 800637c <_Balloc+0x20>
 8006372:	2166      	movs	r1, #102	; 0x66
 8006374:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <_Balloc+0x78>)
 8006376:	4818      	ldr	r0, [pc, #96]	; (80063d8 <_Balloc+0x7c>)
 8006378:	f000 fe2c 	bl	8006fd4 <__assert_func>
 800637c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006380:	6006      	str	r6, [r0, #0]
 8006382:	60c6      	str	r6, [r0, #12]
 8006384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006386:	68f3      	ldr	r3, [r6, #12]
 8006388:	b183      	cbz	r3, 80063ac <_Balloc+0x50>
 800638a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006392:	b9b8      	cbnz	r0, 80063c4 <_Balloc+0x68>
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f605 	lsl.w	r6, r1, r5
 800639a:	1d72      	adds	r2, r6, #5
 800639c:	4620      	mov	r0, r4
 800639e:	0092      	lsls	r2, r2, #2
 80063a0:	f000 fb5e 	bl	8006a60 <_calloc_r>
 80063a4:	b160      	cbz	r0, 80063c0 <_Balloc+0x64>
 80063a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063aa:	e00e      	b.n	80063ca <_Balloc+0x6e>
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	2104      	movs	r1, #4
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fb55 	bl	8006a60 <_calloc_r>
 80063b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b8:	60f0      	str	r0, [r6, #12]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e4      	bne.n	800638a <_Balloc+0x2e>
 80063c0:	2000      	movs	r0, #0
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	6802      	ldr	r2, [r0, #0]
 80063c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ca:	2300      	movs	r3, #0
 80063cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063d0:	e7f7      	b.n	80063c2 <_Balloc+0x66>
 80063d2:	bf00      	nop
 80063d4:	08007335 	.word	0x08007335
 80063d8:	0800741c 	.word	0x0800741c

080063dc <_Bfree>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b976      	cbnz	r6, 8006404 <_Bfree+0x28>
 80063e6:	2010      	movs	r0, #16
 80063e8:	f7ff ff94 	bl	8006314 <malloc>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6268      	str	r0, [r5, #36]	; 0x24
 80063f0:	b920      	cbnz	r0, 80063fc <_Bfree+0x20>
 80063f2:	218a      	movs	r1, #138	; 0x8a
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <_Bfree+0x3c>)
 80063f6:	4809      	ldr	r0, [pc, #36]	; (800641c <_Bfree+0x40>)
 80063f8:	f000 fdec 	bl	8006fd4 <__assert_func>
 80063fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006400:	6006      	str	r6, [r0, #0]
 8006402:	60c6      	str	r6, [r0, #12]
 8006404:	b13c      	cbz	r4, 8006416 <_Bfree+0x3a>
 8006406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006408:	6862      	ldr	r2, [r4, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006410:	6021      	str	r1, [r4, #0]
 8006412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	08007335 	.word	0x08007335
 800641c:	0800741c 	.word	0x0800741c

08006420 <__multadd>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	4698      	mov	r8, r3
 8006426:	460c      	mov	r4, r1
 8006428:	2300      	movs	r3, #0
 800642a:	690e      	ldr	r6, [r1, #16]
 800642c:	4607      	mov	r7, r0
 800642e:	f101 0014 	add.w	r0, r1, #20
 8006432:	6805      	ldr	r5, [r0, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	b2a9      	uxth	r1, r5
 8006438:	fb02 8101 	mla	r1, r2, r1, r8
 800643c:	0c2d      	lsrs	r5, r5, #16
 800643e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006442:	fb02 c505 	mla	r5, r2, r5, ip
 8006446:	b289      	uxth	r1, r1
 8006448:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800644c:	429e      	cmp	r6, r3
 800644e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006452:	f840 1b04 	str.w	r1, [r0], #4
 8006456:	dcec      	bgt.n	8006432 <__multadd+0x12>
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d022      	beq.n	80064a4 <__multadd+0x84>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	42b3      	cmp	r3, r6
 8006462:	dc19      	bgt.n	8006498 <__multadd+0x78>
 8006464:	6861      	ldr	r1, [r4, #4]
 8006466:	4638      	mov	r0, r7
 8006468:	3101      	adds	r1, #1
 800646a:	f7ff ff77 	bl	800635c <_Balloc>
 800646e:	4605      	mov	r5, r0
 8006470:	b928      	cbnz	r0, 800647e <__multadd+0x5e>
 8006472:	4602      	mov	r2, r0
 8006474:	21b5      	movs	r1, #181	; 0xb5
 8006476:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <__multadd+0x8c>)
 8006478:	480d      	ldr	r0, [pc, #52]	; (80064b0 <__multadd+0x90>)
 800647a:	f000 fdab 	bl	8006fd4 <__assert_func>
 800647e:	6922      	ldr	r2, [r4, #16]
 8006480:	f104 010c 	add.w	r1, r4, #12
 8006484:	3202      	adds	r2, #2
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	300c      	adds	r0, #12
 800648a:	f7ff ff59 	bl	8006340 <memcpy>
 800648e:	4621      	mov	r1, r4
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa3 	bl	80063dc <_Bfree>
 8006496:	462c      	mov	r4, r5
 8006498:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800649c:	3601      	adds	r6, #1
 800649e:	f8c3 8014 	str.w	r8, [r3, #20]
 80064a2:	6126      	str	r6, [r4, #16]
 80064a4:	4620      	mov	r0, r4
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064aa:	bf00      	nop
 80064ac:	080073ab 	.word	0x080073ab
 80064b0:	0800741c 	.word	0x0800741c

080064b4 <__hi0bits>:
 80064b4:	0c02      	lsrs	r2, r0, #16
 80064b6:	0412      	lsls	r2, r2, #16
 80064b8:	4603      	mov	r3, r0
 80064ba:	b9ca      	cbnz	r2, 80064f0 <__hi0bits+0x3c>
 80064bc:	0403      	lsls	r3, r0, #16
 80064be:	2010      	movs	r0, #16
 80064c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064c4:	bf04      	itt	eq
 80064c6:	021b      	lsleq	r3, r3, #8
 80064c8:	3008      	addeq	r0, #8
 80064ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064ce:	bf04      	itt	eq
 80064d0:	011b      	lsleq	r3, r3, #4
 80064d2:	3004      	addeq	r0, #4
 80064d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064d8:	bf04      	itt	eq
 80064da:	009b      	lsleq	r3, r3, #2
 80064dc:	3002      	addeq	r0, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	db05      	blt.n	80064ee <__hi0bits+0x3a>
 80064e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064e6:	f100 0001 	add.w	r0, r0, #1
 80064ea:	bf08      	it	eq
 80064ec:	2020      	moveq	r0, #32
 80064ee:	4770      	bx	lr
 80064f0:	2000      	movs	r0, #0
 80064f2:	e7e5      	b.n	80064c0 <__hi0bits+0xc>

080064f4 <__lo0bits>:
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	4602      	mov	r2, r0
 80064f8:	f013 0007 	ands.w	r0, r3, #7
 80064fc:	d00b      	beq.n	8006516 <__lo0bits+0x22>
 80064fe:	07d9      	lsls	r1, r3, #31
 8006500:	d422      	bmi.n	8006548 <__lo0bits+0x54>
 8006502:	0798      	lsls	r0, r3, #30
 8006504:	bf49      	itett	mi
 8006506:	085b      	lsrmi	r3, r3, #1
 8006508:	089b      	lsrpl	r3, r3, #2
 800650a:	2001      	movmi	r0, #1
 800650c:	6013      	strmi	r3, [r2, #0]
 800650e:	bf5c      	itt	pl
 8006510:	2002      	movpl	r0, #2
 8006512:	6013      	strpl	r3, [r2, #0]
 8006514:	4770      	bx	lr
 8006516:	b299      	uxth	r1, r3
 8006518:	b909      	cbnz	r1, 800651e <__lo0bits+0x2a>
 800651a:	2010      	movs	r0, #16
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006522:	bf04      	itt	eq
 8006524:	0a1b      	lsreq	r3, r3, #8
 8006526:	3008      	addeq	r0, #8
 8006528:	0719      	lsls	r1, r3, #28
 800652a:	bf04      	itt	eq
 800652c:	091b      	lsreq	r3, r3, #4
 800652e:	3004      	addeq	r0, #4
 8006530:	0799      	lsls	r1, r3, #30
 8006532:	bf04      	itt	eq
 8006534:	089b      	lsreq	r3, r3, #2
 8006536:	3002      	addeq	r0, #2
 8006538:	07d9      	lsls	r1, r3, #31
 800653a:	d403      	bmi.n	8006544 <__lo0bits+0x50>
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	f100 0001 	add.w	r0, r0, #1
 8006542:	d003      	beq.n	800654c <__lo0bits+0x58>
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4770      	bx	lr
 8006548:	2000      	movs	r0, #0
 800654a:	4770      	bx	lr
 800654c:	2020      	movs	r0, #32
 800654e:	4770      	bx	lr

08006550 <__i2b>:
 8006550:	b510      	push	{r4, lr}
 8006552:	460c      	mov	r4, r1
 8006554:	2101      	movs	r1, #1
 8006556:	f7ff ff01 	bl	800635c <_Balloc>
 800655a:	4602      	mov	r2, r0
 800655c:	b928      	cbnz	r0, 800656a <__i2b+0x1a>
 800655e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006562:	4b04      	ldr	r3, [pc, #16]	; (8006574 <__i2b+0x24>)
 8006564:	4804      	ldr	r0, [pc, #16]	; (8006578 <__i2b+0x28>)
 8006566:	f000 fd35 	bl	8006fd4 <__assert_func>
 800656a:	2301      	movs	r3, #1
 800656c:	6144      	str	r4, [r0, #20]
 800656e:	6103      	str	r3, [r0, #16]
 8006570:	bd10      	pop	{r4, pc}
 8006572:	bf00      	nop
 8006574:	080073ab 	.word	0x080073ab
 8006578:	0800741c 	.word	0x0800741c

0800657c <__multiply>:
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	4614      	mov	r4, r2
 8006582:	690a      	ldr	r2, [r1, #16]
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	460d      	mov	r5, r1
 8006588:	429a      	cmp	r2, r3
 800658a:	bfbe      	ittt	lt
 800658c:	460b      	movlt	r3, r1
 800658e:	4625      	movlt	r5, r4
 8006590:	461c      	movlt	r4, r3
 8006592:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006596:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800659a:	68ab      	ldr	r3, [r5, #8]
 800659c:	6869      	ldr	r1, [r5, #4]
 800659e:	eb0a 0709 	add.w	r7, sl, r9
 80065a2:	42bb      	cmp	r3, r7
 80065a4:	b085      	sub	sp, #20
 80065a6:	bfb8      	it	lt
 80065a8:	3101      	addlt	r1, #1
 80065aa:	f7ff fed7 	bl	800635c <_Balloc>
 80065ae:	b930      	cbnz	r0, 80065be <__multiply+0x42>
 80065b0:	4602      	mov	r2, r0
 80065b2:	f240 115d 	movw	r1, #349	; 0x15d
 80065b6:	4b41      	ldr	r3, [pc, #260]	; (80066bc <__multiply+0x140>)
 80065b8:	4841      	ldr	r0, [pc, #260]	; (80066c0 <__multiply+0x144>)
 80065ba:	f000 fd0b 	bl	8006fd4 <__assert_func>
 80065be:	f100 0614 	add.w	r6, r0, #20
 80065c2:	4633      	mov	r3, r6
 80065c4:	2200      	movs	r2, #0
 80065c6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065ca:	4543      	cmp	r3, r8
 80065cc:	d31e      	bcc.n	800660c <__multiply+0x90>
 80065ce:	f105 0c14 	add.w	ip, r5, #20
 80065d2:	f104 0314 	add.w	r3, r4, #20
 80065d6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065da:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80065de:	9202      	str	r2, [sp, #8]
 80065e0:	ebac 0205 	sub.w	r2, ip, r5
 80065e4:	3a15      	subs	r2, #21
 80065e6:	f022 0203 	bic.w	r2, r2, #3
 80065ea:	3204      	adds	r2, #4
 80065ec:	f105 0115 	add.w	r1, r5, #21
 80065f0:	458c      	cmp	ip, r1
 80065f2:	bf38      	it	cc
 80065f4:	2204      	movcc	r2, #4
 80065f6:	9201      	str	r2, [sp, #4]
 80065f8:	9a02      	ldr	r2, [sp, #8]
 80065fa:	9303      	str	r3, [sp, #12]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d808      	bhi.n	8006612 <__multiply+0x96>
 8006600:	2f00      	cmp	r7, #0
 8006602:	dc55      	bgt.n	80066b0 <__multiply+0x134>
 8006604:	6107      	str	r7, [r0, #16]
 8006606:	b005      	add	sp, #20
 8006608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660c:	f843 2b04 	str.w	r2, [r3], #4
 8006610:	e7db      	b.n	80065ca <__multiply+0x4e>
 8006612:	f8b3 a000 	ldrh.w	sl, [r3]
 8006616:	f1ba 0f00 	cmp.w	sl, #0
 800661a:	d020      	beq.n	800665e <__multiply+0xe2>
 800661c:	46b1      	mov	r9, r6
 800661e:	2200      	movs	r2, #0
 8006620:	f105 0e14 	add.w	lr, r5, #20
 8006624:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006628:	f8d9 b000 	ldr.w	fp, [r9]
 800662c:	b2a1      	uxth	r1, r4
 800662e:	fa1f fb8b 	uxth.w	fp, fp
 8006632:	fb0a b101 	mla	r1, sl, r1, fp
 8006636:	4411      	add	r1, r2
 8006638:	f8d9 2000 	ldr.w	r2, [r9]
 800663c:	0c24      	lsrs	r4, r4, #16
 800663e:	0c12      	lsrs	r2, r2, #16
 8006640:	fb0a 2404 	mla	r4, sl, r4, r2
 8006644:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006648:	b289      	uxth	r1, r1
 800664a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800664e:	45f4      	cmp	ip, lr
 8006650:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006654:	f849 1b04 	str.w	r1, [r9], #4
 8006658:	d8e4      	bhi.n	8006624 <__multiply+0xa8>
 800665a:	9901      	ldr	r1, [sp, #4]
 800665c:	5072      	str	r2, [r6, r1]
 800665e:	9a03      	ldr	r2, [sp, #12]
 8006660:	3304      	adds	r3, #4
 8006662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006666:	f1b9 0f00 	cmp.w	r9, #0
 800666a:	d01f      	beq.n	80066ac <__multiply+0x130>
 800666c:	46b6      	mov	lr, r6
 800666e:	f04f 0a00 	mov.w	sl, #0
 8006672:	6834      	ldr	r4, [r6, #0]
 8006674:	f105 0114 	add.w	r1, r5, #20
 8006678:	880a      	ldrh	r2, [r1, #0]
 800667a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800667e:	b2a4      	uxth	r4, r4
 8006680:	fb09 b202 	mla	r2, r9, r2, fp
 8006684:	4492      	add	sl, r2
 8006686:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800668a:	f84e 4b04 	str.w	r4, [lr], #4
 800668e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006692:	f8be 2000 	ldrh.w	r2, [lr]
 8006696:	0c24      	lsrs	r4, r4, #16
 8006698:	fb09 2404 	mla	r4, r9, r4, r2
 800669c:	458c      	cmp	ip, r1
 800669e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066a6:	d8e7      	bhi.n	8006678 <__multiply+0xfc>
 80066a8:	9a01      	ldr	r2, [sp, #4]
 80066aa:	50b4      	str	r4, [r6, r2]
 80066ac:	3604      	adds	r6, #4
 80066ae:	e7a3      	b.n	80065f8 <__multiply+0x7c>
 80066b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1a5      	bne.n	8006604 <__multiply+0x88>
 80066b8:	3f01      	subs	r7, #1
 80066ba:	e7a1      	b.n	8006600 <__multiply+0x84>
 80066bc:	080073ab 	.word	0x080073ab
 80066c0:	0800741c 	.word	0x0800741c

080066c4 <__pow5mult>:
 80066c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4615      	mov	r5, r2
 80066ca:	f012 0203 	ands.w	r2, r2, #3
 80066ce:	4606      	mov	r6, r0
 80066d0:	460f      	mov	r7, r1
 80066d2:	d007      	beq.n	80066e4 <__pow5mult+0x20>
 80066d4:	4c25      	ldr	r4, [pc, #148]	; (800676c <__pow5mult+0xa8>)
 80066d6:	3a01      	subs	r2, #1
 80066d8:	2300      	movs	r3, #0
 80066da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066de:	f7ff fe9f 	bl	8006420 <__multadd>
 80066e2:	4607      	mov	r7, r0
 80066e4:	10ad      	asrs	r5, r5, #2
 80066e6:	d03d      	beq.n	8006764 <__pow5mult+0xa0>
 80066e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066ea:	b97c      	cbnz	r4, 800670c <__pow5mult+0x48>
 80066ec:	2010      	movs	r0, #16
 80066ee:	f7ff fe11 	bl	8006314 <malloc>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6270      	str	r0, [r6, #36]	; 0x24
 80066f6:	b928      	cbnz	r0, 8006704 <__pow5mult+0x40>
 80066f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <__pow5mult+0xac>)
 80066fe:	481d      	ldr	r0, [pc, #116]	; (8006774 <__pow5mult+0xb0>)
 8006700:	f000 fc68 	bl	8006fd4 <__assert_func>
 8006704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006708:	6004      	str	r4, [r0, #0]
 800670a:	60c4      	str	r4, [r0, #12]
 800670c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006714:	b94c      	cbnz	r4, 800672a <__pow5mult+0x66>
 8006716:	f240 2171 	movw	r1, #625	; 0x271
 800671a:	4630      	mov	r0, r6
 800671c:	f7ff ff18 	bl	8006550 <__i2b>
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	f8c8 0008 	str.w	r0, [r8, #8]
 8006728:	6003      	str	r3, [r0, #0]
 800672a:	f04f 0900 	mov.w	r9, #0
 800672e:	07eb      	lsls	r3, r5, #31
 8006730:	d50a      	bpl.n	8006748 <__pow5mult+0x84>
 8006732:	4639      	mov	r1, r7
 8006734:	4622      	mov	r2, r4
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff ff20 	bl	800657c <__multiply>
 800673c:	4680      	mov	r8, r0
 800673e:	4639      	mov	r1, r7
 8006740:	4630      	mov	r0, r6
 8006742:	f7ff fe4b 	bl	80063dc <_Bfree>
 8006746:	4647      	mov	r7, r8
 8006748:	106d      	asrs	r5, r5, #1
 800674a:	d00b      	beq.n	8006764 <__pow5mult+0xa0>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	b938      	cbnz	r0, 8006760 <__pow5mult+0x9c>
 8006750:	4622      	mov	r2, r4
 8006752:	4621      	mov	r1, r4
 8006754:	4630      	mov	r0, r6
 8006756:	f7ff ff11 	bl	800657c <__multiply>
 800675a:	6020      	str	r0, [r4, #0]
 800675c:	f8c0 9000 	str.w	r9, [r0]
 8006760:	4604      	mov	r4, r0
 8006762:	e7e4      	b.n	800672e <__pow5mult+0x6a>
 8006764:	4638      	mov	r0, r7
 8006766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676a:	bf00      	nop
 800676c:	08007570 	.word	0x08007570
 8006770:	08007335 	.word	0x08007335
 8006774:	0800741c 	.word	0x0800741c

08006778 <__lshift>:
 8006778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677c:	460c      	mov	r4, r1
 800677e:	4607      	mov	r7, r0
 8006780:	4691      	mov	r9, r2
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	6849      	ldr	r1, [r1, #4]
 8006786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006790:	f108 0601 	add.w	r6, r8, #1
 8006794:	42b3      	cmp	r3, r6
 8006796:	db0b      	blt.n	80067b0 <__lshift+0x38>
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff fddf 	bl	800635c <_Balloc>
 800679e:	4605      	mov	r5, r0
 80067a0:	b948      	cbnz	r0, 80067b6 <__lshift+0x3e>
 80067a2:	4602      	mov	r2, r0
 80067a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <__lshift+0xd0>)
 80067aa:	4828      	ldr	r0, [pc, #160]	; (800684c <__lshift+0xd4>)
 80067ac:	f000 fc12 	bl	8006fd4 <__assert_func>
 80067b0:	3101      	adds	r1, #1
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	e7ee      	b.n	8006794 <__lshift+0x1c>
 80067b6:	2300      	movs	r3, #0
 80067b8:	f100 0114 	add.w	r1, r0, #20
 80067bc:	f100 0210 	add.w	r2, r0, #16
 80067c0:	4618      	mov	r0, r3
 80067c2:	4553      	cmp	r3, sl
 80067c4:	db33      	blt.n	800682e <__lshift+0xb6>
 80067c6:	6920      	ldr	r0, [r4, #16]
 80067c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067cc:	f104 0314 	add.w	r3, r4, #20
 80067d0:	f019 091f 	ands.w	r9, r9, #31
 80067d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067dc:	d02b      	beq.n	8006836 <__lshift+0xbe>
 80067de:	468a      	mov	sl, r1
 80067e0:	2200      	movs	r2, #0
 80067e2:	f1c9 0e20 	rsb	lr, r9, #32
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	fa00 f009 	lsl.w	r0, r0, r9
 80067ec:	4302      	orrs	r2, r0
 80067ee:	f84a 2b04 	str.w	r2, [sl], #4
 80067f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067f6:	459c      	cmp	ip, r3
 80067f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80067fc:	d8f3      	bhi.n	80067e6 <__lshift+0x6e>
 80067fe:	ebac 0304 	sub.w	r3, ip, r4
 8006802:	3b15      	subs	r3, #21
 8006804:	f023 0303 	bic.w	r3, r3, #3
 8006808:	3304      	adds	r3, #4
 800680a:	f104 0015 	add.w	r0, r4, #21
 800680e:	4584      	cmp	ip, r0
 8006810:	bf38      	it	cc
 8006812:	2304      	movcc	r3, #4
 8006814:	50ca      	str	r2, [r1, r3]
 8006816:	b10a      	cbz	r2, 800681c <__lshift+0xa4>
 8006818:	f108 0602 	add.w	r6, r8, #2
 800681c:	3e01      	subs	r6, #1
 800681e:	4638      	mov	r0, r7
 8006820:	4621      	mov	r1, r4
 8006822:	612e      	str	r6, [r5, #16]
 8006824:	f7ff fdda 	bl	80063dc <_Bfree>
 8006828:	4628      	mov	r0, r5
 800682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006832:	3301      	adds	r3, #1
 8006834:	e7c5      	b.n	80067c2 <__lshift+0x4a>
 8006836:	3904      	subs	r1, #4
 8006838:	f853 2b04 	ldr.w	r2, [r3], #4
 800683c:	459c      	cmp	ip, r3
 800683e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006842:	d8f9      	bhi.n	8006838 <__lshift+0xc0>
 8006844:	e7ea      	b.n	800681c <__lshift+0xa4>
 8006846:	bf00      	nop
 8006848:	080073ab 	.word	0x080073ab
 800684c:	0800741c 	.word	0x0800741c

08006850 <__mcmp>:
 8006850:	4603      	mov	r3, r0
 8006852:	690a      	ldr	r2, [r1, #16]
 8006854:	6900      	ldr	r0, [r0, #16]
 8006856:	b530      	push	{r4, r5, lr}
 8006858:	1a80      	subs	r0, r0, r2
 800685a:	d10d      	bne.n	8006878 <__mcmp+0x28>
 800685c:	3314      	adds	r3, #20
 800685e:	3114      	adds	r1, #20
 8006860:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006864:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006868:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800686c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006870:	4295      	cmp	r5, r2
 8006872:	d002      	beq.n	800687a <__mcmp+0x2a>
 8006874:	d304      	bcc.n	8006880 <__mcmp+0x30>
 8006876:	2001      	movs	r0, #1
 8006878:	bd30      	pop	{r4, r5, pc}
 800687a:	42a3      	cmp	r3, r4
 800687c:	d3f4      	bcc.n	8006868 <__mcmp+0x18>
 800687e:	e7fb      	b.n	8006878 <__mcmp+0x28>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e7f8      	b.n	8006878 <__mcmp+0x28>
	...

08006888 <__mdiff>:
 8006888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	460c      	mov	r4, r1
 800688e:	4606      	mov	r6, r0
 8006890:	4611      	mov	r1, r2
 8006892:	4620      	mov	r0, r4
 8006894:	4692      	mov	sl, r2
 8006896:	f7ff ffdb 	bl	8006850 <__mcmp>
 800689a:	1e05      	subs	r5, r0, #0
 800689c:	d111      	bne.n	80068c2 <__mdiff+0x3a>
 800689e:	4629      	mov	r1, r5
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7ff fd5b 	bl	800635c <_Balloc>
 80068a6:	4602      	mov	r2, r0
 80068a8:	b928      	cbnz	r0, 80068b6 <__mdiff+0x2e>
 80068aa:	f240 2132 	movw	r1, #562	; 0x232
 80068ae:	4b3c      	ldr	r3, [pc, #240]	; (80069a0 <__mdiff+0x118>)
 80068b0:	483c      	ldr	r0, [pc, #240]	; (80069a4 <__mdiff+0x11c>)
 80068b2:	f000 fb8f 	bl	8006fd4 <__assert_func>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068bc:	4610      	mov	r0, r2
 80068be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	bfa4      	itt	ge
 80068c4:	4653      	movge	r3, sl
 80068c6:	46a2      	movge	sl, r4
 80068c8:	4630      	mov	r0, r6
 80068ca:	f8da 1004 	ldr.w	r1, [sl, #4]
 80068ce:	bfa6      	itte	ge
 80068d0:	461c      	movge	r4, r3
 80068d2:	2500      	movge	r5, #0
 80068d4:	2501      	movlt	r5, #1
 80068d6:	f7ff fd41 	bl	800635c <_Balloc>
 80068da:	4602      	mov	r2, r0
 80068dc:	b918      	cbnz	r0, 80068e6 <__mdiff+0x5e>
 80068de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068e2:	4b2f      	ldr	r3, [pc, #188]	; (80069a0 <__mdiff+0x118>)
 80068e4:	e7e4      	b.n	80068b0 <__mdiff+0x28>
 80068e6:	f100 0814 	add.w	r8, r0, #20
 80068ea:	f8da 7010 	ldr.w	r7, [sl, #16]
 80068ee:	60c5      	str	r5, [r0, #12]
 80068f0:	f04f 0c00 	mov.w	ip, #0
 80068f4:	f10a 0514 	add.w	r5, sl, #20
 80068f8:	f10a 0010 	add.w	r0, sl, #16
 80068fc:	46c2      	mov	sl, r8
 80068fe:	6926      	ldr	r6, [r4, #16]
 8006900:	f104 0914 	add.w	r9, r4, #20
 8006904:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006908:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800690c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006910:	f859 3b04 	ldr.w	r3, [r9], #4
 8006914:	fa1f f18b 	uxth.w	r1, fp
 8006918:	4461      	add	r1, ip
 800691a:	fa1f fc83 	uxth.w	ip, r3
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	eba1 010c 	sub.w	r1, r1, ip
 8006924:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006928:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800692c:	b289      	uxth	r1, r1
 800692e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006932:	454e      	cmp	r6, r9
 8006934:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006938:	f84a 3b04 	str.w	r3, [sl], #4
 800693c:	d8e6      	bhi.n	800690c <__mdiff+0x84>
 800693e:	1b33      	subs	r3, r6, r4
 8006940:	3b15      	subs	r3, #21
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	3415      	adds	r4, #21
 8006948:	3304      	adds	r3, #4
 800694a:	42a6      	cmp	r6, r4
 800694c:	bf38      	it	cc
 800694e:	2304      	movcc	r3, #4
 8006950:	441d      	add	r5, r3
 8006952:	4443      	add	r3, r8
 8006954:	461e      	mov	r6, r3
 8006956:	462c      	mov	r4, r5
 8006958:	4574      	cmp	r4, lr
 800695a:	d30e      	bcc.n	800697a <__mdiff+0xf2>
 800695c:	f10e 0103 	add.w	r1, lr, #3
 8006960:	1b49      	subs	r1, r1, r5
 8006962:	f021 0103 	bic.w	r1, r1, #3
 8006966:	3d03      	subs	r5, #3
 8006968:	45ae      	cmp	lr, r5
 800696a:	bf38      	it	cc
 800696c:	2100      	movcc	r1, #0
 800696e:	4419      	add	r1, r3
 8006970:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006974:	b18b      	cbz	r3, 800699a <__mdiff+0x112>
 8006976:	6117      	str	r7, [r2, #16]
 8006978:	e7a0      	b.n	80068bc <__mdiff+0x34>
 800697a:	f854 8b04 	ldr.w	r8, [r4], #4
 800697e:	fa1f f188 	uxth.w	r1, r8
 8006982:	4461      	add	r1, ip
 8006984:	1408      	asrs	r0, r1, #16
 8006986:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800698a:	b289      	uxth	r1, r1
 800698c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006994:	f846 1b04 	str.w	r1, [r6], #4
 8006998:	e7de      	b.n	8006958 <__mdiff+0xd0>
 800699a:	3f01      	subs	r7, #1
 800699c:	e7e8      	b.n	8006970 <__mdiff+0xe8>
 800699e:	bf00      	nop
 80069a0:	080073ab 	.word	0x080073ab
 80069a4:	0800741c 	.word	0x0800741c

080069a8 <__d2b>:
 80069a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069ac:	2101      	movs	r1, #1
 80069ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80069b2:	4690      	mov	r8, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	f7ff fcd1 	bl	800635c <_Balloc>
 80069ba:	4604      	mov	r4, r0
 80069bc:	b930      	cbnz	r0, 80069cc <__d2b+0x24>
 80069be:	4602      	mov	r2, r0
 80069c0:	f240 310a 	movw	r1, #778	; 0x30a
 80069c4:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <__d2b+0xb0>)
 80069c6:	4825      	ldr	r0, [pc, #148]	; (8006a5c <__d2b+0xb4>)
 80069c8:	f000 fb04 	bl	8006fd4 <__assert_func>
 80069cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069d4:	bb2d      	cbnz	r5, 8006a22 <__d2b+0x7a>
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	f1b8 0300 	subs.w	r3, r8, #0
 80069dc:	d026      	beq.n	8006a2c <__d2b+0x84>
 80069de:	4668      	mov	r0, sp
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	f7ff fd87 	bl	80064f4 <__lo0bits>
 80069e6:	9900      	ldr	r1, [sp, #0]
 80069e8:	b1f0      	cbz	r0, 8006a28 <__d2b+0x80>
 80069ea:	9a01      	ldr	r2, [sp, #4]
 80069ec:	f1c0 0320 	rsb	r3, r0, #32
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	430b      	orrs	r3, r1
 80069f6:	40c2      	lsrs	r2, r0
 80069f8:	6163      	str	r3, [r4, #20]
 80069fa:	9201      	str	r2, [sp, #4]
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2102      	movne	r1, #2
 8006a04:	2101      	moveq	r1, #1
 8006a06:	61a3      	str	r3, [r4, #24]
 8006a08:	6121      	str	r1, [r4, #16]
 8006a0a:	b1c5      	cbz	r5, 8006a3e <__d2b+0x96>
 8006a0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a10:	4405      	add	r5, r0
 8006a12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a16:	603d      	str	r5, [r7, #0]
 8006a18:	6030      	str	r0, [r6, #0]
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	b002      	add	sp, #8
 8006a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a26:	e7d6      	b.n	80069d6 <__d2b+0x2e>
 8006a28:	6161      	str	r1, [r4, #20]
 8006a2a:	e7e7      	b.n	80069fc <__d2b+0x54>
 8006a2c:	a801      	add	r0, sp, #4
 8006a2e:	f7ff fd61 	bl	80064f4 <__lo0bits>
 8006a32:	2101      	movs	r1, #1
 8006a34:	9b01      	ldr	r3, [sp, #4]
 8006a36:	6121      	str	r1, [r4, #16]
 8006a38:	6163      	str	r3, [r4, #20]
 8006a3a:	3020      	adds	r0, #32
 8006a3c:	e7e5      	b.n	8006a0a <__d2b+0x62>
 8006a3e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a46:	6038      	str	r0, [r7, #0]
 8006a48:	6918      	ldr	r0, [r3, #16]
 8006a4a:	f7ff fd33 	bl	80064b4 <__hi0bits>
 8006a4e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a52:	6031      	str	r1, [r6, #0]
 8006a54:	e7e1      	b.n	8006a1a <__d2b+0x72>
 8006a56:	bf00      	nop
 8006a58:	080073ab 	.word	0x080073ab
 8006a5c:	0800741c 	.word	0x0800741c

08006a60 <_calloc_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	fb02 f501 	mul.w	r5, r2, r1
 8006a66:	4629      	mov	r1, r5
 8006a68:	f000 f854 	bl	8006b14 <_malloc_r>
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	b118      	cbz	r0, 8006a78 <_calloc_r+0x18>
 8006a70:	462a      	mov	r2, r5
 8006a72:	2100      	movs	r1, #0
 8006a74:	f7fd fdc2 	bl	80045fc <memset>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}

08006a7c <_free_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4605      	mov	r5, r0
 8006a80:	2900      	cmp	r1, #0
 8006a82:	d043      	beq.n	8006b0c <_free_r+0x90>
 8006a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a88:	1f0c      	subs	r4, r1, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bfb8      	it	lt
 8006a8e:	18e4      	addlt	r4, r4, r3
 8006a90:	f000 fb26 	bl	80070e0 <__malloc_lock>
 8006a94:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <_free_r+0x94>)
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	4610      	mov	r0, r2
 8006a9a:	b933      	cbnz	r3, 8006aaa <_free_r+0x2e>
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	6014      	str	r4, [r2, #0]
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aa6:	f000 bb21 	b.w	80070ec <__malloc_unlock>
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	d90a      	bls.n	8006ac4 <_free_r+0x48>
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	1862      	adds	r2, r4, r1
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bf01      	itttt	eq
 8006ab6:	681a      	ldreq	r2, [r3, #0]
 8006ab8:	685b      	ldreq	r3, [r3, #4]
 8006aba:	1852      	addeq	r2, r2, r1
 8006abc:	6022      	streq	r2, [r4, #0]
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	6004      	str	r4, [r0, #0]
 8006ac2:	e7ed      	b.n	8006aa0 <_free_r+0x24>
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	b10b      	cbz	r3, 8006ace <_free_r+0x52>
 8006aca:	42a3      	cmp	r3, r4
 8006acc:	d9fa      	bls.n	8006ac4 <_free_r+0x48>
 8006ace:	6811      	ldr	r1, [r2, #0]
 8006ad0:	1850      	adds	r0, r2, r1
 8006ad2:	42a0      	cmp	r0, r4
 8006ad4:	d10b      	bne.n	8006aee <_free_r+0x72>
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	4401      	add	r1, r0
 8006ada:	1850      	adds	r0, r2, r1
 8006adc:	4283      	cmp	r3, r0
 8006ade:	6011      	str	r1, [r2, #0]
 8006ae0:	d1de      	bne.n	8006aa0 <_free_r+0x24>
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4401      	add	r1, r0
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	6053      	str	r3, [r2, #4]
 8006aec:	e7d8      	b.n	8006aa0 <_free_r+0x24>
 8006aee:	d902      	bls.n	8006af6 <_free_r+0x7a>
 8006af0:	230c      	movs	r3, #12
 8006af2:	602b      	str	r3, [r5, #0]
 8006af4:	e7d4      	b.n	8006aa0 <_free_r+0x24>
 8006af6:	6820      	ldr	r0, [r4, #0]
 8006af8:	1821      	adds	r1, r4, r0
 8006afa:	428b      	cmp	r3, r1
 8006afc:	bf01      	itttt	eq
 8006afe:	6819      	ldreq	r1, [r3, #0]
 8006b00:	685b      	ldreq	r3, [r3, #4]
 8006b02:	1809      	addeq	r1, r1, r0
 8006b04:	6021      	streq	r1, [r4, #0]
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6054      	str	r4, [r2, #4]
 8006b0a:	e7c9      	b.n	8006aa0 <_free_r+0x24>
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000564 	.word	0x20000564

08006b14 <_malloc_r>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	1ccd      	adds	r5, r1, #3
 8006b18:	f025 0503 	bic.w	r5, r5, #3
 8006b1c:	3508      	adds	r5, #8
 8006b1e:	2d0c      	cmp	r5, #12
 8006b20:	bf38      	it	cc
 8006b22:	250c      	movcc	r5, #12
 8006b24:	2d00      	cmp	r5, #0
 8006b26:	4606      	mov	r6, r0
 8006b28:	db01      	blt.n	8006b2e <_malloc_r+0x1a>
 8006b2a:	42a9      	cmp	r1, r5
 8006b2c:	d903      	bls.n	8006b36 <_malloc_r+0x22>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	2000      	movs	r0, #0
 8006b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b36:	f000 fad3 	bl	80070e0 <__malloc_lock>
 8006b3a:	4921      	ldr	r1, [pc, #132]	; (8006bc0 <_malloc_r+0xac>)
 8006b3c:	680a      	ldr	r2, [r1, #0]
 8006b3e:	4614      	mov	r4, r2
 8006b40:	b99c      	cbnz	r4, 8006b6a <_malloc_r+0x56>
 8006b42:	4f20      	ldr	r7, [pc, #128]	; (8006bc4 <_malloc_r+0xb0>)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	b923      	cbnz	r3, 8006b52 <_malloc_r+0x3e>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 f9dc 	bl	8006f08 <_sbrk_r>
 8006b50:	6038      	str	r0, [r7, #0]
 8006b52:	4629      	mov	r1, r5
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 f9d7 	bl	8006f08 <_sbrk_r>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	d123      	bne.n	8006ba6 <_malloc_r+0x92>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	4630      	mov	r0, r6
 8006b62:	6033      	str	r3, [r6, #0]
 8006b64:	f000 fac2 	bl	80070ec <__malloc_unlock>
 8006b68:	e7e3      	b.n	8006b32 <_malloc_r+0x1e>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	1b5b      	subs	r3, r3, r5
 8006b6e:	d417      	bmi.n	8006ba0 <_malloc_r+0x8c>
 8006b70:	2b0b      	cmp	r3, #11
 8006b72:	d903      	bls.n	8006b7c <_malloc_r+0x68>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	441c      	add	r4, r3
 8006b78:	6025      	str	r5, [r4, #0]
 8006b7a:	e004      	b.n	8006b86 <_malloc_r+0x72>
 8006b7c:	6863      	ldr	r3, [r4, #4]
 8006b7e:	42a2      	cmp	r2, r4
 8006b80:	bf0c      	ite	eq
 8006b82:	600b      	streq	r3, [r1, #0]
 8006b84:	6053      	strne	r3, [r2, #4]
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 fab0 	bl	80070ec <__malloc_unlock>
 8006b8c:	f104 000b 	add.w	r0, r4, #11
 8006b90:	1d23      	adds	r3, r4, #4
 8006b92:	f020 0007 	bic.w	r0, r0, #7
 8006b96:	1ac2      	subs	r2, r0, r3
 8006b98:	d0cc      	beq.n	8006b34 <_malloc_r+0x20>
 8006b9a:	1a1b      	subs	r3, r3, r0
 8006b9c:	50a3      	str	r3, [r4, r2]
 8006b9e:	e7c9      	b.n	8006b34 <_malloc_r+0x20>
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	6864      	ldr	r4, [r4, #4]
 8006ba4:	e7cc      	b.n	8006b40 <_malloc_r+0x2c>
 8006ba6:	1cc4      	adds	r4, r0, #3
 8006ba8:	f024 0403 	bic.w	r4, r4, #3
 8006bac:	42a0      	cmp	r0, r4
 8006bae:	d0e3      	beq.n	8006b78 <_malloc_r+0x64>
 8006bb0:	1a21      	subs	r1, r4, r0
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f000 f9a8 	bl	8006f08 <_sbrk_r>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d1dd      	bne.n	8006b78 <_malloc_r+0x64>
 8006bbc:	e7cf      	b.n	8006b5e <_malloc_r+0x4a>
 8006bbe:	bf00      	nop
 8006bc0:	20000564 	.word	0x20000564
 8006bc4:	20000568 	.word	0x20000568

08006bc8 <__sfputc_r>:
 8006bc8:	6893      	ldr	r3, [r2, #8]
 8006bca:	b410      	push	{r4}
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	6093      	str	r3, [r2, #8]
 8006bd2:	da07      	bge.n	8006be4 <__sfputc_r+0x1c>
 8006bd4:	6994      	ldr	r4, [r2, #24]
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	db01      	blt.n	8006bde <__sfputc_r+0x16>
 8006bda:	290a      	cmp	r1, #10
 8006bdc:	d102      	bne.n	8006be4 <__sfputc_r+0x1c>
 8006bde:	bc10      	pop	{r4}
 8006be0:	f7fe ba36 	b.w	8005050 <__swbuf_r>
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	1c58      	adds	r0, r3, #1
 8006be8:	6010      	str	r0, [r2, #0]
 8006bea:	7019      	strb	r1, [r3, #0]
 8006bec:	4608      	mov	r0, r1
 8006bee:	bc10      	pop	{r4}
 8006bf0:	4770      	bx	lr

08006bf2 <__sfputs_r>:
 8006bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	18d5      	adds	r5, r2, r3
 8006bfc:	42ac      	cmp	r4, r5
 8006bfe:	d101      	bne.n	8006c04 <__sfputs_r+0x12>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e007      	b.n	8006c14 <__sfputs_r+0x22>
 8006c04:	463a      	mov	r2, r7
 8006c06:	4630      	mov	r0, r6
 8006c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0c:	f7ff ffdc 	bl	8006bc8 <__sfputc_r>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d1f3      	bne.n	8006bfc <__sfputs_r+0xa>
 8006c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c18 <_vfiprintf_r>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	4614      	mov	r4, r2
 8006c20:	4698      	mov	r8, r3
 8006c22:	4606      	mov	r6, r0
 8006c24:	b09d      	sub	sp, #116	; 0x74
 8006c26:	b118      	cbz	r0, 8006c30 <_vfiprintf_r+0x18>
 8006c28:	6983      	ldr	r3, [r0, #24]
 8006c2a:	b90b      	cbnz	r3, 8006c30 <_vfiprintf_r+0x18>
 8006c2c:	f7ff fa68 	bl	8006100 <__sinit>
 8006c30:	4b89      	ldr	r3, [pc, #548]	; (8006e58 <_vfiprintf_r+0x240>)
 8006c32:	429d      	cmp	r5, r3
 8006c34:	d11b      	bne.n	8006c6e <_vfiprintf_r+0x56>
 8006c36:	6875      	ldr	r5, [r6, #4]
 8006c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c3a:	07d9      	lsls	r1, r3, #31
 8006c3c:	d405      	bmi.n	8006c4a <_vfiprintf_r+0x32>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	059a      	lsls	r2, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_vfiprintf_r+0x32>
 8006c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c46:	f7ff fafe 	bl	8006246 <__retarget_lock_acquire_recursive>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	071b      	lsls	r3, r3, #28
 8006c4e:	d501      	bpl.n	8006c54 <_vfiprintf_r+0x3c>
 8006c50:	692b      	ldr	r3, [r5, #16]
 8006c52:	b9eb      	cbnz	r3, 8006c90 <_vfiprintf_r+0x78>
 8006c54:	4629      	mov	r1, r5
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7fe fa4c 	bl	80050f4 <__swsetup_r>
 8006c5c:	b1c0      	cbz	r0, 8006c90 <_vfiprintf_r+0x78>
 8006c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c60:	07dc      	lsls	r4, r3, #31
 8006c62:	d50e      	bpl.n	8006c82 <_vfiprintf_r+0x6a>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b01d      	add	sp, #116	; 0x74
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	4b7b      	ldr	r3, [pc, #492]	; (8006e5c <_vfiprintf_r+0x244>)
 8006c70:	429d      	cmp	r5, r3
 8006c72:	d101      	bne.n	8006c78 <_vfiprintf_r+0x60>
 8006c74:	68b5      	ldr	r5, [r6, #8]
 8006c76:	e7df      	b.n	8006c38 <_vfiprintf_r+0x20>
 8006c78:	4b79      	ldr	r3, [pc, #484]	; (8006e60 <_vfiprintf_r+0x248>)
 8006c7a:	429d      	cmp	r5, r3
 8006c7c:	bf08      	it	eq
 8006c7e:	68f5      	ldreq	r5, [r6, #12]
 8006c80:	e7da      	b.n	8006c38 <_vfiprintf_r+0x20>
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	0598      	lsls	r0, r3, #22
 8006c86:	d4ed      	bmi.n	8006c64 <_vfiprintf_r+0x4c>
 8006c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c8a:	f7ff fadd 	bl	8006248 <__retarget_lock_release_recursive>
 8006c8e:	e7e9      	b.n	8006c64 <_vfiprintf_r+0x4c>
 8006c90:	2300      	movs	r3, #0
 8006c92:	9309      	str	r3, [sp, #36]	; 0x24
 8006c94:	2320      	movs	r3, #32
 8006c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c9a:	2330      	movs	r3, #48	; 0x30
 8006c9c:	f04f 0901 	mov.w	r9, #1
 8006ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e64 <_vfiprintf_r+0x24c>
 8006ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cac:	4623      	mov	r3, r4
 8006cae:	469a      	mov	sl, r3
 8006cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb4:	b10a      	cbz	r2, 8006cba <_vfiprintf_r+0xa2>
 8006cb6:	2a25      	cmp	r2, #37	; 0x25
 8006cb8:	d1f9      	bne.n	8006cae <_vfiprintf_r+0x96>
 8006cba:	ebba 0b04 	subs.w	fp, sl, r4
 8006cbe:	d00b      	beq.n	8006cd8 <_vfiprintf_r+0xc0>
 8006cc0:	465b      	mov	r3, fp
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff93 	bl	8006bf2 <__sfputs_r>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f000 80aa 	beq.w	8006e26 <_vfiprintf_r+0x20e>
 8006cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd4:	445a      	add	r2, fp
 8006cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80a2 	beq.w	8006e26 <_vfiprintf_r+0x20e>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cec:	f10a 0a01 	add.w	sl, sl, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8006cfa:	4654      	mov	r4, sl
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d02:	4858      	ldr	r0, [pc, #352]	; (8006e64 <_vfiprintf_r+0x24c>)
 8006d04:	f7ff fb0e 	bl	8006324 <memchr>
 8006d08:	9a04      	ldr	r2, [sp, #16]
 8006d0a:	b9d8      	cbnz	r0, 8006d44 <_vfiprintf_r+0x12c>
 8006d0c:	06d1      	lsls	r1, r2, #27
 8006d0e:	bf44      	itt	mi
 8006d10:	2320      	movmi	r3, #32
 8006d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d16:	0713      	lsls	r3, r2, #28
 8006d18:	bf44      	itt	mi
 8006d1a:	232b      	movmi	r3, #43	; 0x2b
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d20:	f89a 3000 	ldrb.w	r3, [sl]
 8006d24:	2b2a      	cmp	r3, #42	; 0x2a
 8006d26:	d015      	beq.n	8006d54 <_vfiprintf_r+0x13c>
 8006d28:	4654      	mov	r4, sl
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	f04f 0c0a 	mov.w	ip, #10
 8006d30:	9a07      	ldr	r2, [sp, #28]
 8006d32:	4621      	mov	r1, r4
 8006d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d38:	3b30      	subs	r3, #48	; 0x30
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d94e      	bls.n	8006ddc <_vfiprintf_r+0x1c4>
 8006d3e:	b1b0      	cbz	r0, 8006d6e <_vfiprintf_r+0x156>
 8006d40:	9207      	str	r2, [sp, #28]
 8006d42:	e014      	b.n	8006d6e <_vfiprintf_r+0x156>
 8006d44:	eba0 0308 	sub.w	r3, r0, r8
 8006d48:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	46a2      	mov	sl, r4
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	e7d2      	b.n	8006cfa <_vfiprintf_r+0xe2>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1d19      	adds	r1, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9103      	str	r1, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfbb      	ittet	lt
 8006d60:	425b      	neglt	r3, r3
 8006d62:	f042 0202 	orrlt.w	r2, r2, #2
 8006d66:	9307      	strge	r3, [sp, #28]
 8006d68:	9307      	strlt	r3, [sp, #28]
 8006d6a:	bfb8      	it	lt
 8006d6c:	9204      	strlt	r2, [sp, #16]
 8006d6e:	7823      	ldrb	r3, [r4, #0]
 8006d70:	2b2e      	cmp	r3, #46	; 0x2e
 8006d72:	d10c      	bne.n	8006d8e <_vfiprintf_r+0x176>
 8006d74:	7863      	ldrb	r3, [r4, #1]
 8006d76:	2b2a      	cmp	r3, #42	; 0x2a
 8006d78:	d135      	bne.n	8006de6 <_vfiprintf_r+0x1ce>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3402      	adds	r4, #2
 8006d7e:	1d1a      	adds	r2, r3, #4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	9203      	str	r2, [sp, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bfb8      	it	lt
 8006d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e74 <_vfiprintf_r+0x25c>
 8006d92:	2203      	movs	r2, #3
 8006d94:	4650      	mov	r0, sl
 8006d96:	7821      	ldrb	r1, [r4, #0]
 8006d98:	f7ff fac4 	bl	8006324 <memchr>
 8006d9c:	b140      	cbz	r0, 8006db0 <_vfiprintf_r+0x198>
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	eba0 000a 	sub.w	r0, r0, sl
 8006da4:	fa03 f000 	lsl.w	r0, r3, r0
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	3401      	adds	r4, #1
 8006dac:	4303      	orrs	r3, r0
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	2206      	movs	r2, #6
 8006db6:	482c      	ldr	r0, [pc, #176]	; (8006e68 <_vfiprintf_r+0x250>)
 8006db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dbc:	f7ff fab2 	bl	8006324 <memchr>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d03f      	beq.n	8006e44 <_vfiprintf_r+0x22c>
 8006dc4:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <_vfiprintf_r+0x254>)
 8006dc6:	bb1b      	cbnz	r3, 8006e10 <_vfiprintf_r+0x1f8>
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	3307      	adds	r3, #7
 8006dcc:	f023 0307 	bic.w	r3, r3, #7
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd6:	443b      	add	r3, r7
 8006dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dda:	e767      	b.n	8006cac <_vfiprintf_r+0x94>
 8006ddc:	460c      	mov	r4, r1
 8006dde:	2001      	movs	r0, #1
 8006de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de4:	e7a5      	b.n	8006d32 <_vfiprintf_r+0x11a>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4619      	mov	r1, r3
 8006dee:	3401      	adds	r4, #1
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	4620      	mov	r0, r4
 8006df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df8:	3a30      	subs	r2, #48	; 0x30
 8006dfa:	2a09      	cmp	r2, #9
 8006dfc:	d903      	bls.n	8006e06 <_vfiprintf_r+0x1ee>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0c5      	beq.n	8006d8e <_vfiprintf_r+0x176>
 8006e02:	9105      	str	r1, [sp, #20]
 8006e04:	e7c3      	b.n	8006d8e <_vfiprintf_r+0x176>
 8006e06:	4604      	mov	r4, r0
 8006e08:	2301      	movs	r3, #1
 8006e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0e:	e7f0      	b.n	8006df2 <_vfiprintf_r+0x1da>
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4630      	mov	r0, r6
 8006e18:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <_vfiprintf_r+0x258>)
 8006e1a:	a904      	add	r1, sp, #16
 8006e1c:	f7fd fc94 	bl	8004748 <_printf_float>
 8006e20:	4607      	mov	r7, r0
 8006e22:	1c78      	adds	r0, r7, #1
 8006e24:	d1d6      	bne.n	8006dd4 <_vfiprintf_r+0x1bc>
 8006e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e28:	07d9      	lsls	r1, r3, #31
 8006e2a:	d405      	bmi.n	8006e38 <_vfiprintf_r+0x220>
 8006e2c:	89ab      	ldrh	r3, [r5, #12]
 8006e2e:	059a      	lsls	r2, r3, #22
 8006e30:	d402      	bmi.n	8006e38 <_vfiprintf_r+0x220>
 8006e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e34:	f7ff fa08 	bl	8006248 <__retarget_lock_release_recursive>
 8006e38:	89ab      	ldrh	r3, [r5, #12]
 8006e3a:	065b      	lsls	r3, r3, #25
 8006e3c:	f53f af12 	bmi.w	8006c64 <_vfiprintf_r+0x4c>
 8006e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e42:	e711      	b.n	8006c68 <_vfiprintf_r+0x50>
 8006e44:	ab03      	add	r3, sp, #12
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <_vfiprintf_r+0x258>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	f7fd ff16 	bl	8004c80 <_printf_i>
 8006e54:	e7e4      	b.n	8006e20 <_vfiprintf_r+0x208>
 8006e56:	bf00      	nop
 8006e58:	080073dc 	.word	0x080073dc
 8006e5c:	080073fc 	.word	0x080073fc
 8006e60:	080073bc 	.word	0x080073bc
 8006e64:	0800757c 	.word	0x0800757c
 8006e68:	08007586 	.word	0x08007586
 8006e6c:	08004749 	.word	0x08004749
 8006e70:	08006bf3 	.word	0x08006bf3
 8006e74:	08007582 	.word	0x08007582

08006e78 <_putc_r>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	4606      	mov	r6, r0
 8006e80:	b118      	cbz	r0, 8006e8a <_putc_r+0x12>
 8006e82:	6983      	ldr	r3, [r0, #24]
 8006e84:	b90b      	cbnz	r3, 8006e8a <_putc_r+0x12>
 8006e86:	f7ff f93b 	bl	8006100 <__sinit>
 8006e8a:	4b1c      	ldr	r3, [pc, #112]	; (8006efc <_putc_r+0x84>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d124      	bne.n	8006eda <_putc_r+0x62>
 8006e90:	6874      	ldr	r4, [r6, #4]
 8006e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e94:	07d8      	lsls	r0, r3, #31
 8006e96:	d405      	bmi.n	8006ea4 <_putc_r+0x2c>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	0599      	lsls	r1, r3, #22
 8006e9c:	d402      	bmi.n	8006ea4 <_putc_r+0x2c>
 8006e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea0:	f7ff f9d1 	bl	8006246 <__retarget_lock_acquire_recursive>
 8006ea4:	68a3      	ldr	r3, [r4, #8]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	60a3      	str	r3, [r4, #8]
 8006eac:	da05      	bge.n	8006eba <_putc_r+0x42>
 8006eae:	69a2      	ldr	r2, [r4, #24]
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	db1c      	blt.n	8006eee <_putc_r+0x76>
 8006eb4:	b2eb      	uxtb	r3, r5
 8006eb6:	2b0a      	cmp	r3, #10
 8006eb8:	d019      	beq.n	8006eee <_putc_r+0x76>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	6022      	str	r2, [r4, #0]
 8006ec0:	701d      	strb	r5, [r3, #0]
 8006ec2:	b2ed      	uxtb	r5, r5
 8006ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d405      	bmi.n	8006ed6 <_putc_r+0x5e>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	059b      	lsls	r3, r3, #22
 8006ece:	d402      	bmi.n	8006ed6 <_putc_r+0x5e>
 8006ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed2:	f7ff f9b9 	bl	8006248 <__retarget_lock_release_recursive>
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <_putc_r+0x88>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d101      	bne.n	8006ee4 <_putc_r+0x6c>
 8006ee0:	68b4      	ldr	r4, [r6, #8]
 8006ee2:	e7d6      	b.n	8006e92 <_putc_r+0x1a>
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <_putc_r+0x8c>)
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	bf08      	it	eq
 8006eea:	68f4      	ldreq	r4, [r6, #12]
 8006eec:	e7d1      	b.n	8006e92 <_putc_r+0x1a>
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7fe f8ac 	bl	8005050 <__swbuf_r>
 8006ef8:	4605      	mov	r5, r0
 8006efa:	e7e3      	b.n	8006ec4 <_putc_r+0x4c>
 8006efc:	080073dc 	.word	0x080073dc
 8006f00:	080073fc 	.word	0x080073fc
 8006f04:	080073bc 	.word	0x080073bc

08006f08 <_sbrk_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4d05      	ldr	r5, [pc, #20]	; (8006f24 <_sbrk_r+0x1c>)
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fa ffb8 	bl	8001e88 <_sbrk>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_sbrk_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_sbrk_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000062c 	.word	0x2000062c

08006f28 <__sread>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	f000 f8e2 	bl	80070f8 <_read_r>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	bfab      	itete	ge
 8006f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f3c:	181b      	addge	r3, r3, r0
 8006f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f42:	bfac      	ite	ge
 8006f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f46:	81a3      	strhlt	r3, [r4, #12]
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <__swrite>:
 8006f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4e:	461f      	mov	r7, r3
 8006f50:	898b      	ldrh	r3, [r1, #12]
 8006f52:	4605      	mov	r5, r0
 8006f54:	05db      	lsls	r3, r3, #23
 8006f56:	460c      	mov	r4, r1
 8006f58:	4616      	mov	r6, r2
 8006f5a:	d505      	bpl.n	8006f68 <__swrite+0x1e>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	f000 f898 	bl	8007098 <_lseek_r>
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	4628      	mov	r0, r5
 8006f74:	463b      	mov	r3, r7
 8006f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	f000 b817 	b.w	8006fb0 <_write_r>

08006f82 <__sseek>:
 8006f82:	b510      	push	{r4, lr}
 8006f84:	460c      	mov	r4, r1
 8006f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8a:	f000 f885 	bl	8007098 <_lseek_r>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	bf15      	itete	ne
 8006f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f9e:	81a3      	strheq	r3, [r4, #12]
 8006fa0:	bf18      	it	ne
 8006fa2:	81a3      	strhne	r3, [r4, #12]
 8006fa4:	bd10      	pop	{r4, pc}

08006fa6 <__sclose>:
 8006fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006faa:	f000 b831 	b.w	8007010 <_close_r>
	...

08006fb0 <_write_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4d05      	ldr	r5, [pc, #20]	; (8006fd0 <_write_r+0x20>)
 8006fbc:	602a      	str	r2, [r5, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fa ff16 	bl	8001df0 <_write>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_write_r+0x1e>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_write_r+0x1e>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	2000062c 	.word	0x2000062c

08006fd4 <__assert_func>:
 8006fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <__assert_func+0x2c>)
 8006fdc:	4605      	mov	r5, r0
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68d8      	ldr	r0, [r3, #12]
 8006fe2:	b14c      	cbz	r4, 8006ff8 <__assert_func+0x24>
 8006fe4:	4b07      	ldr	r3, [pc, #28]	; (8007004 <__assert_func+0x30>)
 8006fe6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fea:	9100      	str	r1, [sp, #0]
 8006fec:	462b      	mov	r3, r5
 8006fee:	4906      	ldr	r1, [pc, #24]	; (8007008 <__assert_func+0x34>)
 8006ff0:	f000 f81e 	bl	8007030 <fiprintf>
 8006ff4:	f000 f89f 	bl	8007136 <abort>
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <__assert_func+0x38>)
 8006ffa:	461c      	mov	r4, r3
 8006ffc:	e7f3      	b.n	8006fe6 <__assert_func+0x12>
 8006ffe:	bf00      	nop
 8007000:	2000000c 	.word	0x2000000c
 8007004:	0800758d 	.word	0x0800758d
 8007008:	0800759a 	.word	0x0800759a
 800700c:	080075c8 	.word	0x080075c8

08007010 <_close_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	2300      	movs	r3, #0
 8007014:	4d05      	ldr	r5, [pc, #20]	; (800702c <_close_r+0x1c>)
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7fa ff04 	bl	8001e28 <_close>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_close_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_close_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	2000062c 	.word	0x2000062c

08007030 <fiprintf>:
 8007030:	b40e      	push	{r1, r2, r3}
 8007032:	b503      	push	{r0, r1, lr}
 8007034:	4601      	mov	r1, r0
 8007036:	ab03      	add	r3, sp, #12
 8007038:	4805      	ldr	r0, [pc, #20]	; (8007050 <fiprintf+0x20>)
 800703a:	f853 2b04 	ldr.w	r2, [r3], #4
 800703e:	6800      	ldr	r0, [r0, #0]
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	f7ff fde9 	bl	8006c18 <_vfiprintf_r>
 8007046:	b002      	add	sp, #8
 8007048:	f85d eb04 	ldr.w	lr, [sp], #4
 800704c:	b003      	add	sp, #12
 800704e:	4770      	bx	lr
 8007050:	2000000c 	.word	0x2000000c

08007054 <_fstat_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	2300      	movs	r3, #0
 8007058:	4d06      	ldr	r5, [pc, #24]	; (8007074 <_fstat_r+0x20>)
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	f7fa feec 	bl	8001e3e <_fstat>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d102      	bne.n	8007070 <_fstat_r+0x1c>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	b103      	cbz	r3, 8007070 <_fstat_r+0x1c>
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	bd38      	pop	{r3, r4, r5, pc}
 8007072:	bf00      	nop
 8007074:	2000062c 	.word	0x2000062c

08007078 <_isatty_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	2300      	movs	r3, #0
 800707c:	4d05      	ldr	r5, [pc, #20]	; (8007094 <_isatty_r+0x1c>)
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fa feea 	bl	8001e5c <_isatty>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_isatty_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_isatty_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	2000062c 	.word	0x2000062c

08007098 <_lseek_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	4d05      	ldr	r5, [pc, #20]	; (80070b8 <_lseek_r+0x20>)
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fa fee2 	bl	8001e70 <_lseek>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_lseek_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_lseek_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	2000062c 	.word	0x2000062c

080070bc <__ascii_mbtowc>:
 80070bc:	b082      	sub	sp, #8
 80070be:	b901      	cbnz	r1, 80070c2 <__ascii_mbtowc+0x6>
 80070c0:	a901      	add	r1, sp, #4
 80070c2:	b142      	cbz	r2, 80070d6 <__ascii_mbtowc+0x1a>
 80070c4:	b14b      	cbz	r3, 80070da <__ascii_mbtowc+0x1e>
 80070c6:	7813      	ldrb	r3, [r2, #0]
 80070c8:	600b      	str	r3, [r1, #0]
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	1e10      	subs	r0, r2, #0
 80070ce:	bf18      	it	ne
 80070d0:	2001      	movne	r0, #1
 80070d2:	b002      	add	sp, #8
 80070d4:	4770      	bx	lr
 80070d6:	4610      	mov	r0, r2
 80070d8:	e7fb      	b.n	80070d2 <__ascii_mbtowc+0x16>
 80070da:	f06f 0001 	mvn.w	r0, #1
 80070de:	e7f8      	b.n	80070d2 <__ascii_mbtowc+0x16>

080070e0 <__malloc_lock>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__malloc_lock+0x8>)
 80070e2:	f7ff b8b0 	b.w	8006246 <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	20000624 	.word	0x20000624

080070ec <__malloc_unlock>:
 80070ec:	4801      	ldr	r0, [pc, #4]	; (80070f4 <__malloc_unlock+0x8>)
 80070ee:	f7ff b8ab 	b.w	8006248 <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	20000624 	.word	0x20000624

080070f8 <_read_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	2200      	movs	r2, #0
 8007102:	4d05      	ldr	r5, [pc, #20]	; (8007118 <_read_r+0x20>)
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7fa fe55 	bl	8001db6 <_read>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_read_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_read_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	2000062c 	.word	0x2000062c

0800711c <__ascii_wctomb>:
 800711c:	4603      	mov	r3, r0
 800711e:	4608      	mov	r0, r1
 8007120:	b141      	cbz	r1, 8007134 <__ascii_wctomb+0x18>
 8007122:	2aff      	cmp	r2, #255	; 0xff
 8007124:	d904      	bls.n	8007130 <__ascii_wctomb+0x14>
 8007126:	228a      	movs	r2, #138	; 0x8a
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	4770      	bx	lr
 8007130:	2001      	movs	r0, #1
 8007132:	700a      	strb	r2, [r1, #0]
 8007134:	4770      	bx	lr

08007136 <abort>:
 8007136:	2006      	movs	r0, #6
 8007138:	b508      	push	{r3, lr}
 800713a:	f000 f82b 	bl	8007194 <raise>
 800713e:	2001      	movs	r0, #1
 8007140:	f7fa fe2f 	bl	8001da2 <_exit>

08007144 <_raise_r>:
 8007144:	291f      	cmp	r1, #31
 8007146:	b538      	push	{r3, r4, r5, lr}
 8007148:	4604      	mov	r4, r0
 800714a:	460d      	mov	r5, r1
 800714c:	d904      	bls.n	8007158 <_raise_r+0x14>
 800714e:	2316      	movs	r3, #22
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	f04f 30ff 	mov.w	r0, #4294967295
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800715a:	b112      	cbz	r2, 8007162 <_raise_r+0x1e>
 800715c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007160:	b94b      	cbnz	r3, 8007176 <_raise_r+0x32>
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f830 	bl	80071c8 <_getpid_r>
 8007168:	462a      	mov	r2, r5
 800716a:	4601      	mov	r1, r0
 800716c:	4620      	mov	r0, r4
 800716e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007172:	f000 b817 	b.w	80071a4 <_kill_r>
 8007176:	2b01      	cmp	r3, #1
 8007178:	d00a      	beq.n	8007190 <_raise_r+0x4c>
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	d103      	bne.n	8007186 <_raise_r+0x42>
 800717e:	2316      	movs	r3, #22
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	2001      	movs	r0, #1
 8007184:	e7e7      	b.n	8007156 <_raise_r+0x12>
 8007186:	2400      	movs	r4, #0
 8007188:	4628      	mov	r0, r5
 800718a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800718e:	4798      	blx	r3
 8007190:	2000      	movs	r0, #0
 8007192:	e7e0      	b.n	8007156 <_raise_r+0x12>

08007194 <raise>:
 8007194:	4b02      	ldr	r3, [pc, #8]	; (80071a0 <raise+0xc>)
 8007196:	4601      	mov	r1, r0
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	f7ff bfd3 	b.w	8007144 <_raise_r>
 800719e:	bf00      	nop
 80071a0:	2000000c 	.word	0x2000000c

080071a4 <_kill_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	2300      	movs	r3, #0
 80071a8:	4d06      	ldr	r5, [pc, #24]	; (80071c4 <_kill_r+0x20>)
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	f7fa fde6 	bl	8001d82 <_kill>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d102      	bne.n	80071c0 <_kill_r+0x1c>
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	b103      	cbz	r3, 80071c0 <_kill_r+0x1c>
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	bd38      	pop	{r3, r4, r5, pc}
 80071c2:	bf00      	nop
 80071c4:	2000062c 	.word	0x2000062c

080071c8 <_getpid_r>:
 80071c8:	f7fa bdd4 	b.w	8001d74 <_getpid>

080071cc <_init>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr

080071d8 <_fini>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr
